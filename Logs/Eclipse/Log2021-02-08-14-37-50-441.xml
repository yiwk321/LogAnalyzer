<Events startTimestamp="1612813070441" logVersion="1.0.0.202102051220">
  <Command __id="72" _type="PauseCommand" date="Mon Feb 08 15:10:23 EST 2021" range="5m-10m" starttimestamp="1612813070441" timestamp="1952862">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[564955]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="71" _type="ShellCommand" date="Mon Feb 08 15:10:23 EST 2021" starttimestamp="1612813070441" timestamp="1952862" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="73" _type="MoveCaretCommand" caretOffset="55" date="Mon Feb 08 15:10:23 EST 2021" docOffset="55" starttimestamp="1612813070441" timestamp="1952951" />
  <Command __id="75" _type="PauseCommand" date="Mon Feb 08 15:10:28 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="1957739">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4788]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="76" _type="MoveCaretCommand" caretOffset="16588" date="Mon Feb 08 15:10:28 EST 2021" docOffset="17791" starttimestamp="1612813070441" timestamp="1957939" />
  <Command __id="78" _type="PauseCommand" date="Mon Feb 08 15:10:32 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="1961786">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3847]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="77" _type="SelectTextCommand" caretOffset="1473" date="Mon Feb 08 15:10:32 EST 2021" end="1682" start="1473" starttimestamp="1612813070441" timestamp="1961786" />
  <Command __id="80" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:10:32 EST 2021" starttimestamp="1612813070441" timestamp="1962000" />
  <Command __id="81" _type="MoveCaretCommand" caretOffset="1463" date="Mon Feb 08 15:10:32 EST 2021" docOffset="2666" starttimestamp="1612813070441" timestamp="1962369" />
  <Command __id="82" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 15:10:33 EST 2021" starttimestamp="1612813070441" timestamp="1962939" />
  <Command __id="83" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:10:33 EST 2021" starttimestamp="1612813070441" timestamp="1963126" />
  <Command __id="84" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:10:33 EST 2021" starttimestamp="1612813070441" timestamp="1963500" />
  <Command __id="86" _type="PauseCommand" date="Mon Feb 08 15:10:40 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="1969867">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6367]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="85" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Mon Feb 08 15:10:40 EST 2021" starttimestamp="1612813070441" timestamp="1969867" />
  <Command __id="91" _type="PauseCommand" date="Mon Feb 08 15:10:46 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="1975848">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2974]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="90" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Mon Feb 08 15:10:46 EST 2021" starttimestamp="1612813070441" timestamp="1975848" />
  <Command __id="93" _type="PauseCommand" date="Mon Feb 08 15:11:10 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="1999713">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[23865]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="92" _type="SelectTextCommand" caretOffset="2331" date="Mon Feb 08 15:11:10 EST 2021" end="2331" start="2321" starttimestamp="1612813070441" timestamp="1999713" />
  <Command __id="94" _type="MoveCaretCommand" caretOffset="2332" date="Mon Feb 08 15:11:10 EST 2021" docOffset="3855" starttimestamp="1612813070441" timestamp="2000122" />
  <Command __id="96" _type="PauseCommand" date="Mon Feb 08 15:11:18 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2007618">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7496]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="95" _type="MoveCaretCommand" caretOffset="2310" date="Mon Feb 08 15:11:18 EST 2021" docOffset="3833" starttimestamp="1612813070441" timestamp="2007618" />
  <Command __id="98" _type="PauseCommand" date="Mon Feb 08 15:11:19 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2009122">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1504]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="99" _type="InsertStringCommand" date="Mon Feb 08 15:11:19 EST 2021" starttimestamp="1612813070441" timestamp="2009137" timestamp2="2009137">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="101" _type="PauseCommand" date="Mon Feb 08 15:11:22 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2011683">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2546]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="100" _type="SelectTextCommand" caretOffset="2329" date="Mon Feb 08 15:11:22 EST 2021" end="2329" start="2322" starttimestamp="1612813070441" timestamp="2011683" />
  <Command __id="103" _type="UndoCommand" date="Mon Feb 08 15:11:22 EST 2021" starttimestamp="1612813070441" timestamp="2012495" />
  <Command __id="104" _type="MoveCaretCommand" caretOffset="2468" date="Mon Feb 08 15:11:23 EST 2021" docOffset="3991" starttimestamp="1612813070441" timestamp="2012849" />
  <Command __id="106" _type="PauseCommand" date="Mon Feb 08 15:11:27 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2017122">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4273]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="105" _type="MoveCaretCommand" caretOffset="2618" date="Mon Feb 08 15:11:27 EST 2021" docOffset="4141" starttimestamp="1612813070441" timestamp="2017122" />
  <Command __id="107" _type="MoveCaretCommand" caretOffset="2644" date="Mon Feb 08 15:11:28 EST 2021" docOffset="4167" starttimestamp="1612813070441" timestamp="2017682" />
  <Command __id="108" _type="MoveCaretCommand" caretOffset="2644" date="Mon Feb 08 15:11:28 EST 2021" docOffset="4167" starttimestamp="1612813070441" timestamp="2018131" />
  <Command __id="109" _type="MoveCaretCommand" caretOffset="2678" date="Mon Feb 08 15:11:29 EST 2021" docOffset="4201" starttimestamp="1612813070441" timestamp="2018576" />
  <Command __id="111" _type="PauseCommand" date="Mon Feb 08 15:11:32 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2022163">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3587]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="110" _type="SelectTextCommand" caretOffset="5084" date="Mon Feb 08 15:11:32 EST 2021" end="5084" start="5066" starttimestamp="1612813070441" timestamp="2022163" />
  <Command __id="113" _type="PauseCommand" date="Mon Feb 08 15:12:42 EST 2021" range="1m-2m" starttimestamp="1612813070441" timestamp="2092426">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[70263]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="112" _type="MoveCaretCommand" caretOffset="5074" date="Mon Feb 08 15:12:42 EST 2021" docOffset="25336" starttimestamp="1612813070441" timestamp="2092426" />
  <Command __id="115" _type="PauseCommand" date="Mon Feb 08 15:12:45 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2094790">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2364]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="114" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:12:45 EST 2021" starttimestamp="1612813070441" timestamp="2094790" />
  <Command __id="117" _type="PauseCommand" date="Mon Feb 08 15:13:15 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="2124646">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[29856]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="116" _type="MoveCaretCommand" caretOffset="2470" date="Mon Feb 08 15:13:15 EST 2021" docOffset="3993" starttimestamp="1612813070441" timestamp="2124646" />
  <Command __id="119" _type="PauseCommand" date="Mon Feb 08 15:13:40 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="2150366">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[25720]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="118" _type="SelectTextCommand" caretOffset="5084" date="Mon Feb 08 15:13:40 EST 2021" end="5084" start="5066" starttimestamp="1612813070441" timestamp="2150366" />
  <Command __id="121" _type="PauseCommand" date="Mon Feb 08 15:13:42 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2151814">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1448]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="120" _type="MoveCaretCommand" caretOffset="5555" date="Mon Feb 08 15:13:42 EST 2021" docOffset="25817" starttimestamp="1612813070441" timestamp="2151814" />
  <Command __id="122" _type="SelectTextCommand" caretOffset="5572" date="Mon Feb 08 15:13:42 EST 2021" end="5572" start="5552" starttimestamp="1612813070441" timestamp="2151988" />
  <Command __id="123" _type="SelectTextCommand" caretOffset="5605" date="Mon Feb 08 15:13:42 EST 2021" end="5605" start="5550" starttimestamp="1612813070441" timestamp="2152146" />
  <Command __id="125" _type="PauseCommand" date="Mon Feb 08 15:13:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2153607">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1461]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="124" _type="CopyCommand" date="Mon Feb 08 15:13:44 EST 2021" starttimestamp="1612813070441" timestamp="2153607" />
  <Command __id="127" _type="PauseCommand" date="Mon Feb 08 15:13:45 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2154949">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1342]]></rest>
    <prev><![CDATA[CopyCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="128" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:13:45 EST 2021" starttimestamp="1612813070441" timestamp="2154975" />
  <Command __id="130" _type="PauseCommand" date="Mon Feb 08 15:13:50 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2159874">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4899]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="129" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:13:50 EST 2021" starttimestamp="1612813070441" timestamp="2159874" />
  <Command __id="132" _type="PauseCommand" date="Mon Feb 08 15:13:56 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2166363">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6489]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="131" _type="MoveCaretCommand" caretOffset="2747" date="Mon Feb 08 15:13:56 EST 2021" docOffset="4270" starttimestamp="1612813070441" timestamp="2166363" />
  <Command __id="134" _type="PauseCommand" date="Mon Feb 08 15:14:05 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2175188">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8825]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="133" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.forwardHistory" date="Mon Feb 08 15:14:05 EST 2021" starttimestamp="1612813070441" timestamp="2175188" />
  <Command __id="136" _type="PauseCommand" date="Mon Feb 08 15:14:07 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2177282">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2094]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="135" _type="MoveCaretCommand" caretOffset="5548" date="Mon Feb 08 15:14:07 EST 2021" docOffset="25810" starttimestamp="1612813070441" timestamp="2177282" />
  <Command __id="138" _type="PauseCommand" date="Mon Feb 08 15:14:33 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="2203549">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[26267]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="137" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:14:33 EST 2021" starttimestamp="1612813070441" timestamp="2203549" />
  <Command __id="140" _type="PauseCommand" date="Mon Feb 08 15:14:41 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2211279">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7730]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="139" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.forwardHistory" date="Mon Feb 08 15:14:41 EST 2021" starttimestamp="1612813070441" timestamp="2211279" />
  <Command __id="142" _type="PauseCommand" date="Mon Feb 08 15:14:44 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2214374">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3095]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="141" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:14:44 EST 2021" starttimestamp="1612813070441" timestamp="2214374" />
  <Command __id="144" _type="PauseCommand" date="Mon Feb 08 15:14:53 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2223252">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8878]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="143" _type="MoveCaretCommand" caretOffset="2470" date="Mon Feb 08 15:14:53 EST 2021" docOffset="3993" starttimestamp="1612813070441" timestamp="2223252" />
  <Command __id="146" _type="PauseCommand" date="Mon Feb 08 15:15:08 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2238488">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[15236]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="145" _type="MoveCaretCommand" caretOffset="2372" date="Mon Feb 08 15:15:08 EST 2021" docOffset="3895" starttimestamp="1612813070441" timestamp="2238488" />
  <Command __id="147" _type="MoveCaretCommand" caretOffset="2368" date="Mon Feb 08 15:15:09 EST 2021" docOffset="3891" starttimestamp="1612813070441" timestamp="2239027" />
  <Command __id="148" _type="SelectTextCommand" caretOffset="2293" date="Mon Feb 08 15:15:09 EST 2021" end="2371" start="2293" starttimestamp="1612813070441" timestamp="2239417" />
  <Command __id="149" _type="MoveCaretCommand" caretOffset="2371" date="Mon Feb 08 15:15:10 EST 2021" docOffset="3894" starttimestamp="1612813070441" timestamp="2240270" />
  <Command __id="151" _type="PauseCommand" date="Mon Feb 08 15:15:11 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2241444">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1174]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="150" _type="MoveCaretCommand" caretOffset="2587" date="Mon Feb 08 15:15:11 EST 2021" docOffset="4110" starttimestamp="1612813070441" timestamp="2241444" />
  <Command __id="153" _type="PauseCommand" date="Mon Feb 08 15:16:28 EST 2021" range="1m-2m" starttimestamp="1612813070441" timestamp="2318434">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[76990]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="152" _type="SelectTextCommand" caretOffset="2644" date="Mon Feb 08 15:16:28 EST 2021" end="2644" start="2304" starttimestamp="1612813070441" timestamp="2318434" />
  <Command __id="155" _type="PauseCommand" date="Mon Feb 08 15:16:33 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2322611">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4177]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="164" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:16:33 EST 2021" starttimestamp="1612813070441" timestamp="2322749" />
  <Command __id="166" _type="PauseCommand" date="Mon Feb 08 15:16:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2323815">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1066]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="165" _type="MoveCaretCommand" caretOffset="2662" date="Mon Feb 08 15:16:34 EST 2021" docOffset="4185" starttimestamp="1612813070441" timestamp="2323815" />
  <Command __id="168" _type="PauseCommand" date="Mon Feb 08 15:16:35 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2324984">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1169]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="169" _type="InsertStringCommand" date="Mon Feb 08 15:16:35 EST 2021" starttimestamp="1612813070441" timestamp="2325002" timestamp2="2325002">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="171" _type="PauseCommand" date="Mon Feb 08 15:16:37 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2327256">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2254]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Mon Feb 08 15:16:37 EST 2021" starttimestamp="1612813070441" timestamp="2327263" timestamp2="2327263">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="174" _type="PauseCommand" date="Mon Feb 08 15:16:39 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2329246">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1983]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="173" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:16:39 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2329246" />
  <Command __id="178" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:16:41 EST 2021" starttimestamp="1612813070441" timestamp="2330747" />
  <Command __id="180" _type="PauseCommand" date="Mon Feb 08 15:16:43 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2332928">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2181]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="185" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:16:44 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2334009" />
  <Command __id="187" _type="InsertStringCommand" date="Mon Feb 08 15:16:44 EST 2021" starttimestamp="1612813070441" timestamp="2334067" timestamp2="2334067">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 14:37:50 EST 2021" docASTNodeCount="477" docActiveCodeLength="3545" docExpressionCount="294" docLength="3617" projectName="Hermes" starttimestamp="1612813070441" timestamp="237">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class WebCommand extends AbstractCommand implements EHICommand{
	private static final String XML_KEYWORD = "keyword";
	private static final String XML_URL = "URL";
//	private static final String XML_TITLE = "title";
	private static final String XML_TYPE = "type";
	private String keyword, url, type;	
	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",
			"http://zetcode.com/gfx/java2d/shapesandfills/", 
			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", 
			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", 
			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", 
			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", 
			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", 
			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; 

	public WebCommand() {}
	
	public WebCommand(String keyword, String url) {
		this.keyword = keyword;
		this.url = url;
		//this.title = title;
		type = getType();
	}
	
	private String getType() {
		for (String providedURL : PROVIDED_URL) {
			if (url.equals(providedURL)) {
				return "Instructor Provided Link";
			}
		}
		if (keyword.contains("Google Search")) {
			return "Search";
		}
		if (keyword.contains("Stack Overflow")) {
			return "Stack Overflow";
		}
		if (keyword.equals(url) && keyword.contains("google.com/url?")) {
			return "Search Result";
		}
		return "Link";
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_TYPE, type);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new HashMap<String, String>();
		dataMap.put(XML_KEYWORD, keyword);
		dataMap.put(XML_URL, url);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "WebCommand";
	}

	@Override
	public String getName() {
		return "Web";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			keyword = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			type = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			url = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="21" _type="Delete" date="Mon Feb 08 14:55:56 EST 2021" docASTNodeCount="471" docActiveCodeLength="3515" docExpressionCount="289" docLength="3587" endLine="3" length="30" offset="30" startLine="2" starttimestamp="1612813070441" timestamp="1085583">
    <text><![CDATA[import java.util.Comparator;
]]></text>
  </DocumentChange>
  <DocumentChange __id="27" _type="Delete" date="Mon Feb 08 14:55:57 EST 2021" docASTNodeCount="465" docActiveCodeLength="3488" docExpressionCount="284" docLength="3560" endLine="5" length="27" offset="80" startLine="4" starttimestamp="1612813070441" timestamp="1086768">
    <text><![CDATA[import java.util.TreeMap;
]]></text>
  </DocumentChange>
  <Command __id="74" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:10:28 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26108" docExpressionCount="3110" docLength="26598" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="1957739">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
//					if (studentFolder.getName().equals("30")) {
//						int a = 0;
//					} else {
//						latch.countDown();
//						synchronized (this) {
//							threadCount--;
//						}
//						return;
//					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									boolean webCommandAdded = false;
									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, startTimestamp)) {
										webCommandAdded = true;
										last = webCommand;
										try {
											webCommand = webCommandIterator.next();
										} catch (NoSuchElementException e) {
											webCommand = null;
										}
									} 
									if (!webCommandAdded) {
										maybeAddPauseCommand(newCommands, last, cur);
									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private boolean maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, long startTimestamp) {
		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
		if (webCommand == null || timestamp < last.getTimestamp() || timestamp > cur.getTimestamp()) {
			return false;
		}
		webCommand.setStartTimestamp(0);
		webCommand.setTimestamp(timestamp);
		maybeAddPauseCommand(newCommands, last,	webCommand);
//		newCommands.add(webCommand);
		maybeAddPauseCommand(newCommands, webCommand, cur);
		return true;
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getStartTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="79" _type="Delete" date="Mon Feb 08 15:10:32 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26090" docExpressionCount="3110" docLength="26387" endLine="91" length="211" offset="2676" startLine="82" starttimestamp="1612813070441" timestamp="1961984">
    <text><![CDATA[//					if (studentFolder.getName().equals("30")) {
//						int a = 0;
//					} else {
//						latch.countDown();
//						synchronized (this) {
//							threadCount--;
//						}
//						return;
//					}
]]></text>
  </DocumentChange>
  <DocumentChange __id="97" _type="Insert" date="Mon Feb 08 15:11:19 EST 2021" docASTNodeCount="4060" docActiveCodeLength="26091" docExpressionCount="2811" docLength="26388" length="1" offset="3833" starttimestamp="1612813070441" timestamp="2009122">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="102" _type="Delete" date="Mon Feb 08 15:11:22 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26090" docExpressionCount="3110" docLength="26387" endLine="111" length="1" offset="3833" startLine="111" starttimestamp="1612813070441" timestamp="2012477">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="126" _type="Insert" date="Mon Feb 08 15:13:45 EST 2021" docASTNodeCount="4524" docActiveCodeLength="26037" docExpressionCount="3105" docLength="26389" length="2" offset="25812" starttimestamp="1612813070441" timestamp="2154949">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="154" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4080" docActiveCodeLength="25927" docExpressionCount="2818" docLength="26391" length="2" offset="3818" starttimestamp="1612813070441" timestamp="2322611">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="156" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4080" docActiveCodeLength="25894" docExpressionCount="2818" docLength="26393" length="2" offset="3932" starttimestamp="1612813070441" timestamp="2322624">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="157" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4080" docActiveCodeLength="25866" docExpressionCount="2818" docLength="26395" length="2" offset="3969" starttimestamp="1612813070441" timestamp="2322637">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="158" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4114" docActiveCodeLength="25851" docExpressionCount="2836" docLength="26397" length="2" offset="4001" starttimestamp="1612813070441" timestamp="2322654">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="159" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4114" docActiveCodeLength="25801" docExpressionCount="2836" docLength="26399" length="2" offset="4020" starttimestamp="1612813070441" timestamp="2322667">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="160" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4114" docActiveCodeLength="25755" docExpressionCount="2836" docLength="26401" length="2" offset="4074" starttimestamp="1612813070441" timestamp="2322681">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="161" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4114" docActiveCodeLength="25726" docExpressionCount="2836" docLength="26403" length="2" offset="4124" starttimestamp="1612813070441" timestamp="2322696">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="162" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4080" docActiveCodeLength="25715" docExpressionCount="2818" docLength="26405" length="2" offset="4157" starttimestamp="1612813070441" timestamp="2322707">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="163" _type="Insert" date="Mon Feb 08 15:16:33 EST 2021" docASTNodeCount="4485" docActiveCodeLength="25704" docExpressionCount="3078" docLength="26407" length="2" offset="4172" starttimestamp="1612813070441" timestamp="2322711">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="167" _type="Insert" date="Mon Feb 08 15:16:35 EST 2021" docASTNodeCount="4485" docActiveCodeLength="25715" docExpressionCount="3078" docLength="26418" length="11" offset="4185" starttimestamp="1612813070441" timestamp="2324984">
    <text><![CDATA[
									]]></text>
  </DocumentChange>
  <DocumentChange __id="170" _type="Insert" date="Mon Feb 08 15:16:37 EST 2021" docASTNodeCount="4487" docActiveCodeLength="25716" docExpressionCount="3079" docLength="26419" length="1" offset="4196" starttimestamp="1612813070441" timestamp="2327256">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="175" _type="Insert" date="Mon Feb 08 15:16:40 EST 2021" docASTNodeCount="4485" docActiveCodeLength="25718" docExpressionCount="3078" docLength="26421" length="2" offset="4197" repeat="2" starttimestamp="1612813070441" timestamp="2330005" timestamp2="2330032">
    <text><![CDATA[or]]></text>
  </DocumentChange>
  <DocumentChange __id="177" _type="Delete" date="Mon Feb 08 15:16:41 EST 2021" docASTNodeCount="4485" docActiveCodeLength="25715" docExpressionCount="3078" docLength="26418" endLine="120" length="3" offset="4196" startLine="120" starttimestamp="1612813070441" timestamp="2330741">
    <text><![CDATA[for]]></text>
  </DocumentChange>
  <DocumentChange __id="179" _type="Insert" date="Mon Feb 08 15:16:43 EST 2021" docASTNodeCount="4485" docActiveCodeLength="25720" docExpressionCount="3078" docLength="26423" length="5" offset="4196" repeat="5" starttimestamp="1612813070441" timestamp="2332928" timestamp2="2333238">
    <text><![CDATA[while]]></text>
  </DocumentChange>
  <DocumentChange __id="186" _type="Replace" date="Mon Feb 08 15:16:44 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25817" docExpressionCount="3088" docLength="26520" endLine="120" insertionLength="102" int_docASTNodeCount="4485" int_docActiveCodeLength="25715" int_docExpressionCount="3078" int_docLength="26418" length="5" offset="4196" startLine="120" starttimestamp="1612813070441" timestamp="2334037">
    <deletedText><![CDATA[while]]></deletedText>
    <insertedText><![CDATA[while (en.hasMoreElements()) {
										type type = (type) en.nextElement();
										
									}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="188" _type="Replace" date="Mon Feb 08 15:16:47 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25816" docExpressionCount="3088" docLength="26519" endLine="120" insertionLength="1" int_docASTNodeCount="4500" int_docActiveCodeLength="25815" int_docExpressionCount="3087" int_docLength="26518" length="2" offset="4203" startLine="120" starttimestamp="1612813070441" timestamp="2336856">
    <deletedText><![CDATA[en]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <Command __id="189" _type="PauseCommand" date="Mon Feb 08 15:16:47 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2336856">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2789]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="191" _type="InsertStringCommand" date="Mon Feb 08 15:16:47 EST 2021" starttimestamp="1612813070441" timestamp="2336880" timestamp2="2336880">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="192" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:16:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2336899" />
  <Command __id="198" _type="PauseCommand" date="Mon Feb 08 15:16:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2338595">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1092]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="202" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:16:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2339302" />
  <Command __id="205" _type="InsertStringCommand" date="Mon Feb 08 15:16:49 EST 2021" starttimestamp="1612813070441" timestamp="2339332" timestamp2="2339332">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="207" _type="PauseCommand" date="Mon Feb 08 15:16:51 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2340888">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1556]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="206" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:16:51 EST 2021" starttimestamp="1612813070441" timestamp="2340888" />
  <Command __id="209" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 08 15:16:51 EST 2021" starttimestamp="1612813070441" timestamp="2341231" />
  <Command __id="211" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 08 15:16:51 EST 2021" starttimestamp="1612813070441" timestamp="2341425" />
  <Command __id="213" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 08 15:16:52 EST 2021" starttimestamp="1612813070441" timestamp="2341724" />
  <Command __id="215" _type="InsertStringCommand" date="Mon Feb 08 15:16:52 EST 2021" starttimestamp="1612813070441" timestamp="2342551" timestamp2="2342551">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="217" _type="InsertStringCommand" date="Mon Feb 08 15:16:53 EST 2021" starttimestamp="1612813070441" timestamp="2342602" timestamp2="2342602">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="218" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:16:53 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2342605" />
  <Command __id="220" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:16:53 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2342857" />
  <Command __id="222" _type="InsertStringCommand" date="Mon Feb 08 15:16:53 EST 2021" starttimestamp="1612813070441" timestamp="2342893" timestamp2="2342893">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="224" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:16:53 EST 2021" starttimestamp="1612813070441" timestamp="2343458" />
  <Command __id="226" _type="PauseCommand" date="Mon Feb 08 15:16:58 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2348377">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4919]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="225" _type="SelectTextCommand" caretOffset="2775" date="Mon Feb 08 15:16:58 EST 2021" end="2775" start="2723" starttimestamp="1612813070441" timestamp="2348377" />
  <Command __id="228" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:16:59 EST 2021" starttimestamp="1612813070441" timestamp="2349114" />
  <Command __id="230" _type="PauseCommand" date="Mon Feb 08 15:17:14 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2364096">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[14981]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="229" _type="MoveCaretCommand" caretOffset="2680" date="Mon Feb 08 15:17:14 EST 2021" docOffset="4203" starttimestamp="1612813070441" timestamp="2364095" />
  <Command __id="232" _type="PauseCommand" date="Mon Feb 08 15:17:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2366034">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1939]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="233" _type="InsertStringCommand" date="Mon Feb 08 15:17:16 EST 2021" starttimestamp="1612813070441" timestamp="2366044" timestamp2="2366044">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="235" _type="InsertStringCommand" date="Mon Feb 08 15:17:16 EST 2021" starttimestamp="1612813070441" timestamp="2366098" timestamp2="2366098">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="236" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:17:16 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2366139" />
  <Command __id="240" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:17:17 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2367036" />
  <Command __id="242" _type="InsertStringCommand" date="Mon Feb 08 15:17:17 EST 2021" starttimestamp="1612813070441" timestamp="2367051" timestamp2="2367051">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="244" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:17:18 EST 2021" starttimestamp="1612813070441" timestamp="2367614" />
  <Command __id="246" _type="InsertStringCommand" date="Mon Feb 08 15:17:18 EST 2021" starttimestamp="1612813070441" timestamp="2368340" timestamp2="2368340">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="248" _type="InsertStringCommand" date="Mon Feb 08 15:17:18 EST 2021" starttimestamp="1612813070441" timestamp="2368430" timestamp2="2368430">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="250" _type="InsertStringCommand" date="Mon Feb 08 15:17:18 EST 2021" starttimestamp="1612813070441" timestamp="2368536" timestamp2="2368536">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="251" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:17:19 EST 2021" starttimestamp="1612813070441" timestamp="2369443" />
  <Command __id="252" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:17:20 EST 2021" starttimestamp="1612813070441" timestamp="2369578" />
  <Command __id="253" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:17:20 EST 2021" starttimestamp="1612813070441" timestamp="2369703" />
  <Command __id="254" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:17:20 EST 2021" starttimestamp="1612813070441" timestamp="2369824" />
  <Command __id="256" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 08 15:17:20 EST 2021" starttimestamp="1612813070441" timestamp="2370206" />
  <Command __id="258" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 15:17:21 EST 2021" starttimestamp="1612813070441" timestamp="2371039" />
  <Command __id="260" _type="InsertStringCommand" date="Mon Feb 08 15:17:21 EST 2021" starttimestamp="1612813070441" timestamp="2371490" timestamp2="2371490">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="261" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:17:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2371531" />
  <DocumentChange __id="190" _type="Replace" date="Mon Feb 08 15:16:47 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25815" docExpressionCount="3088" docLength="26518" endLine="121" insertionLength="1" int_docASTNodeCount="4499" int_docActiveCodeLength="25814" int_docExpressionCount="3087" int_docLength="26517" length="2" offset="4256" startLine="121" starttimestamp="1612813070441" timestamp="2336871">
    <deletedText><![CDATA[en]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="193" _type="Insert" date="Mon Feb 08 15:16:47 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25816" docExpressionCount="3088" docLength="26519" length="1" offset="4204" starttimestamp="1612813070441" timestamp="2337083">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="194" _type="Insert" date="Mon Feb 08 15:16:47 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25817" docExpressionCount="3088" docLength="26520" length="1" offset="4258" starttimestamp="1612813070441" timestamp="2337100">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="195" _type="Insert" date="Mon Feb 08 15:16:47 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25818" docExpressionCount="3088" docLength="26521" length="1" offset="4205" starttimestamp="1612813070441" timestamp="2337495">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="196" _type="Insert" date="Mon Feb 08 15:16:47 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25819" docExpressionCount="3088" docLength="26522" length="1" offset="4260" starttimestamp="1612813070441" timestamp="2337503">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <DocumentChange __id="197" _type="Insert" date="Mon Feb 08 15:16:49 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25820" docExpressionCount="3088" docLength="26523" length="1" offset="4206" starttimestamp="1612813070441" timestamp="2338595">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="199" _type="Insert" date="Mon Feb 08 15:16:49 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25821" docExpressionCount="3088" docLength="26524" length="1" offset="4262" starttimestamp="1612813070441" timestamp="2338603">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="200" _type="Insert" date="Mon Feb 08 15:16:49 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25822" docExpressionCount="3088" docLength="26525" length="1" offset="4207" starttimestamp="1612813070441" timestamp="2338708">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="201" _type="Insert" date="Mon Feb 08 15:16:49 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25823" docExpressionCount="3088" docLength="26526" length="1" offset="4264" starttimestamp="1612813070441" timestamp="2338717">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="203" _type="Replace" date="Mon Feb 08 15:16:49 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25836" docExpressionCount="3088" docLength="26539" endLine="120" insertionLength="18" int_docASTNodeCount="4500" int_docActiveCodeLength="25818" int_docExpressionCount="3087" int_docLength="26521" length="5" offset="4203" startLine="120" starttimestamp="1612813070441" timestamp="2339309">
    <deletedText><![CDATA[webit]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="204" _type="Replace" date="Mon Feb 08 15:16:49 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25849" docExpressionCount="3088" docLength="26552" endLine="121" insertionLength="18" int_docASTNodeCount="4499" int_docActiveCodeLength="25831" int_docExpressionCount="3087" int_docLength="26534" length="5" offset="4273" startLine="121" starttimestamp="1612813070441" timestamp="2339325">
    <deletedText><![CDATA[webit]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="208" _type="Delete" date="Mon Feb 08 15:16:51 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25834" docExpressionCount="3088" docLength="26537" endLine="120" length="15" offset="4222" repeat="3" startLine="120" starttimestamp="1612813070441" timestamp="2341225" timestamp2="2341718">
    <text><![CDATA[hasMoreElements]]></text>
  </DocumentChange>
  <DocumentChange __id="214" _type="Insert" date="Mon Feb 08 15:16:52 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25837" docExpressionCount="3088" docLength="26540" length="3" offset="4222" repeat="3" starttimestamp="1612813070441" timestamp="2342542" timestamp2="2342701">
    <text><![CDATA[has]]></text>
  </DocumentChange>
  <DocumentChange __id="221" _type="Replace" date="Mon Feb 08 15:16:53 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25843" docExpressionCount="3088" docLength="26546" endLine="120" insertionLength="9" int_docASTNodeCount="4501" int_docActiveCodeLength="25834" int_docExpressionCount="3088" int_docLength="26537" length="3" offset="4222" startLine="120" starttimestamp="1612813070441" timestamp="2342867">
    <deletedText><![CDATA[has]]></deletedText>
    <insertedText><![CDATA[hasNext()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="223" _type="Delete" date="Mon Feb 08 15:16:53 EST 2021" docASTNodeCount="4501" docActiveCodeLength="25841" docExpressionCount="3088" docLength="26544" endLine="120" length="2" offset="4229" startLine="120" starttimestamp="1612813070441" timestamp="2343452">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="227" _type="Delete" date="Mon Feb 08 15:16:59 EST 2021" docASTNodeCount="4490" docActiveCodeLength="25789" docExpressionCount="3081" docLength="26492" endLine="121" length="52" offset="4246" startLine="121" starttimestamp="1612813070441" timestamp="2349110">
    <text><![CDATA[type type = (type) webCommandIterator.nextElement();]]></text>
  </DocumentChange>
  <DocumentChange __id="231" _type="Insert" date="Mon Feb 08 15:17:16 EST 2021" docASTNodeCount="4490" docActiveCodeLength="25794" docExpressionCount="3081" docLength="26497" length="5" offset="4203" repeat="5" starttimestamp="1612813070441" timestamp="2366034" timestamp2="2366668">
    <text><![CDATA[webco]]></text>
  </DocumentChange>
  <DocumentChange __id="241" _type="Replace" date="Mon Feb 08 15:17:17 EST 2021" docASTNodeCount="4490" docActiveCodeLength="25804" docExpressionCount="3081" docLength="26507" endLine="120" insertionLength="15" int_docASTNodeCount="4490" int_docActiveCodeLength="25789" int_docExpressionCount="3081" int_docLength="26492" length="5" offset="4203" startLine="120" starttimestamp="1612813070441" timestamp="2367042">
    <deletedText><![CDATA[webco]]></deletedText>
    <insertedText><![CDATA[webCommandAdded]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="243" _type="Delete" date="Mon Feb 08 15:17:18 EST 2021" docASTNodeCount="4490" docActiveCodeLength="25799" docExpressionCount="3081" docLength="26502" endLine="120" length="5" offset="4213" startLine="120" starttimestamp="1612813070441" timestamp="2367602">
    <text><![CDATA[Added]]></text>
  </DocumentChange>
  <DocumentChange __id="245" _type="Insert" date="Mon Feb 08 15:17:18 EST 2021" docASTNodeCount="4492" docActiveCodeLength="25802" docExpressionCount="3083" docLength="26505" length="3" offset="4213" repeat="3" starttimestamp="1612813070441" timestamp="2368333" timestamp2="2368530">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="255" _type="Delete" date="Mon Feb 08 15:17:20 EST 2021" docASTNodeCount="4492" docActiveCodeLength="25798" docExpressionCount="3083" docLength="26501" endLine="120" length="4" offset="4235" repeat="2" startLine="120" starttimestamp="1612813070441" timestamp="2370202" timestamp2="2371034">
    <text><![CDATA[hasN]]></text>
  </DocumentChange>
  <DocumentChange __id="259" _type="Insert" date="Mon Feb 08 15:17:21 EST 2021" docASTNodeCount="4492" docActiveCodeLength="25799" docExpressionCount="3083" docLength="26502" length="1" offset="4235" starttimestamp="1612813070441" timestamp="2371483">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="262" _type="Delete" date="Mon Feb 08 15:17:22 EST 2021" docASTNodeCount="4492" docActiveCodeLength="25798" docExpressionCount="3083" docLength="26501" endLine="120" length="1" offset="4235" startLine="120" starttimestamp="1612813070441" timestamp="2372244">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="263" _type="Insert" date="Mon Feb 08 15:17:22 EST 2021" docASTNodeCount="4492" docActiveCodeLength="25799" docExpressionCount="3083" docLength="26502" length="1" offset="4235" starttimestamp="1612813070441" timestamp="2372376">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="265" _type="PauseCommand" date="Mon Feb 08 15:17:24 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2373914">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1538]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="264" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:17:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2373914" />
  <Command __id="266" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:24 EST 2021" starttimestamp="1612813070441" timestamp="2374323" />
  <Command __id="267" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:24 EST 2021" starttimestamp="1612813070441" timestamp="2374481" />
  <Command __id="268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:25 EST 2021" starttimestamp="1612813070441" timestamp="2374593" />
  <Command __id="269" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:25 EST 2021" starttimestamp="1612813070441" timestamp="2374728" />
  <DocumentChange __id="270" _type="Insert" date="Mon Feb 08 15:17:26 EST 2021" docASTNodeCount="4492" docActiveCodeLength="25800" docExpressionCount="3083" docLength="26503" length="1" offset="4240" starttimestamp="1612813070441" timestamp="2375615">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="271" _type="InsertStringCommand" date="Mon Feb 08 15:17:26 EST 2021" starttimestamp="1612813070441" timestamp="2375628" timestamp2="2375628">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="272" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" date="Mon Feb 08 15:17:26 EST 2021" starttimestamp="1612813070441" timestamp="2376147" />
  <Command __id="273" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:26 EST 2021" starttimestamp="1612813070441" timestamp="2376542" />
  <Command __id="274" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:17:27 EST 2021" starttimestamp="1612813070441" timestamp="2376697" />
  <Command __id="275" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:17:27 EST 2021" starttimestamp="1612813070441" timestamp="2376839" />
  <Command __id="277" _type="InsertStringCommand" date="Mon Feb 08 15:17:28 EST 2021" starttimestamp="1612813070441" timestamp="2377645" timestamp2="2377645">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="278" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:17:28 EST 2021" starttimestamp="1612813070441" timestamp="2378086" />
  <Command __id="279" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:17:28 EST 2021" starttimestamp="1612813070441" timestamp="2378340" />
  <Command __id="280" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:17:28 EST 2021" starttimestamp="1612813070441" timestamp="2378486" />
  <Command __id="281" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:17:29 EST 2021" starttimestamp="1612813070441" timestamp="2378617" />
  <Command __id="283" _type="PauseCommand" date="Mon Feb 08 15:17:30 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2379673">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1056]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="284" _type="InsertStringCommand" date="Mon Feb 08 15:17:30 EST 2021" starttimestamp="1612813070441" timestamp="2379681" timestamp2="2379681">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="285" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:17:30 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2379720" />
  <Command __id="287" _type="PauseCommand" date="Mon Feb 08 15:17:34 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2384163">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4443]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="291" _type="PauseCommand" date="Mon Feb 08 15:17:41 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2390857">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6341]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="296" _type="PauseCommand" date="Mon Feb 08 15:17:43 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2392611">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1437]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="295" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:17:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2392611" />
  <Command __id="298" _type="InsertStringCommand" date="Mon Feb 08 15:17:43 EST 2021" starttimestamp="1612813070441" timestamp="2392625" timestamp2="2392625">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="300" _type="PauseCommand" date="Mon Feb 08 15:17:50 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2400048">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[7423]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="299" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" date="Mon Feb 08 15:17:50 EST 2021" starttimestamp="1612813070441" timestamp="2400048" />
  <Command __id="301" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:50 EST 2021" starttimestamp="1612813070441" timestamp="2400501" />
  <Command __id="302" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:51 EST 2021" starttimestamp="1612813070441" timestamp="2400652" />
  <Command __id="303" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:51 EST 2021" starttimestamp="1612813070441" timestamp="2400747" />
  <Command __id="304" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:51 EST 2021" starttimestamp="1612813070441" timestamp="2400987" />
  <Command __id="305" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:51 EST 2021" starttimestamp="1612813070441" timestamp="2401125" />
  <Command __id="306" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:51 EST 2021" starttimestamp="1612813070441" timestamp="2401237" />
  <Command __id="307" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:17:51 EST 2021" starttimestamp="1612813070441" timestamp="2401525" />
  <Command __id="309" _type="InsertStringCommand" date="Mon Feb 08 15:17:52 EST 2021" starttimestamp="1612813070441" timestamp="2401932" timestamp2="2401932">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="311" _type="InsertStringCommand" date="Mon Feb 08 15:17:52 EST 2021" starttimestamp="1612813070441" timestamp="2401958" timestamp2="2401958">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="312" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:17:52 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2401995" />
  <Command __id="316" _type="PauseCommand" date="Mon Feb 08 15:17:54 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2404115">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1115]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="319" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:17:55 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2405548" />
  <Command __id="321" _type="InsertStringCommand" date="Mon Feb 08 15:17:56 EST 2021" starttimestamp="1612813070441" timestamp="2405568" timestamp2="2405568">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="323" _type="InsertStringCommand" date="Mon Feb 08 15:17:56 EST 2021" starttimestamp="1612813070441" timestamp="2405783" timestamp2="2405783">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="324" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:17:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2405818" />
  <Command __id="328" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:17:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2406510" />
  <Command __id="330" _type="InsertStringCommand" date="Mon Feb 08 15:17:56 EST 2021" starttimestamp="1612813070441" timestamp="2406529" timestamp2="2406529">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="332" _type="InsertStringCommand" date="Mon Feb 08 15:17:57 EST 2021" starttimestamp="1612813070441" timestamp="2406817" timestamp2="2406817">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="334" _type="InsertStringCommand" date="Mon Feb 08 15:17:57 EST 2021" starttimestamp="1612813070441" timestamp="2407486" timestamp2="2407486">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="336" _type="InsertStringCommand" date="Mon Feb 08 15:17:58 EST 2021" starttimestamp="1612813070441" timestamp="2407592" timestamp2="2407592">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="338" _type="InsertStringCommand" date="Mon Feb 08 15:17:58 EST 2021" starttimestamp="1612813070441" timestamp="2407713" timestamp2="2407713">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="339" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:17:58 EST 2021" starttimestamp="1612813070441" timestamp="2408331" />
  <Command __id="340" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:17:59 EST 2021" starttimestamp="1612813070441" timestamp="2408854" />
  <Command __id="341" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:17:59 EST 2021" starttimestamp="1612813070441" timestamp="2409004" />
  <Command __id="342" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:17:59 EST 2021" starttimestamp="1612813070441" timestamp="2409232" />
  <Command __id="344" _type="PauseCommand" date="Mon Feb 08 15:18:01 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2411517">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2285]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="345" _type="InsertStringCommand" date="Mon Feb 08 15:18:01 EST 2021" starttimestamp="1612813070441" timestamp="2411525" timestamp2="2411525">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="347" _type="InsertStringCommand" date="Mon Feb 08 15:18:02 EST 2021" starttimestamp="1612813070441" timestamp="2411743" timestamp2="2411743">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="349" _type="InsertStringCommand" date="Mon Feb 08 15:18:02 EST 2021" starttimestamp="1612813070441" timestamp="2411862" timestamp2="2411862">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="351" _type="PauseCommand" date="Mon Feb 08 15:18:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2413447">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1585]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="350" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:18:03 EST 2021" starttimestamp="1612813070441" timestamp="2413447" />
  <Command __id="352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:18:04 EST 2021" starttimestamp="1612813070441" timestamp="2413608" />
  <Command __id="353" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:18:04 EST 2021" starttimestamp="1612813070441" timestamp="2413896" />
  <Command __id="354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:18:04 EST 2021" starttimestamp="1612813070441" timestamp="2414071" />
  <Command __id="356" _type="PauseCommand" date="Mon Feb 08 15:18:26 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="2436118">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[22047]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="355" _type="SelectTextCommand" caretOffset="1972" date="Mon Feb 08 15:18:26 EST 2021" end="1972" start="1959" starttimestamp="1612813070441" timestamp="2436118" />
  <Command __id="357" _type="MoveCaretCommand" caretOffset="1976" date="Mon Feb 08 15:18:26 EST 2021" docOffset="3499" starttimestamp="1612813070441" timestamp="2436473" />
  <Command __id="359" _type="PauseCommand" date="Mon Feb 08 15:18:29 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2439131">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2658]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="358" _type="MoveCaretCommand" caretOffset="1996" date="Mon Feb 08 15:18:29 EST 2021" docOffset="3519" starttimestamp="1612813070441" timestamp="2439131" />
  <Command __id="361" _type="PauseCommand" date="Mon Feb 08 15:18:36 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2446281">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7150]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="360" _type="SelectTextCommand" caretOffset="5848" date="Mon Feb 08 15:18:36 EST 2021" end="5848" start="5820" starttimestamp="1612813070441" timestamp="2446281" />
  <Command __id="363" _type="PauseCommand" date="Mon Feb 08 15:18:43 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2453255">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6974]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="362" _type="SelectTextCommand" caretOffset="6159" date="Mon Feb 08 15:18:43 EST 2021" end="6261" start="6159" starttimestamp="1612813070441" timestamp="2453255" />
  <Command __id="364" _type="MoveCaretCommand" caretOffset="6261" date="Mon Feb 08 15:18:44 EST 2021" docOffset="26523" starttimestamp="1612813070441" timestamp="2453779" />
  <Command __id="366" _type="PauseCommand" date="Mon Feb 08 15:18:56 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2466103">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[12324]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="365" _type="MoveCaretCommand" caretOffset="6288" date="Mon Feb 08 15:18:56 EST 2021" docOffset="26550" starttimestamp="1612813070441" timestamp="2466103" />
  <Command __id="368" _type="PauseCommand" date="Mon Feb 08 15:19:00 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2470140">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4037]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="367" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:19:00 EST 2021" starttimestamp="1612813070441" timestamp="2470140" />
  <Command __id="370" _type="PauseCommand" date="Mon Feb 08 15:19:05 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2474698">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4558]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="369" _type="MoveCaretCommand" caretOffset="2662" date="Mon Feb 08 15:19:05 EST 2021" docOffset="4185" starttimestamp="1612813070441" timestamp="2474698" />
  <Command __id="372" _type="PauseCommand" date="Mon Feb 08 15:19:12 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2482394">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7696]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="371" _type="SelectTextCommand" caretOffset="2814" date="Mon Feb 08 15:19:12 EST 2021" end="2814" start="2673" starttimestamp="1612813070441" timestamp="2482394" />
  <Command __id="374" _type="PauseCommand" date="Mon Feb 08 15:19:14 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2484150">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1756]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="375" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:19:14 EST 2021" starttimestamp="1612813070441" timestamp="2484159" />
  <Command __id="377" _type="PauseCommand" date="Mon Feb 08 15:19:42 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="2512463">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[28304]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="376" _type="SelectTextCommand" caretOffset="2306" date="Mon Feb 08 15:19:42 EST 2021" end="2662" start="2306" starttimestamp="1612813070441" timestamp="2512463" />
  <Command __id="387" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:19:43 EST 2021" starttimestamp="1612813070441" timestamp="2513317" />
  <Command __id="389" _type="PauseCommand" date="Mon Feb 08 15:19:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2514464">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1147]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="388" _type="MoveCaretCommand" caretOffset="2644" date="Mon Feb 08 15:19:44 EST 2021" docOffset="4167" starttimestamp="1612813070441" timestamp="2514464" />
  <Command __id="391" _type="PauseCommand" date="Mon Feb 08 15:20:02 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2531941">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[17477]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="390" _type="SelectTextCommand" caretOffset="5084" date="Mon Feb 08 15:20:02 EST 2021" end="5084" start="5066" starttimestamp="1612813070441" timestamp="2531941" />
  <Command __id="393" _type="PauseCommand" date="Mon Feb 08 15:20:11 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2541017">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9076]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="392" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:20:11 EST 2021" starttimestamp="1612813070441" timestamp="2541017" />
  <Command __id="395" _type="PauseCommand" date="Mon Feb 08 15:20:20 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2550056">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9039]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="394" _type="SelectTextCommand" caretOffset="2332" date="Mon Feb 08 15:20:20 EST 2021" end="2332" start="2310" starttimestamp="1612813070441" timestamp="2550056" />
  <Command __id="397" _type="PauseCommand" date="Mon Feb 08 15:20:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2551700">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1644]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="396" _type="MoveCaretCommand" caretOffset="2332" date="Mon Feb 08 15:20:22 EST 2021" docOffset="3855" starttimestamp="1612813070441" timestamp="2551700" />
  <Command __id="398" _type="MoveCaretCommand" caretOffset="2332" date="Mon Feb 08 15:20:22 EST 2021" docOffset="3855" starttimestamp="1612813070441" timestamp="2551928" />
  <Command __id="400" _type="PauseCommand" date="Mon Feb 08 15:20:26 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2555692">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3764]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="399" _type="MoveCaretCommand" caretOffset="2380" date="Mon Feb 08 15:20:26 EST 2021" docOffset="3903" starttimestamp="1612813070441" timestamp="2555692" />
  <Command __id="401" _type="SelectTextCommand" caretOffset="2385" date="Mon Feb 08 15:20:26 EST 2021" end="2385" start="2375" starttimestamp="1612813070441" timestamp="2555855" />
  <DocumentChange __id="276" _type="Insert" date="Mon Feb 08 15:17:28 EST 2021" docASTNodeCount="4493" docActiveCodeLength="25801" docExpressionCount="3084" docLength="26504" length="1" offset="4203" starttimestamp="1612813070441" timestamp="2377633">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="282" _type="Insert" date="Mon Feb 08 15:17:30 EST 2021" docASTNodeCount="4495" docActiveCodeLength="25802" docExpressionCount="3086" docLength="26505" length="1" offset="4243" starttimestamp="1612813070441" timestamp="2379673">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="286" _type="Insert" date="Mon Feb 08 15:17:34 EST 2021" docASTNodeCount="4495" docActiveCodeLength="25805" docExpressionCount="3086" docLength="26508" length="3" offset="4244" repeat="3" starttimestamp="1612813070441" timestamp="2384163" timestamp2="2384516">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="290" _type="Insert" date="Mon Feb 08 15:17:41 EST 2021" docASTNodeCount="4495" docActiveCodeLength="25809" docExpressionCount="3086" docLength="26512" length="4" offset="4247" repeat="4" starttimestamp="1612813070441" timestamp="2390857" timestamp2="2391174">
    <text><![CDATA[star]]></text>
  </DocumentChange>
  <DocumentChange __id="297" _type="Replace" date="Mon Feb 08 15:17:43 EST 2021" docASTNodeCount="4495" docActiveCodeLength="25821" docExpressionCount="3086" docLength="26524" endLine="120" insertionLength="19" int_docASTNodeCount="4495" int_docActiveCodeLength="25802" int_docExpressionCount="3086" int_docLength="26505" length="7" offset="4244" startLine="120" starttimestamp="1612813070441" timestamp="2392618">
    <deletedText><![CDATA[getstar]]></deletedText>
    <insertedText><![CDATA[getStartTimestamp()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="308" _type="Insert" date="Mon Feb 08 15:17:52 EST 2021" docASTNodeCount="4496" docActiveCodeLength="25825" docExpressionCount="3087" docLength="26528" length="4" offset="4203" repeat="4" starttimestamp="1612813070441" timestamp="2401922" timestamp2="2403000">
    <text><![CDATA[wein]]></text>
  </DocumentChange>
  <DocumentChange __id="315" _type="Delete" date="Mon Feb 08 15:17:54 EST 2021" docASTNodeCount="4496" docActiveCodeLength="25824" docExpressionCount="3087" docLength="26527" endLine="120" length="1" offset="4206" startLine="120" starttimestamp="1612813070441" timestamp="2404115">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="317" _type="Insert" date="Mon Feb 08 15:17:55 EST 2021" docASTNodeCount="4496" docActiveCodeLength="25826" docExpressionCount="3087" docLength="26529" length="2" offset="4206" repeat="2" starttimestamp="1612813070441" timestamp="2404627" timestamp2="2404697">
    <text><![CDATA[te]]></text>
  </DocumentChange>
  <DocumentChange __id="320" _type="Replace" date="Mon Feb 08 15:17:55 EST 2021" docASTNodeCount="4496" docActiveCodeLength="25839" docExpressionCount="3087" docLength="26542" endLine="120" insertionLength="18" int_docASTNodeCount="4495" int_docActiveCodeLength="25821" int_docExpressionCount="3086" int_docLength="26524" length="5" offset="4203" startLine="120" starttimestamp="1612813070441" timestamp="2405554">
    <deletedText><![CDATA[weite]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="322" _type="Insert" date="Mon Feb 08 15:17:56 EST 2021" docASTNodeCount="4497" docActiveCodeLength="25843" docExpressionCount="3088" docLength="26546" length="4" offset="4221" repeat="4" starttimestamp="1612813070441" timestamp="2405772" timestamp2="2406356">
    <text><![CDATA[.has]]></text>
  </DocumentChange>
  <DocumentChange __id="329" _type="Replace" date="Mon Feb 08 15:17:56 EST 2021" docASTNodeCount="4499" docActiveCodeLength="25849" docExpressionCount="3090" docLength="26552" endLine="120" insertionLength="9" int_docASTNodeCount="4497" int_docActiveCodeLength="25840" int_docExpressionCount="3088" int_docLength="26543" length="3" offset="4222" startLine="120" starttimestamp="1612813070441" timestamp="2406518">
    <deletedText><![CDATA[has]]></deletedText>
    <insertedText><![CDATA[hasNext()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="331" _type="Insert" date="Mon Feb 08 15:17:57 EST 2021" docASTNodeCount="4499" docActiveCodeLength="25853" docExpressionCount="3090" docLength="26556" length="4" offset="4231" repeat="4" starttimestamp="1612813070441" timestamp="2406797" timestamp2="2407703">
    <text><![CDATA[ && ]]></text>
  </DocumentChange>
  <DocumentChange __id="343" _type="Insert" date="Mon Feb 08 15:18:01 EST 2021" docASTNodeCount="4499" docActiveCodeLength="25856" docExpressionCount="3090" docLength="26559" length="3" offset="4295" repeat="3" starttimestamp="1612813070441" timestamp="2411517" timestamp2="2411855">
    <text><![CDATA[ - ]]></text>
  </DocumentChange>
  <DocumentChange __id="373" _type="Delete" date="Mon Feb 08 15:19:14 EST 2021" docASTNodeCount="4485" docActiveCodeLength="25704" docExpressionCount="3078" docLength="26407" endLine="124" length="152" offset="4187" startLine="120" starttimestamp="1612813070441" timestamp="2484150">
    <text><![CDATA[									while (webCommandIterator.hasNext() && (webCommand = webCommandIterator.next()).getStartTimestamp() - ) {
										
										
									}
]]></text>
  </DocumentChange>
  <DocumentChange __id="378" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="25814" docExpressionCount="2806" docLength="26405" endLine="111" length="2" offset="3818" startLine="111" starttimestamp="1612813070441" timestamp="2513230">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="379" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="25847" docExpressionCount="2806" docLength="26403" endLine="112" length="2" offset="3930" startLine="112" starttimestamp="1612813070441" timestamp="2513235">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="380" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="25875" docExpressionCount="2806" docLength="26401" endLine="113" length="2" offset="3965" startLine="113" starttimestamp="1612813070441" timestamp="2513239">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="381" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="25890" docExpressionCount="2806" docLength="26399" endLine="114" length="2" offset="3995" startLine="114" starttimestamp="1612813070441" timestamp="2513249">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="382" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="25940" docExpressionCount="2806" docLength="26397" endLine="115" length="2" offset="4012" startLine="115" starttimestamp="1612813070441" timestamp="2513255">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="383" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="25986" docExpressionCount="2806" docLength="26395" endLine="116" length="2" offset="4064" startLine="116" starttimestamp="1612813070441" timestamp="2513261">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="384" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="26015" docExpressionCount="2806" docLength="26393" endLine="117" length="2" offset="4112" startLine="117" starttimestamp="1612813070441" timestamp="2513267">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="385" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4054" docActiveCodeLength="26026" docExpressionCount="2806" docLength="26391" endLine="118" length="2" offset="4143" startLine="118" starttimestamp="1612813070441" timestamp="2513274">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="386" _type="Delete" date="Mon Feb 08 15:19:43 EST 2021" docASTNodeCount="4524" docActiveCodeLength="26037" docExpressionCount="3105" docLength="26389" endLine="119" length="2" offset="4156" startLine="119" starttimestamp="1612813070441" timestamp="2513278">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="405" _type="Insert" date="Mon Feb 08 15:20:31 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26053" docExpressionCount="3106" docLength="26405" length="16" offset="3816" repeat="6" starttimestamp="1612813070441" timestamp="2561064" timestamp2="2562584">
    <text><![CDATA[
									webit]]></text>
  </DocumentChange>
  <Command __id="403" _type="PauseCommand" date="Mon Feb 08 15:20:30 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2559952">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4097]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="402" _type="MoveCaretCommand" caretOffset="2250" date="Mon Feb 08 15:20:30 EST 2021" docOffset="3773" starttimestamp="1612813070441" timestamp="2559952" />
  <Command __id="404" _type="MoveCaretCommand" caretOffset="2293" date="Mon Feb 08 15:20:30 EST 2021" docOffset="3816" starttimestamp="1612813070441" timestamp="2560443" />
  <Command __id="406" _type="InsertStringCommand" date="Mon Feb 08 15:20:31 EST 2021" starttimestamp="1612813070441" timestamp="2561077" timestamp2="2561077">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="408" _type="InsertStringCommand" date="Mon Feb 08 15:20:32 EST 2021" starttimestamp="1612813070441" timestamp="2562048" timestamp2="2562048">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="410" _type="InsertStringCommand" date="Mon Feb 08 15:20:32 EST 2021" starttimestamp="1612813070441" timestamp="2562075" timestamp2="2562075">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="411" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:32 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2562116" />
  <Command __id="415" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:33 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2563016" />
  <Command __id="417" _type="InsertStringCommand" date="Mon Feb 08 15:20:33 EST 2021" starttimestamp="1612813070441" timestamp="2563032" timestamp2="2563032">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="419" _type="InsertStringCommand" date="Mon Feb 08 15:20:33 EST 2021" starttimestamp="1612813070441" timestamp="2563218" timestamp2="2563218">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="420" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:33 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2563261" />
  <Command __id="423" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:34 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2563983" />
  <Command __id="425" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:20:34 EST 2021" starttimestamp="1612813070441" timestamp="2564472" />
  <Command __id="427" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:20:35 EST 2021" starttimestamp="1612813070441" timestamp="2564591" />
  <Command __id="429" _type="InsertStringCommand" date="Mon Feb 08 15:20:35 EST 2021" starttimestamp="1612813070441" timestamp="2565081" timestamp2="2565081">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="430" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:35 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2565123" />
  <Command __id="437" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:36 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2566456" />
  <Command __id="439" _type="InsertStringCommand" date="Mon Feb 08 15:20:36 EST 2021" starttimestamp="1612813070441" timestamp="2566470" timestamp2="2566470">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="440" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:36 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2566521" />
  <Command __id="442" _type="PauseCommand" date="Mon Feb 08 15:20:40 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2570402">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3881]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="443" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:40 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2570433" />
  <Command __id="445" _type="InsertStringCommand" date="Mon Feb 08 15:20:41 EST 2021" starttimestamp="1612813070441" timestamp="2570622" timestamp2="2570622">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="446" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:41 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2570661" />
  <Command __id="447" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:41 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2570679" />
  <Command __id="449" _type="InsertStringCommand" date="Mon Feb 08 15:20:41 EST 2021" starttimestamp="1612813070441" timestamp="2570765" timestamp2="2570765">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="450" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:41 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2570857" />
  <Command __id="451" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:41 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2570874" />
  <Command __id="453" _type="InsertStringCommand" date="Mon Feb 08 15:20:41 EST 2021" starttimestamp="1612813070441" timestamp="2571073" timestamp2="2571073">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="454" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:41 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2571165" />
  <Command __id="455" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:41 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2571182" />
  <Command __id="457" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:20:41 EST 2021" starttimestamp="1612813070441" timestamp="2571511" />
  <Command __id="459" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:20:42 EST 2021" starttimestamp="1612813070441" timestamp="2571642" />
  <Command __id="461" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:20:42 EST 2021" starttimestamp="1612813070441" timestamp="2571765" />
  <Command __id="463" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:20:42 EST 2021" starttimestamp="1612813070441" timestamp="2571887" />
  <Command __id="465" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:20:42 EST 2021" starttimestamp="1612813070441" timestamp="2572088" />
  <Command __id="467" _type="InsertStringCommand" date="Mon Feb 08 15:20:43 EST 2021" starttimestamp="1612813070441" timestamp="2572856" timestamp2="2572856">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="468" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2572948" />
  <Command __id="470" _type="PauseCommand" date="Mon Feb 08 15:20:51 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2581435">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8487]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="471" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:20:51 EST 2021" starttimestamp="1612813070441" timestamp="2581442" />
  <Command __id="472" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:20:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2582165" />
  <Command __id="473" _type="MoveCaretCommand" caretOffset="2250" date="Mon Feb 08 15:20:52 EST 2021" docOffset="3773" starttimestamp="1612813070441" timestamp="2582253" />
  <Command __id="475" _type="PauseCommand" date="Mon Feb 08 15:20:53 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2583467">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1214]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="474" _type="MoveCaretCommand" caretOffset="2387" date="Mon Feb 08 15:20:53 EST 2021" docOffset="3910" starttimestamp="1612813070441" timestamp="2583467" />
  <Command __id="477" _type="PauseCommand" date="Mon Feb 08 15:20:57 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2587189">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3722]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="476" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:20:57 EST 2021" starttimestamp="1612813070441" timestamp="2587189" />
  <Command __id="478" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:20:58 EST 2021" starttimestamp="1612813070441" timestamp="2587680" />
  <Command __id="479" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:20:58 EST 2021" starttimestamp="1612813070441" timestamp="2588023" />
  <Command __id="480" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:20:58 EST 2021" starttimestamp="1612813070441" timestamp="2588213" />
  <Command __id="482" _type="PauseCommand" date="Mon Feb 08 15:20:59 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2589329">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1116]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="483" _type="InsertStringCommand" date="Mon Feb 08 15:20:59 EST 2021" starttimestamp="1612813070441" timestamp="2589337" timestamp2="2589337">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="485" _type="InsertStringCommand" date="Mon Feb 08 15:20:59 EST 2021" starttimestamp="1612813070441" timestamp="2589375" timestamp2="2589375">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="486" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:20:59 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2589412" />
  <Command __id="492" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:01 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2590580" />
  <Command __id="494" _type="InsertStringCommand" date="Mon Feb 08 15:21:01 EST 2021" starttimestamp="1612813070441" timestamp="2590593" timestamp2="2590593">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="496" _type="InsertStringCommand" date="Mon Feb 08 15:21:01 EST 2021" starttimestamp="1612813070441" timestamp="2590811" timestamp2="2590811">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="498" _type="InsertStringCommand" date="Mon Feb 08 15:21:01 EST 2021" starttimestamp="1612813070441" timestamp="2590913" timestamp2="2590913">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="500" _type="PauseCommand" date="Mon Feb 08 15:21:10 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2599811">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[8898]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="499" _type="MoveCaretCommand" caretOffset="5190" date="Mon Feb 08 15:21:10 EST 2021" docOffset="25452" starttimestamp="1612813070441" timestamp="2599811" />
  <Command __id="502" _type="InsertStringCommand" date="Mon Feb 08 15:21:10 EST 2021" starttimestamp="1612813070441" timestamp="2600178" timestamp2="2600178">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="504" _type="InsertStringCommand" date="Mon Feb 08 15:21:11 EST 2021" starttimestamp="1612813070441" timestamp="2600637" timestamp2="2600637">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="505" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2600674" />
  <Command __id="508" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2601560" />
  <Command __id="510" _type="InsertStringCommand" date="Mon Feb 08 15:21:12 EST 2021" starttimestamp="1612813070441" timestamp="2601613" timestamp2="2601613">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="512" _type="InsertStringCommand" date="Mon Feb 08 15:21:12 EST 2021" starttimestamp="1612813070441" timestamp="2602274" timestamp2="2602274">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="514" _type="InsertStringCommand" date="Mon Feb 08 15:21:12 EST 2021" starttimestamp="1612813070441" timestamp="2602319" timestamp2="2602319">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="516" _type="InsertStringCommand" date="Mon Feb 08 15:21:12 EST 2021" starttimestamp="1612813070441" timestamp="2602350" timestamp2="2602350">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="517" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:12 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2602388" />
  <Command __id="518" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2602519" />
  <Command __id="520" _type="InsertStringCommand" date="Mon Feb 08 15:21:12 EST 2021" starttimestamp="1612813070441" timestamp="2602536" timestamp2="2602536">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="521" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:21:13 EST 2021" starttimestamp="1612813070441" timestamp="2602925" />
  <Command __id="523" _type="InsertStringCommand" date="Mon Feb 08 15:21:13 EST 2021" starttimestamp="1612813070441" timestamp="2603395" timestamp2="2603395">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="525" _type="InsertStringCommand" date="Mon Feb 08 15:21:13 EST 2021" starttimestamp="1612813070441" timestamp="2603421" timestamp2="2603421">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="526" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2603459" />
  <Command __id="529" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2603926" />
  <Command __id="531" _type="InsertStringCommand" date="Mon Feb 08 15:21:14 EST 2021" starttimestamp="1612813070441" timestamp="2603944" timestamp2="2603944">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="533" _type="InsertStringCommand" date="Mon Feb 08 15:21:14 EST 2021" starttimestamp="1612813070441" timestamp="2604001" timestamp2="2604001">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="535" _type="InsertStringCommand" date="Mon Feb 08 15:21:14 EST 2021" starttimestamp="1612813070441" timestamp="2604023" timestamp2="2604023">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="536" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:14 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2604060" />
  <Command __id="537" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2604085" />
  <Command __id="539" _type="InsertStringCommand" date="Mon Feb 08 15:21:14 EST 2021" starttimestamp="1612813070441" timestamp="2604239" timestamp2="2604239">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="416" _type="Replace" date="Mon Feb 08 15:20:33 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26066" docExpressionCount="3106" docLength="26418" endLine="111" insertionLength="18" int_docASTNodeCount="4524" int_docActiveCodeLength="26048" int_docExpressionCount="3105" int_docLength="26400" length="5" offset="3827" startLine="111" starttimestamp="1612813070441" timestamp="2563023">
    <deletedText><![CDATA[webit]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="418" _type="Insert" date="Mon Feb 08 15:20:33 EST 2021" docASTNodeCount="4528" docActiveCodeLength="26069" docExpressionCount="3108" docLength="26421" length="3" offset="3845" repeat="3" starttimestamp="1612813070441" timestamp="2563213" timestamp2="2563971">
    <text><![CDATA[.cu]]></text>
  </DocumentChange>
  <DocumentChange __id="424" _type="Delete" date="Mon Feb 08 15:20:34 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26067" docExpressionCount="3106" docLength="26419" endLine="111" length="2" offset="3846" repeat="2" startLine="111" starttimestamp="1612813070441" timestamp="2564468" timestamp2="2564588">
    <text><![CDATA[cu]]></text>
  </DocumentChange>
  <DocumentChange __id="428" _type="Insert" date="Mon Feb 08 15:20:35 EST 2021" docASTNodeCount="4528" docActiveCodeLength="26070" docExpressionCount="3108" docLength="26422" length="3" offset="3846" repeat="3" starttimestamp="1612813070441" timestamp="2565076" timestamp2="2565380">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="433" _type="Delete" date="Mon Feb 08 15:20:36 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26066" docExpressionCount="3106" docLength="26418" endLine="111" length="4" offset="3845" repeat="4" startLine="111" starttimestamp="1612813070441" timestamp="2565841" timestamp2="2566194">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="438" _type="Replace" date="Mon Feb 08 15:20:36 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26067" docExpressionCount="3106" docLength="26419" endLine="111" insertionLength="19" int_docASTNodeCount="4524" int_docActiveCodeLength="26048" int_docExpressionCount="3105" int_docLength="26400" length="18" offset="3827" startLine="111" starttimestamp="1612813070441" timestamp="2566463">
    <deletedText><![CDATA[webCommandIterator]]></deletedText>
    <insertedText><![CDATA[webCommandIterator.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="441" _type="Insert" date="Mon Feb 08 15:20:40 EST 2021" docASTNodeCount="4528" docActiveCodeLength="26071" docExpressionCount="3108" docLength="26423" length="4" offset="3846" repeat="4" starttimestamp="1612813070441" timestamp="2570402" timestamp2="2571067">
    <text><![CDATA[peek]]></text>
  </DocumentChange>
  <DocumentChange __id="456" _type="Delete" date="Mon Feb 08 15:20:41 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26066" docExpressionCount="3106" docLength="26418" endLine="111" length="5" offset="3845" repeat="5" startLine="111" starttimestamp="1612813070441" timestamp="2571507" timestamp2="2572085">
    <text><![CDATA[.peek]]></text>
  </DocumentChange>
  <DocumentChange __id="466" _type="Insert" date="Mon Feb 08 15:20:43 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26067" docExpressionCount="3106" docLength="26419" length="1" offset="3845" starttimestamp="1612813070441" timestamp="2572850">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="469" _type="Delete" date="Mon Feb 08 15:20:51 EST 2021" docASTNodeCount="4524" docActiveCodeLength="26037" docExpressionCount="3105" docLength="26389" endLine="112" length="30" offset="3818" startLine="111" starttimestamp="1612813070441" timestamp="2581435">
    <text><![CDATA[									webCommandIterator.
]]></text>
  </DocumentChange>
  <DocumentChange __id="481" _type="Insert" date="Mon Feb 08 15:20:59 EST 2021" docASTNodeCount="4524" docActiveCodeLength="26044" docExpressionCount="3105" docLength="26396" length="7" offset="3910" repeat="7" starttimestamp="1612813070441" timestamp="2589329" timestamp2="2590289">
    <text><![CDATA[webcite]]></text>
  </DocumentChange>
  <DocumentChange __id="493" _type="Replace" date="Mon Feb 08 15:21:01 EST 2021" docASTNodeCount="4524" docActiveCodeLength="26055" docExpressionCount="3105" docLength="26407" endLine="111" insertionLength="18" int_docASTNodeCount="4524" int_docActiveCodeLength="26037" int_docExpressionCount="3105" int_docLength="26389" length="7" offset="3910" startLine="111" starttimestamp="1612813070441" timestamp="2590585">
    <deletedText><![CDATA[webcite]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="495" _type="Insert" date="Mon Feb 08 15:21:01 EST 2021" docASTNodeCount="4525" docActiveCodeLength="26057" docExpressionCount="3106" docLength="26409" length="2" offset="3928" repeat="2" starttimestamp="1612813070441" timestamp="2590800" timestamp2="2590905">
    <text><![CDATA[, ]]></text>
  </DocumentChange>
  <DocumentChange __id="501" _type="Insert" date="Mon Feb 08 15:21:10 EST 2021" docASTNodeCount="4476" docActiveCodeLength="26061" docExpressionCount="3069" docLength="26413" length="4" offset="25452" repeat="4" starttimestamp="1612813070441" timestamp="2600172" timestamp2="2600928">
    <text><![CDATA[ ite]]></text>
  </DocumentChange>
  <DocumentChange __id="509" _type="Replace" date="Mon Feb 08 15:21:12 EST 2021" docASTNodeCount="4476" docActiveCodeLength="26069" docExpressionCount="3069" docLength="26421" endLine="734" insertionLength="11" int_docASTNodeCount="4525" int_docActiveCodeLength="26058" int_docExpressionCount="3106" int_docLength="26410" length="3" offset="25453" startLine="734" starttimestamp="1612813070441" timestamp="2601568">
    <deletedText><![CDATA[ite]]></deletedText>
    <insertedText><![CDATA[Iterator<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="511" _type="Replace" date="Mon Feb 08 15:21:12 EST 2021" docASTNodeCount="4476" docActiveCodeLength="26069" docExpressionCount="3069" docLength="26421" endLine="734" insertionLength="1" int_docASTNodeCount="4476" int_docActiveCodeLength="26068" int_docExpressionCount="3069" int_docLength="26420" length="1" offset="25462" startLine="734" starttimestamp="1612813070441" timestamp="2602254">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="513" _type="Insert" date="Mon Feb 08 15:21:12 EST 2021" docASTNodeCount="4476" docActiveCodeLength="26071" docExpressionCount="3069" docLength="26423" length="2" offset="25463" repeat="2" starttimestamp="1612813070441" timestamp="2602316" timestamp2="2602347">
    <text><![CDATA[hi]]></text>
  </DocumentChange>
  <DocumentChange __id="519" _type="Replace" date="Mon Feb 08 15:21:12 EST 2021" docASTNodeCount="4476" docActiveCodeLength="26078" docExpressionCount="3069" docLength="26430" endLine="734" insertionLength="10" int_docASTNodeCount="4476" int_docActiveCodeLength="26068" int_docExpressionCount="3069" int_docLength="26420" length="3" offset="25462" startLine="734" starttimestamp="1612813070441" timestamp="2602528">
    <deletedText><![CDATA[ehi]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="522" _type="Insert" date="Mon Feb 08 15:21:13 EST 2021" docASTNodeCount="4483" docActiveCodeLength="26080" docExpressionCount="3072" docLength="26432" length="2" offset="25473" repeat="2" starttimestamp="1612813070441" timestamp="2603380" timestamp2="2603413">
    <text><![CDATA[we]]></text>
  </DocumentChange>
  <DocumentChange __id="527" _type="Delete" date="Mon Feb 08 15:21:14 EST 2021" docASTNodeCount="4476" docActiveCodeLength="26078" docExpressionCount="3069" docLength="26430" endLine="734" length="2" offset="25473" repeat="2" startLine="734" starttimestamp="1612813070441" timestamp="2603741" timestamp2="2603848">
    <text><![CDATA[we]]></text>
  </DocumentChange>
  <DocumentChange __id="530" _type="Insert" date="Mon Feb 08 15:21:14 EST 2021" docASTNodeCount="4483" docActiveCodeLength="26090" docExpressionCount="3072" docLength="26442" length="12" offset="25473" repeat="4" starttimestamp="1612813070441" timestamp="2603937" timestamp2="2604229">
    <text><![CDATA[commands web]]></text>
  </DocumentChange>
  <DocumentChange __id="542" _type="Delete" date="Mon Feb 08 15:21:15 EST 2021" docASTNodeCount="4476" docActiveCodeLength="26078" docExpressionCount="3069" docLength="26430" endLine="734" length="12" offset="25473" repeat="2" startLine="734" starttimestamp="1612813070441" timestamp="2604716" timestamp2="2604852">
    <text><![CDATA[commands web]]></text>
  </DocumentChange>
  <DocumentChange __id="546" _type="Insert" date="Mon Feb 08 15:21:15 EST 2021" docASTNodeCount="4483" docActiveCodeLength="26083" docExpressionCount="3072" docLength="26435" length="5" offset="25473" repeat="5" starttimestamp="1612813070441" timestamp="2605349" timestamp2="2606309">
    <text><![CDATA[ webc]]></text>
  </DocumentChange>
  <DocumentChange __id="559" _type="Delete" date="Mon Feb 08 15:21:17 EST 2021" docASTNodeCount="4483" docActiveCodeLength="26082" docExpressionCount="3072" docLength="26434" endLine="734" length="1" offset="25477" startLine="734" starttimestamp="1612813070441" timestamp="2607033">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="540" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:14 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2604336" />
  <Command __id="541" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2604361" />
  <Command __id="543" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:21:15 EST 2021" starttimestamp="1612813070441" timestamp="2604721" />
  <Command __id="545" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:21:15 EST 2021" starttimestamp="1612813070441" timestamp="2604859" />
  <Command __id="547" _type="InsertStringCommand" date="Mon Feb 08 15:21:15 EST 2021" starttimestamp="1612813070441" timestamp="2605360" timestamp2="2605360">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="549" _type="InsertStringCommand" date="Mon Feb 08 15:21:15 EST 2021" starttimestamp="1612813070441" timestamp="2605510" timestamp2="2605510">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="551" _type="InsertStringCommand" date="Mon Feb 08 15:21:15 EST 2021" starttimestamp="1612813070441" timestamp="2605556" timestamp2="2605556">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="552" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:16 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2605594" />
  <Command __id="554" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:16 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2605833" />
  <Command __id="556" _type="InsertStringCommand" date="Mon Feb 08 15:21:16 EST 2021" starttimestamp="1612813070441" timestamp="2606322" timestamp2="2606322">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="557" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:16 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2606406" />
  <Command __id="558" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:16 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2606429" />
  <Command __id="560" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:21:17 EST 2021" starttimestamp="1612813070441" timestamp="2607037" />
  <Command __id="562" _type="InsertStringCommand" date="Mon Feb 08 15:21:17 EST 2021" starttimestamp="1612813070441" timestamp="2607455" timestamp2="2607455">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="564" _type="InsertStringCommand" date="Mon Feb 08 15:21:18 EST 2021" starttimestamp="1612813070441" timestamp="2607582" timestamp2="2607582">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="565" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2607672" />
  <Command __id="566" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2607695" />
  <Command __id="568" _type="InsertStringCommand" date="Mon Feb 08 15:21:18 EST 2021" starttimestamp="1612813070441" timestamp="2607767" timestamp2="2607767">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="569" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2607857" />
  <Command __id="570" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2607879" />
  <Command __id="572" _type="InsertStringCommand" date="Mon Feb 08 15:21:18 EST 2021" starttimestamp="1612813070441" timestamp="2607894" timestamp2="2607894">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="574" _type="InsertStringCommand" date="Mon Feb 08 15:21:18 EST 2021" starttimestamp="1612813070441" timestamp="2607982" timestamp2="2607982">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="575" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2608019" />
  <Command __id="576" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2608057" />
  <Command __id="578" _type="InsertStringCommand" date="Mon Feb 08 15:21:18 EST 2021" starttimestamp="1612813070441" timestamp="2608071" timestamp2="2608071">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="580" _type="InsertStringCommand" date="Mon Feb 08 15:21:18 EST 2021" starttimestamp="1612813070441" timestamp="2608092" timestamp2="2608092">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="581" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2608129" />
  <Command __id="582" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2608151" />
  <Command __id="584" _type="InsertStringCommand" date="Mon Feb 08 15:21:18 EST 2021" starttimestamp="1612813070441" timestamp="2608390" timestamp2="2608390">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="586" _type="InsertStringCommand" date="Mon Feb 08 15:21:19 EST 2021" starttimestamp="1612813070441" timestamp="2608590" timestamp2="2608590">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="588" _type="InsertStringCommand" date="Mon Feb 08 15:21:19 EST 2021" starttimestamp="1612813070441" timestamp="2608650" timestamp2="2608650">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="589" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2608687" />
  <Command __id="590" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2608709" />
  <Command __id="592" _type="InsertStringCommand" date="Mon Feb 08 15:21:19 EST 2021" starttimestamp="1612813070441" timestamp="2609122" timestamp2="2609122">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="594" _type="InsertStringCommand" date="Mon Feb 08 15:21:19 EST 2021" starttimestamp="1612813070441" timestamp="2609197" timestamp2="2609197">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="595" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2609235" />
  <Command __id="596" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2609258" />
  <Command __id="598" _type="InsertStringCommand" date="Mon Feb 08 15:21:19 EST 2021" starttimestamp="1612813070441" timestamp="2609328" timestamp2="2609328">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="600" _type="InsertStringCommand" date="Mon Feb 08 15:21:19 EST 2021" starttimestamp="1612813070441" timestamp="2609411" timestamp2="2609411">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="601" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2609450" />
  <Command __id="602" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2609472" />
  <Command __id="604" _type="InsertStringCommand" date="Mon Feb 08 15:21:19 EST 2021" starttimestamp="1612813070441" timestamp="2609485" timestamp2="2609485">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="605" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2609575" />
  <Command __id="606" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2609604" />
  <Command __id="608" _type="InsertStringCommand" date="Mon Feb 08 15:21:20 EST 2021" starttimestamp="1612813070441" timestamp="2610240" timestamp2="2610240">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="610" _type="PauseCommand" date="Mon Feb 08 15:21:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2612202">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1962]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="609" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:22 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2612202" />
  <Command __id="611" _type="MoveCaretCommand" caretOffset="6188" date="Mon Feb 08 15:21:23 EST 2021" docOffset="26450" starttimestamp="1612813070441" timestamp="2612583" />
  <Command __id="612" _type="MoveCaretCommand" caretOffset="5480" date="Mon Feb 08 15:21:23 EST 2021" docOffset="25742" starttimestamp="1612813070441" timestamp="2613349" />
  <Command __id="614" _type="PauseCommand" date="Mon Feb 08 15:21:25 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2614903">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1554]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="613" _type="MoveCaretCommand" caretOffset="5323" date="Mon Feb 08 15:21:25 EST 2021" docOffset="25585" starttimestamp="1612813070441" timestamp="2614903" />
  <Command __id="616" _type="PauseCommand" date="Mon Feb 08 15:21:27 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2617516">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2613]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="615" _type="MoveCaretCommand" caretOffset="5122" date="Mon Feb 08 15:21:27 EST 2021" docOffset="25384" starttimestamp="1612813070441" timestamp="2617516" />
  <Command __id="617" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:21:28 EST 2021" starttimestamp="1612813070441" timestamp="2618392" />
  <Command __id="619" _type="PauseCommand" date="Mon Feb 08 15:21:30 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2620180">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1788]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="620" _type="InsertStringCommand" date="Mon Feb 08 15:21:30 EST 2021" starttimestamp="1612813070441" timestamp="2620217" timestamp2="2620217">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="622" _type="PauseCommand" date="Mon Feb 08 15:21:31 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2621321">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1104]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="623" _type="InsertStringCommand" date="Mon Feb 08 15:21:31 EST 2021" starttimestamp="1612813070441" timestamp="2621327" timestamp2="2621327">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="625" _type="InsertStringCommand" date="Mon Feb 08 15:21:31 EST 2021" starttimestamp="1612813070441" timestamp="2621371" timestamp2="2621371">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="626" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:21:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2621413" />
  <Command __id="630" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:21:32 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2621820" />
  <Command __id="631" _type="InsertStringCommand" date="Mon Feb 08 15:21:32 EST 2021" starttimestamp="1612813070441" timestamp="2621825" timestamp2="2621825">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="633" _type="PauseCommand" date="Mon Feb 08 15:21:34 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2624408">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2583]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="634" _type="UndoCommand" date="Mon Feb 08 15:21:34 EST 2021" starttimestamp="1612813070441" timestamp="2624439" />
  <Command __id="636" _type="UndoCommand" date="Mon Feb 08 15:21:35 EST 2021" starttimestamp="1612813070441" timestamp="2625257" />
  <Command __id="638" _type="PauseCommand" date="Mon Feb 08 15:21:36 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2626536">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1279]]></rest>
    <prev><![CDATA[UndoCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="639" _type="RedoCommand" date="Mon Feb 08 15:21:36 EST 2021" starttimestamp="1612813070441" timestamp="2626539" />
  <Command __id="640" _type="MoveCaretCommand" caretOffset="5609" date="Mon Feb 08 15:21:37 EST 2021" docOffset="25871" starttimestamp="1612813070441" timestamp="2627087" />
  <Command __id="642" _type="PauseCommand" date="Mon Feb 08 15:21:42 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2631865">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4778]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="641" _type="ShellCommand" date="Mon Feb 08 15:21:42 EST 2021" starttimestamp="1612813070441" timestamp="2631865" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="643" _type="ShellCommand" date="Mon Feb 08 15:21:42 EST 2021" starttimestamp="1612813070441" timestamp="2631918" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="645" _type="PauseCommand" date="Mon Feb 08 15:21:50 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2639910">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7992]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="644" _type="MoveCaretCommand" caretOffset="5451" date="Mon Feb 08 15:21:50 EST 2021" docOffset="25713" starttimestamp="1612813070441" timestamp="2639910" />
  <Command __id="646" _type="MoveCaretCommand" caretOffset="5444" date="Mon Feb 08 15:21:50 EST 2021" docOffset="25706" starttimestamp="1612813070441" timestamp="2640438" />
  <Command __id="648" _type="PauseCommand" date="Mon Feb 08 15:22:00 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2650019">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9581]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="647" _type="MoveCaretCommand" caretOffset="5259" date="Mon Feb 08 15:22:00 EST 2021" docOffset="25521" starttimestamp="1612813070441" timestamp="2650019" />
  <Command __id="649" _type="SelectTextCommand" caretOffset="5262" date="Mon Feb 08 15:22:00 EST 2021" end="5262" start="5258" starttimestamp="1612813070441" timestamp="2650200" />
  <Command __id="651" _type="PauseCommand" date="Mon Feb 08 15:22:24 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="2674424">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[24224]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="650" _type="MoveCaretCommand" caretOffset="5353" date="Mon Feb 08 15:22:24 EST 2021" docOffset="25615" starttimestamp="1612813070441" timestamp="2674424" />
  <Command __id="652" _type="MoveCaretCommand" caretOffset="5352" date="Mon Feb 08 15:22:25 EST 2021" docOffset="25614" starttimestamp="1612813070441" timestamp="2674993" />
  <Command __id="654" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:22:26 EST 2021" starttimestamp="1612813070441" timestamp="2675900" />
  <Command __id="656" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:22:26 EST 2021" starttimestamp="1612813070441" timestamp="2676010" />
  <Command __id="658" _type="InsertStringCommand" date="Mon Feb 08 15:22:26 EST 2021" starttimestamp="1612813070441" timestamp="2676384" timestamp2="2676384">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="660" _type="InsertStringCommand" date="Mon Feb 08 15:22:26 EST 2021" starttimestamp="1612813070441" timestamp="2676482" timestamp2="2676482">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="661" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:27 EST 2021" starttimestamp="1612813070441" timestamp="2677037" />
  <Command __id="662" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:27 EST 2021" starttimestamp="1612813070441" timestamp="2677147" />
  <Command __id="663" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:27 EST 2021" starttimestamp="1612813070441" timestamp="2677511" />
  <Command __id="665" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 15:22:28 EST 2021" starttimestamp="1612813070441" timestamp="2678200" />
  <Command __id="667" _type="PauseCommand" date="Mon Feb 08 15:22:29 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2679264">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1064]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="668" _type="InsertStringCommand" date="Mon Feb 08 15:22:29 EST 2021" starttimestamp="1612813070441" timestamp="2679272" timestamp2="2679272">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="669" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:30 EST 2021" starttimestamp="1612813070441" timestamp="2679837" />
  <Command __id="670" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:30 EST 2021" starttimestamp="1612813070441" timestamp="2679966" />
  <Command __id="671" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:30 EST 2021" starttimestamp="1612813070441" timestamp="2680091" />
  <Command __id="672" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:30 EST 2021" starttimestamp="1612813070441" timestamp="2680206" />
  <Command __id="673" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:30 EST 2021" starttimestamp="1612813070441" timestamp="2680329" />
  <Command __id="674" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:31 EST 2021" starttimestamp="1612813070441" timestamp="2680634" />
  <Command __id="675" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:31 EST 2021" starttimestamp="1612813070441" timestamp="2681148" />
  <Command __id="676" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:31 EST 2021" starttimestamp="1612813070441" timestamp="2681327" />
  <Command __id="677" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:31 EST 2021" starttimestamp="1612813070441" timestamp="2681487" />
  <Command __id="678" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:32 EST 2021" starttimestamp="1612813070441" timestamp="2681616" />
  <Command __id="679" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:32 EST 2021" starttimestamp="1612813070441" timestamp="2682091" />
  <Command __id="680" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:32 EST 2021" starttimestamp="1612813070441" timestamp="2682239" />
  <Command __id="681" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:32 EST 2021" starttimestamp="1612813070441" timestamp="2682389" />
  <Command __id="682" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:32 EST 2021" starttimestamp="1612813070441" timestamp="2682518" />
  <Command __id="683" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 15:22:33 EST 2021" starttimestamp="1612813070441" timestamp="2682783" />
  <Command __id="684" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:22:33 EST 2021" starttimestamp="1612813070441" timestamp="2683206" />
  <Command __id="686" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:22:33 EST 2021" starttimestamp="1612813070441" timestamp="2683536" />
  <Command __id="688" _type="InsertStringCommand" date="Mon Feb 08 15:22:34 EST 2021" starttimestamp="1612813070441" timestamp="2684185" timestamp2="2684185">
    <data><![CDATA[>]]></data>
  </Command>
  <Command __id="690" _type="InsertStringCommand" date="Mon Feb 08 15:22:34 EST 2021" starttimestamp="1612813070441" timestamp="2684440" timestamp2="2684440">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="691" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:35 EST 2021" starttimestamp="1612813070441" timestamp="2684828" />
  <Command __id="692" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:35 EST 2021" starttimestamp="1612813070441" timestamp="2684960" />
  <Command __id="693" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:35 EST 2021" starttimestamp="1612813070441" timestamp="2685101" />
  <Command __id="694" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:35 EST 2021" starttimestamp="1612813070441" timestamp="2685219" />
  <Command __id="695" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:35 EST 2021" starttimestamp="1612813070441" timestamp="2685344" />
  <Command __id="696" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:35 EST 2021" starttimestamp="1612813070441" timestamp="2685465" />
  <Command __id="698" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 08 15:22:36 EST 2021" starttimestamp="1612813070441" timestamp="2686403" />
  <Command __id="700" _type="PauseCommand" date="Mon Feb 08 15:22:37 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2687487">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1084]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="701" _type="InsertStringCommand" date="Mon Feb 08 15:22:37 EST 2021" starttimestamp="1612813070441" timestamp="2687494" timestamp2="2687494">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="703" _type="InsertStringCommand" date="Mon Feb 08 15:22:38 EST 2021" starttimestamp="1612813070441" timestamp="2687607" timestamp2="2687607">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="705" _type="InsertStringCommand" date="Mon Feb 08 15:22:38 EST 2021" starttimestamp="1612813070441" timestamp="2687746" timestamp2="2687746">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="706" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:38 EST 2021" starttimestamp="1612813070441" timestamp="2688173" />
  <Command __id="707" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:22:38 EST 2021" starttimestamp="1612813070441" timestamp="2688318" />
  <Command __id="709" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:22:39 EST 2021" starttimestamp="1612813070441" timestamp="2689099" />
  <Command __id="711" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:22:39 EST 2021" starttimestamp="1612813070441" timestamp="2689267" />
  <Command __id="713" _type="InsertStringCommand" date="Mon Feb 08 15:22:40 EST 2021" starttimestamp="1612813070441" timestamp="2689773" timestamp2="2689773">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="715" _type="InsertStringCommand" date="Mon Feb 08 15:22:40 EST 2021" starttimestamp="1612813070441" timestamp="2690062" timestamp2="2690062">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="717" _type="InsertStringCommand" date="Mon Feb 08 15:22:40 EST 2021" starttimestamp="1612813070441" timestamp="2690220" timestamp2="2690220">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="719" _type="PauseCommand" date="Mon Feb 08 15:22:43 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2692729">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2509]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="718" _type="MoveCaretCommand" caretOffset="5435" date="Mon Feb 08 15:22:43 EST 2021" docOffset="25697" starttimestamp="1612813070441" timestamp="2692729" />
  <Command __id="721" _type="PauseCommand" date="Mon Feb 08 15:22:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2694123">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1394]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="720" _type="SelectTextCommand" caretOffset="5441" date="Mon Feb 08 15:22:44 EST 2021" end="5441" start="5428" starttimestamp="1612813070441" timestamp="2694123" />
  <Command __id="723" _type="PauseCommand" date="Mon Feb 08 15:22:46 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2695780">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1657]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="724" _type="CutCommand" date="Mon Feb 08 15:22:46 EST 2021" starttimestamp="1612813070441" timestamp="2695785" />
  <Command __id="726" _type="PauseCommand" date="Mon Feb 08 15:22:48 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2698389">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2604]]></rest>
    <prev><![CDATA[CutCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="725" _type="SelectTextCommand" caretOffset="5564" date="Mon Feb 08 15:22:48 EST 2021" end="5564" start="5437" starttimestamp="1612813070441" timestamp="2698389" />
  <Command __id="728" _type="CutCommand" date="Mon Feb 08 15:22:49 EST 2021" starttimestamp="1612813070441" timestamp="2698732" />
  <Command __id="729" _type="MoveCaretCommand" caretOffset="5084" date="Mon Feb 08 15:22:49 EST 2021" docOffset="25346" starttimestamp="1612813070441" timestamp="2699138" />
  <Command __id="730" _type="MoveCaretCommand" caretOffset="5333" date="Mon Feb 08 15:22:50 EST 2021" docOffset="25595" starttimestamp="1612813070441" timestamp="2699701" />
  <Command __id="731" _type="MoveCaretCommand" caretOffset="5428" date="Mon Feb 08 15:22:50 EST 2021" docOffset="25690" starttimestamp="1612813070441" timestamp="2700087" />
  <Command __id="733" _type="PasteCommand" date="Mon Feb 08 15:22:50 EST 2021" starttimestamp="1612813070441" timestamp="2700281" />
  <Command __id="735" _type="PauseCommand" date="Mon Feb 08 15:23:02 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2711849">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[11568]]></rest>
    <prev><![CDATA[PasteCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="736" _type="InsertStringCommand" date="Mon Feb 08 15:23:02 EST 2021" starttimestamp="1612813070441" timestamp="2711861" timestamp2="2711861">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="738" _type="InsertStringCommand" date="Mon Feb 08 15:23:02 EST 2021" starttimestamp="1612813070441" timestamp="2712015" timestamp2="2712015">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="740" _type="InsertStringCommand" date="Mon Feb 08 15:23:02 EST 2021" starttimestamp="1612813070441" timestamp="2712049" timestamp2="2712049">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:23:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2712092" />
  <Command __id="743" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:23:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2712968" />
  <Command __id="745" _type="InsertStringCommand" date="Mon Feb 08 15:23:03 EST 2021" starttimestamp="1612813070441" timestamp="2712984" timestamp2="2712984">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="747" _type="PauseCommand" date="Mon Feb 08 15:23:05 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2715459">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2475]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="748" _type="InsertStringCommand" date="Mon Feb 08 15:23:05 EST 2021" starttimestamp="1612813070441" timestamp="2715466" timestamp2="2715466">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="750" _type="InsertStringCommand" date="Mon Feb 08 15:23:06 EST 2021" starttimestamp="1612813070441" timestamp="2715666" timestamp2="2715666">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="752" _type="InsertStringCommand" date="Mon Feb 08 15:23:06 EST 2021" starttimestamp="1612813070441" timestamp="2715747" timestamp2="2715747">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="754" _type="PauseCommand" date="Mon Feb 08 15:23:14 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2724063">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[8316]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="755" _type="InsertStringCommand" date="Mon Feb 08 15:23:14 EST 2021" starttimestamp="1612813070441" timestamp="2724069" timestamp2="2724069">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="756" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:23:14 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2724111" />
  <DocumentChange __id="561" _type="Insert" date="Mon Feb 08 15:21:17 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26098" docExpressionCount="3109" docLength="26450" length="16" offset="25477" repeat="16" starttimestamp="1612813070441" timestamp="2607447" timestamp2="2610233">
    <text><![CDATA[CommandIterator,]]></text>
  </DocumentChange>
  <DocumentChange __id="618" _type="Insert" date="Mon Feb 08 15:21:30 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26107" docExpressionCount="3109" docLength="26459" length="9" offset="25516" repeat="6" starttimestamp="1612813070441" timestamp="2620180" timestamp2="2621636">
    <text><![CDATA[
		while]]></text>
  </DocumentChange>
  <DocumentChange __id="632" _type="Delete" date="Mon Feb 08 15:21:34 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26098" docExpressionCount="3109" docLength="26450" endLine="735" length="9" offset="25516" startLine="734" starttimestamp="1612813070441" timestamp="2624408">
    <text><![CDATA[
		while]]></text>
  </DocumentChange>
  <DocumentChange __id="635" _type="Delete" date="Mon Feb 08 15:21:35 EST 2021" docASTNodeCount="4483" docActiveCodeLength="26082" docExpressionCount="3072" docLength="26434" endLine="734" length="16" offset="25477" startLine="734" starttimestamp="1612813070441" timestamp="2625245">
    <text><![CDATA[CommandIterator,]]></text>
  </DocumentChange>
  <DocumentChange __id="637" _type="Insert" date="Mon Feb 08 15:21:36 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26098" docExpressionCount="3109" docLength="26450" length="16" offset="25477" starttimestamp="1612813070441" timestamp="2626536">
    <text><![CDATA[CommandIterator,]]></text>
  </DocumentChange>
  <DocumentChange __id="653" _type="Delete" date="Mon Feb 08 15:22:26 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26096" docExpressionCount="3107" docLength="26448" endLine="736" length="2" offset="25612" repeat="2" startLine="736" starttimestamp="1612813070441" timestamp="2675897" timestamp2="2676006">
    <text><![CDATA[||]]></text>
  </DocumentChange>
  <DocumentChange __id="657" _type="Insert" date="Mon Feb 08 15:22:26 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26098" docExpressionCount="3109" docLength="26450" length="2" offset="25612" repeat="2" starttimestamp="1612813070441" timestamp="2676376" timestamp2="2676475">
    <text><![CDATA[&&]]></text>
  </DocumentChange>
  <DocumentChange __id="664" _type="Delete" date="Mon Feb 08 15:22:28 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26097" docExpressionCount="3109" docLength="26449" endLine="736" length="1" offset="25604" startLine="736" starttimestamp="1612813070441" timestamp="2678193">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="666" _type="Insert" date="Mon Feb 08 15:22:29 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26098" docExpressionCount="3109" docLength="26450" length="1" offset="25604" starttimestamp="1612813070441" timestamp="2679264">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="685" _type="Delete" date="Mon Feb 08 15:22:33 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26097" docExpressionCount="3107" docLength="26449" endLine="736" length="1" offset="25625" startLine="736" starttimestamp="1612813070441" timestamp="2683532">
    <text><![CDATA[<]]></text>
  </DocumentChange>
  <DocumentChange __id="687" _type="Insert" date="Mon Feb 08 15:22:34 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26099" docExpressionCount="3109" docLength="26451" length="2" offset="25625" repeat="2" starttimestamp="1612813070441" timestamp="2684178" timestamp2="2684433">
    <text><![CDATA[>=]]></text>
  </DocumentChange>
  <DocumentChange __id="697" _type="Delete" date="Mon Feb 08 15:22:36 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26096" docExpressionCount="3107" docLength="26448" endLine="736" length="3" offset="25648" startLine="736" starttimestamp="1612813070441" timestamp="2686399">
    <text><![CDATA[|| ]]></text>
  </DocumentChange>
  <DocumentChange __id="699" _type="Insert" date="Mon Feb 08 15:22:37 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26099" docExpressionCount="3109" docLength="26451" length="3" offset="25648" repeat="3" starttimestamp="1612813070441" timestamp="2687487" timestamp2="2687738">
    <text><![CDATA[&& ]]></text>
  </DocumentChange>
  <DocumentChange __id="708" _type="Delete" date="Mon Feb 08 15:22:39 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26097" docExpressionCount="3107" docLength="26449" endLine="736" length="2" offset="25661" repeat="2" startLine="736" starttimestamp="1612813070441" timestamp="2689095" timestamp2="2689264">
    <text><![CDATA[> ]]></text>
  </DocumentChange>
  <DocumentChange __id="712" _type="Insert" date="Mon Feb 08 15:22:40 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26100" docExpressionCount="3109" docLength="26452" length="3" offset="25661" repeat="3" starttimestamp="1612813070441" timestamp="2689765" timestamp2="2690213">
    <text><![CDATA[<= ]]></text>
  </DocumentChange>
  <DocumentChange __id="722" _type="Delete" date="Mon Feb 08 15:22:46 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26087" docExpressionCount="3108" docLength="26439" endLine="737" length="13" offset="25690" startLine="737" starttimestamp="1612813070441" timestamp="2695780">
    <text><![CDATA[return false;]]></text>
  </DocumentChange>
  <DocumentChange __id="727" _type="Delete" date="Mon Feb 08 15:22:49 EST 2021" docASTNodeCount="4514" docActiveCodeLength="25960" docExpressionCount="3095" docLength="26312" endLine="741" length="127" offset="25699" startLine="739" starttimestamp="1612813070441" timestamp="2698719">
    <text><![CDATA[webCommand.setStartTimestamp(0);
		webCommand.setTimestamp(timestamp);
		maybeAddPauseCommand(newCommands, last,	webCommand);]]></text>
  </DocumentChange>
  <DocumentChange __id="732" _type="Replace" date="Mon Feb 08 15:22:50 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26089" docExpressionCount="3108" docLength="26441" endLine="737" insertionLength="132" int_docASTNodeCount="4514" int_docActiveCodeLength="25957" int_docExpressionCount="3095" int_docLength="26309" length="3" offset="25687" startLine="737" starttimestamp="1612813070441" timestamp="2700269">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			maybeAddPauseCommand(newCommands, last,	webCommand);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="734" _type="Insert" date="Mon Feb 08 15:23:02 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26097" docExpressionCount="3109" docLength="26449" length="8" offset="25819" repeat="4" starttimestamp="1612813070441" timestamp="2711849" timestamp2="2712346">
    <text><![CDATA[
			web]]></text>
  </DocumentChange>
  <DocumentChange __id="744" _type="Replace" date="Mon Feb 08 15:23:03 EST 2021" docASTNodeCount="4532" docActiveCodeLength="26104" docExpressionCount="3109" docLength="26456" endLine="740" insertionLength="10" int_docASTNodeCount="4530" int_docActiveCodeLength="26094" int_docExpressionCount="3108" int_docLength="26446" length="3" offset="25824" startLine="740" starttimestamp="1612813070441" timestamp="2712974">
    <deletedText><![CDATA[web]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="746" _type="Insert" date="Mon Feb 08 15:23:05 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26107" docExpressionCount="3108" docLength="26459" length="3" offset="25834" repeat="3" starttimestamp="1612813070441" timestamp="2715459" timestamp2="2715741">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="753" _type="Insert" date="Mon Feb 08 15:23:14 EST 2021" docASTNodeCount="4534" docActiveCodeLength="26110" docExpressionCount="3111" docLength="26462" length="3" offset="25837" repeat="3" starttimestamp="1612813070441" timestamp="2724063" timestamp2="2724714">
    <text><![CDATA[ern]]></text>
  </DocumentChange>
  <DocumentChange __id="759" _type="Delete" date="Mon Feb 08 15:23:15 EST 2021" docASTNodeCount="4530" docActiveCodeLength="26107" docExpressionCount="3108" docLength="26459" endLine="740" length="3" offset="25837" repeat="3" startLine="740" starttimestamp="1612813070441" timestamp="2725083" timestamp2="2725345">
    <text><![CDATA[ern]]></text>
  </DocumentChange>
  <DocumentChange __id="762" _type="Insert" date="Mon Feb 08 15:23:16 EST 2021" docASTNodeCount="4534" docActiveCodeLength="26112" docExpressionCount="3111" docLength="26464" length="5" offset="25837" repeat="5" starttimestamp="1612813070441" timestamp="2725609" timestamp2="2727628">
    <text><![CDATA[webit]]></text>
  </DocumentChange>
  <Command __id="766" _type="PauseCommand" date="Mon Feb 08 15:23:17 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2727477">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1546]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="768" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:23:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2728071" />
  <DocumentChange __id="769" _type="Replace" date="Mon Feb 08 15:23:18 EST 2021" docASTNodeCount="4534" docActiveCodeLength="26125" docExpressionCount="3111" docLength="26477" endLine="740" insertionLength="18" int_docASTNodeCount="4530" int_docActiveCodeLength="26107" int_docExpressionCount="3108" int_docLength="26459" length="5" offset="25837" startLine="740" starttimestamp="1612813070441" timestamp="2728078">
    <deletedText><![CDATA[webit]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <Command __id="770" _type="InsertStringCommand" date="Mon Feb 08 15:23:18 EST 2021" starttimestamp="1612813070441" timestamp="2728085" timestamp2="2728085">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="771" _type="Insert" date="Mon Feb 08 15:23:18 EST 2021" docASTNodeCount="4536" docActiveCodeLength="26128" docExpressionCount="3113" docLength="26480" length="3" offset="25855" repeat="3" starttimestamp="1612813070441" timestamp="2728318" timestamp2="2728631">
    <text><![CDATA[.ne]]></text>
  </DocumentChange>
  <Command __id="772" _type="InsertStringCommand" date="Mon Feb 08 15:23:18 EST 2021" starttimestamp="1612813070441" timestamp="2728324" timestamp2="2728324">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="773" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:23:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2728365" />
  <Command __id="776" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:23:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2728769" />
  <Command __id="778" _type="InsertStringCommand" date="Mon Feb 08 15:23:19 EST 2021" starttimestamp="1612813070441" timestamp="2728784" timestamp2="2728784">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="780" _type="PauseCommand" date="Mon Feb 08 15:23:20 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2729969">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1185]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="781" _type="InsertStringCommand" date="Mon Feb 08 15:23:20 EST 2021" starttimestamp="1612813070441" timestamp="2729977" timestamp2="2729977">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="783" _type="PauseCommand" date="Mon Feb 08 15:23:33 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2742598">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[12621]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="782" _type="MoveCaretCommand" caretOffset="5328" date="Mon Feb 08 15:23:33 EST 2021" docOffset="25590" starttimestamp="1612813070441" timestamp="2742598" />
  <Command __id="784" _type="SelectTextCommand" caretOffset="5329" date="Mon Feb 08 15:23:33 EST 2021" end="5329" start="5327" starttimestamp="1612813070441" timestamp="2742741" />
  <Command __id="786" _type="InsertStringCommand" date="Mon Feb 08 15:23:33 EST 2021" starttimestamp="1612813070441" timestamp="2743454" timestamp2="2743454">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="788" _type="InsertStringCommand" date="Mon Feb 08 15:23:33 EST 2021" starttimestamp="1612813070441" timestamp="2743464" timestamp2="2743464">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="789" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:23:33 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2743505" />
  <Command __id="793" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:23:34 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2743907" />
  <Command __id="794" _type="InsertStringCommand" date="Mon Feb 08 15:23:34 EST 2021" starttimestamp="1612813070441" timestamp="2743910" timestamp2="2743910">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="796" _type="PauseCommand" date="Mon Feb 08 15:23:40 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2749618">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[5708]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="795" _type="SelectTextCommand" caretOffset="5463" date="Mon Feb 08 15:23:40 EST 2021" end="5463" start="5431" starttimestamp="1612813070441" timestamp="2749618" />
  <Command __id="797" _type="MoveCaretCommand" caretOffset="5463" date="Mon Feb 08 15:23:40 EST 2021" docOffset="25725" starttimestamp="1612813070441" timestamp="2749932" />
  <Command __id="799" _type="PauseCommand" date="Mon Feb 08 15:23:42 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2751785">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1853]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="798" _type="SelectTextCommand" caretOffset="5503" date="Mon Feb 08 15:23:42 EST 2021" end="5503" start="5468" starttimestamp="1612813070441" timestamp="2751785" />
  <Command __id="800" _type="MoveCaretCommand" caretOffset="5503" date="Mon Feb 08 15:23:42 EST 2021" docOffset="25765" starttimestamp="1612813070441" timestamp="2752025" />
  <Command __id="802" _type="PauseCommand" date="Mon Feb 08 15:23:47 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2757275">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5250]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="801" _type="MoveCaretCommand" caretOffset="5604" date="Mon Feb 08 15:23:47 EST 2021" docOffset="25866" starttimestamp="1612813070441" timestamp="2757275" />
  <Command __id="804" _type="PauseCommand" date="Mon Feb 08 15:23:57 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2767548">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[10273]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="803" _type="MoveCaretCommand" caretOffset="5560" date="Mon Feb 08 15:23:57 EST 2021" docOffset="25822" starttimestamp="1612813070441" timestamp="2767548" />
  <Command __id="806" _type="PauseCommand" date="Mon Feb 08 15:23:59 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2768748">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1200]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="807" _type="InsertStringCommand" date="Mon Feb 08 15:23:59 EST 2021" starttimestamp="1612813070441" timestamp="2768758" timestamp2="2768758">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="809" _type="InsertStringCommand" date="Mon Feb 08 15:23:59 EST 2021" starttimestamp="1612813070441" timestamp="2769037" timestamp2="2769037">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="810" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:23:59 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2769080" />
  <Command __id="812" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:23:59 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2769239" />
  <Command __id="814" _type="InsertStringCommand" date="Mon Feb 08 15:23:59 EST 2021" starttimestamp="1612813070441" timestamp="2769359" timestamp2="2769359">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="816" _type="InsertStringCommand" date="Mon Feb 08 15:24:00 EST 2021" starttimestamp="1612813070441" timestamp="2769896" timestamp2="2769896">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="817" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:00 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2769930" />
  <Command __id="825" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2772569" />
  <Command __id="827" _type="InsertStringCommand" date="Mon Feb 08 15:24:03 EST 2021" starttimestamp="1612813070441" timestamp="2772584" timestamp2="2772584">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="829" _type="InsertStringCommand" date="Mon Feb 08 15:24:03 EST 2021" starttimestamp="1612813070441" timestamp="2772859" timestamp2="2772859">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="830" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:03 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2772899" />
  <Command __id="834" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2773431" />
  <Command __id="836" _type="InsertStringCommand" date="Mon Feb 08 15:24:03 EST 2021" starttimestamp="1612813070441" timestamp="2773448" timestamp2="2773448">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="837" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:04 EST 2021" starttimestamp="1612813070441" timestamp="2774018" />
  <Command __id="839" _type="PauseCommand" date="Mon Feb 08 15:24:06 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2776253">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2235]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="838" _type="MoveCaretCommand" caretOffset="5632" date="Mon Feb 08 15:24:06 EST 2021" docOffset="25894" starttimestamp="1612813070441" timestamp="2776253" />
  <Command __id="840" _type="SelectTextCommand" caretOffset="5648" date="Mon Feb 08 15:24:06 EST 2021" end="5648" start="5630" starttimestamp="1612813070441" timestamp="2776407" />
  <Command __id="841" _type="MoveCaretCommand" caretOffset="5632" date="Mon Feb 08 15:24:06 EST 2021" docOffset="25894" starttimestamp="1612813070441" timestamp="2776554" />
  <Command __id="842" _type="MoveCaretCommand" caretOffset="5631" date="Mon Feb 08 15:24:07 EST 2021" docOffset="25893" starttimestamp="1612813070441" timestamp="2777310" />
  <Command __id="843" _type="SelectTextCommand" caretOffset="5648" date="Mon Feb 08 15:24:07 EST 2021" end="5648" start="5630" starttimestamp="1612813070441" timestamp="2777455" />
  <Command __id="844" _type="SelectTextCommand" caretOffset="5658" date="Mon Feb 08 15:24:08 EST 2021" end="5658" start="5614" starttimestamp="1612813070441" timestamp="2777601" />
  <Command __id="846" _type="CutCommand" date="Mon Feb 08 15:24:08 EST 2021" starttimestamp="1612813070441" timestamp="2777776" />
  <Command __id="847" _type="MoveCaretCommand" caretOffset="5606" date="Mon Feb 08 15:24:08 EST 2021" docOffset="25868" starttimestamp="1612813070441" timestamp="2778050" />
  <Command __id="849" _type="PasteCommand" date="Mon Feb 08 15:24:08 EST 2021" starttimestamp="1612813070441" timestamp="2778291" />
  <Command __id="851" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:24:09 EST 2021" starttimestamp="1612813070441" timestamp="2778724" />
  <Command __id="852" _type="MoveCaretCommand" caretOffset="5651" date="Mon Feb 08 15:24:09 EST 2021" docOffset="25913" starttimestamp="1612813070441" timestamp="2779116" />
  <Command __id="854" _type="InsertStringCommand" date="Mon Feb 08 15:24:09 EST 2021" starttimestamp="1612813070441" timestamp="2779489" timestamp2="2779489">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="856" _type="InsertStringCommand" date="Mon Feb 08 15:24:10 EST 2021" starttimestamp="1612813070441" timestamp="2779919" timestamp2="2779919">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="858" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:24:10 EST 2021" starttimestamp="1612813070441" timestamp="2780480" />
  <Command __id="860" _type="InsertStringCommand" date="Mon Feb 08 15:24:11 EST 2021" starttimestamp="1612813070441" timestamp="2780735" timestamp2="2780735">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="861" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2780777" />
  <Command __id="864" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2780964" />
  <Command __id="866" _type="InsertStringCommand" date="Mon Feb 08 15:24:11 EST 2021" starttimestamp="1612813070441" timestamp="2780973" timestamp2="2780973">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="867" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2781067" />
  <Command __id="877" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:13 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2783519" />
  <Command __id="879" _type="InsertStringCommand" date="Mon Feb 08 15:24:14 EST 2021" starttimestamp="1612813070441" timestamp="2783701" timestamp2="2783701">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="881" _type="InsertStringCommand" date="Mon Feb 08 15:24:14 EST 2021" starttimestamp="1612813070441" timestamp="2784172" timestamp2="2784172">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="882" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:14 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2784213" />
  <DocumentChange __id="777" _type="Replace" date="Mon Feb 08 15:23:19 EST 2021" docASTNodeCount="4536" docActiveCodeLength="26132" docExpressionCount="3113" docLength="26484" endLine="740" insertionLength="6" int_docASTNodeCount="4534" int_docActiveCodeLength="26126" int_docExpressionCount="3111" int_docLength="26478" length="2" offset="25856" startLine="740" starttimestamp="1612813070441" timestamp="2728776">
    <deletedText><![CDATA[ne]]></deletedText>
    <insertedText><![CDATA[next()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="779" _type="Insert" date="Mon Feb 08 15:23:20 EST 2021" docASTNodeCount="4536" docActiveCodeLength="26133" docExpressionCount="3113" docLength="26485" length="1" offset="25862" starttimestamp="1612813070441" timestamp="2729969">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="785" _type="Replace" date="Mon Feb 08 15:23:33 EST 2021" docASTNodeCount="4538" docActiveCodeLength="26132" docExpressionCount="3115" docLength="26484" endLine="736" insertionLength="1" int_docASTNodeCount="4539" int_docActiveCodeLength="26131" int_docExpressionCount="3116" int_docLength="26483" length="2" offset="25589" startLine="736" starttimestamp="1612813070441" timestamp="2743446">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="787" _type="Insert" date="Mon Feb 08 15:23:33 EST 2021" docASTNodeCount="4536" docActiveCodeLength="26136" docExpressionCount="3113" docLength="26488" length="4" offset="25590" repeat="4" starttimestamp="1612813070441" timestamp="2743457" timestamp2="2743733">
    <text><![CDATA[hile]]></text>
  </DocumentChange>
  <DocumentChange __id="805" _type="Insert" date="Mon Feb 08 15:23:59 EST 2021" docASTNodeCount="4537" docActiveCodeLength="26143" docExpressionCount="3112" docLength="26495" length="7" offset="25822" repeat="3" starttimestamp="1612813070441" timestamp="2768748" timestamp2="2769225">
    <text><![CDATA[
			if]]></text>
  </DocumentChange>
  <DocumentChange __id="813" _type="Replace" date="Mon Feb 08 15:23:59 EST 2021" docASTNodeCount="4539" docActiveCodeLength="26182" docExpressionCount="3114" docLength="26534" endLine="740" insertionLength="41" int_docASTNodeCount="4536" int_docActiveCodeLength="26141" int_docExpressionCount="3113" int_docLength="26493" length="2" offset="25827" startLine="740" starttimestamp="1612813070441" timestamp="2769259">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
				
			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="815" _type="Replace" date="Mon Feb 08 15:24:00 EST 2021" docASTNodeCount="4539" docActiveCodeLength="26161" docExpressionCount="3114" docLength="26513" endLine="740" insertionLength="1" int_docASTNodeCount="4539" int_docActiveCodeLength="26160" int_docExpressionCount="3114" int_docLength="26512" length="22" offset="25831" startLine="740" starttimestamp="1612813070441" timestamp="2769885">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="818" _type="Insert" date="Mon Feb 08 15:24:00 EST 2021" docASTNodeCount="4539" docActiveCodeLength="26163" docExpressionCount="3114" docLength="26515" length="2" offset="25832" repeat="2" starttimestamp="1612813070441" timestamp="2770133" timestamp2="2770584">
    <text><![CDATA[ei]]></text>
  </DocumentChange>
  <DocumentChange __id="820" _type="Delete" date="Mon Feb 08 15:24:01 EST 2021" docASTNodeCount="4539" docActiveCodeLength="26162" docExpressionCount="3114" docLength="26514" endLine="740" length="1" offset="25833" startLine="740" starttimestamp="1612813070441" timestamp="2771376">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="821" _type="Insert" date="Mon Feb 08 15:24:01 EST 2021" docASTNodeCount="4539" docActiveCodeLength="26166" docExpressionCount="3114" docLength="26518" length="4" offset="25833" repeat="4" starttimestamp="1612813070441" timestamp="2771550" timestamp2="2772192">
    <text><![CDATA[coit]]></text>
  </DocumentChange>
  <DocumentChange __id="826" _type="Replace" date="Mon Feb 08 15:24:03 EST 2021" docASTNodeCount="4539" docActiveCodeLength="26178" docExpressionCount="3114" docLength="26530" endLine="740" insertionLength="18" int_docASTNodeCount="4539" int_docActiveCodeLength="26160" int_docExpressionCount="3114" int_docLength="26512" length="6" offset="25831" startLine="740" starttimestamp="1612813070441" timestamp="2772576">
    <deletedText><![CDATA[wecoit]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="828" _type="Insert" date="Mon Feb 08 15:24:03 EST 2021" docASTNodeCount="4541" docActiveCodeLength="26182" docExpressionCount="3116" docLength="26534" length="4" offset="25849" repeat="4" starttimestamp="1612813070441" timestamp="2772857" timestamp2="2773302">
    <text><![CDATA[.has]]></text>
  </DocumentChange>
  <DocumentChange __id="835" _type="Replace" date="Mon Feb 08 15:24:03 EST 2021" docASTNodeCount="4541" docActiveCodeLength="26188" docExpressionCount="3116" docLength="26540" endLine="740" insertionLength="9" int_docASTNodeCount="4541" int_docActiveCodeLength="26179" int_docExpressionCount="3115" int_docLength="26531" length="3" offset="25850" startLine="740" starttimestamp="1612813070441" timestamp="2773438">
    <deletedText><![CDATA[has]]></deletedText>
    <insertedText><![CDATA[hasNext()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="845" _type="Delete" date="Mon Feb 08 15:24:08 EST 2021" docASTNodeCount="4535" docActiveCodeLength="26144" docExpressionCount="3111" docLength="26496" endLine="744" length="44" offset="25876" startLine="743" starttimestamp="1612813070441" timestamp="2777762">
    <text><![CDATA[			webCommand = webCommandIterator.next();
]]></text>
  </DocumentChange>
  <DocumentChange __id="848" _type="Replace" date="Mon Feb 08 15:24:08 EST 2021" docASTNodeCount="4541" docActiveCodeLength="26185" docExpressionCount="3116" docLength="26537" endLine="741" insertionLength="45" int_docASTNodeCount="4535" int_docActiveCodeLength="26140" int_docExpressionCount="3111" int_docLength="26492" length="4" offset="25864" startLine="741" starttimestamp="1612813070441" timestamp="2778280">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[				webCommand = webCommandIterator.next();
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="850" _type="Delete" date="Mon Feb 08 15:24:09 EST 2021" docASTNodeCount="4541" docActiveCodeLength="26183" docExpressionCount="3116" docLength="26535" endLine="743" length="2" offset="25909" startLine="742" starttimestamp="1612813070441" timestamp="2778722">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="853" _type="Insert" date="Mon Feb 08 15:24:09 EST 2021" docASTNodeCount="4542" docActiveCodeLength="26185" docExpressionCount="3116" docLength="26537" length="2" offset="25913" repeat="2" starttimestamp="1612813070441" timestamp="2779482" timestamp2="2779910">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <DocumentChange __id="857" _type="Delete" date="Mon Feb 08 15:24:10 EST 2021" docASTNodeCount="4541" docActiveCodeLength="26184" docExpressionCount="3116" docLength="26536" endLine="742" length="1" offset="25914" startLine="742" starttimestamp="1612813070441" timestamp="2780474">
    <text><![CDATA[{]]></text>
  </DocumentChange>
  <DocumentChange __id="859" _type="Insert" date="Mon Feb 08 15:24:11 EST 2021" docASTNodeCount="4526" docActiveCodeLength="26188" docExpressionCount="3103" docLength="26540" length="4" offset="25914" repeat="4" starttimestamp="1612813070441" timestamp="2780730" timestamp2="2780968">
    <text><![CDATA[el;s]]></text>
  </DocumentChange>
  <DocumentChange __id="868" _type="Delete" date="Mon Feb 08 15:24:11 EST 2021" docASTNodeCount="4543" docActiveCodeLength="26185" docExpressionCount="3117" docLength="26537" endLine="742" length="3" offset="25915" repeat="3" startLine="742" starttimestamp="1612813070441" timestamp="2781254" timestamp2="2781625">
    <text><![CDATA[l;s]]></text>
  </DocumentChange>
  <DocumentChange __id="871" _type="Insert" date="Mon Feb 08 15:24:12 EST 2021" docASTNodeCount="4543" docActiveCodeLength="26189" docExpressionCount="3117" docLength="26541" length="4" offset="25915" repeat="4" starttimestamp="1612813070441" timestamp="2782417" timestamp2="2782748">
    <text><![CDATA[lese]]></text>
  </DocumentChange>
  <DocumentChange __id="875" _type="Delete" date="Mon Feb 08 15:24:13 EST 2021" docASTNodeCount="4543" docActiveCodeLength="26188" docExpressionCount="3117" docLength="26540" endLine="742" length="1" offset="25918" startLine="742" starttimestamp="1612813070441" timestamp="2783225">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="876" _type="Insert" date="Mon Feb 08 15:24:13 EST 2021" docASTNodeCount="4541" docActiveCodeLength="26205" docExpressionCount="3116" docLength="26557" length="17" offset="25918" repeat="6" starttimestamp="1612813070441" timestamp="2783486" timestamp2="2785217">
    <text><![CDATA[{
				brea
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="887" _type="Replace" date="Mon Feb 08 15:24:15 EST 2021" docASTNodeCount="4525" docActiveCodeLength="26206" docExpressionCount="3101" docLength="26558" endLine="743" insertionLength="5" int_docASTNodeCount="4544" int_docActiveCodeLength="26201" int_docExpressionCount="3117" int_docLength="26553" length="4" offset="25925" startLine="743" starttimestamp="1612813070441" timestamp="2785365">
    <deletedText><![CDATA[brea]]></deletedText>
    <insertedText><![CDATA[break]]></insertedText>
  </DocumentChange>
  <Command __id="886" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:15 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2785358" />
  <Command __id="888" _type="InsertStringCommand" date="Mon Feb 08 15:24:15 EST 2021" starttimestamp="1612813070441" timestamp="2785375" timestamp2="2785375">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="890" _type="InsertStringCommand" date="Mon Feb 08 15:24:16 EST 2021" starttimestamp="1612813070441" timestamp="2785621" timestamp2="2785621">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="891" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:16 EST 2021" starttimestamp="1612813070441" timestamp="2785998" />
  <Command __id="892" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:24:16 EST 2021" starttimestamp="1612813070441" timestamp="2786173" />
  <Command __id="894" _type="InsertStringCommand" date="Mon Feb 08 15:24:16 EST 2021" starttimestamp="1612813070441" timestamp="2786320" timestamp2="2786320">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="895" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:17 EST 2021" starttimestamp="1612813070441" timestamp="2786582" />
  <Command __id="896" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:17 EST 2021" starttimestamp="1612813070441" timestamp="2786881" />
  <Command __id="897" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:17 EST 2021" starttimestamp="1612813070441" timestamp="2787366" />
  <Command __id="898" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:17 EST 2021" starttimestamp="1612813070441" timestamp="2787509" />
  <Command __id="899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:24:18 EST 2021" starttimestamp="1612813070441" timestamp="2787716" />
  <Command __id="901" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:24:18 EST 2021" starttimestamp="1612813070441" timestamp="2788146" />
  <Command __id="903" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:24:18 EST 2021" starttimestamp="1612813070441" timestamp="2788269" />
  <Command __id="905" _type="InsertStringCommand" date="Mon Feb 08 15:24:18 EST 2021" starttimestamp="1612813070441" timestamp="2788348" timestamp2="2788348">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="907" _type="InsertStringCommand" date="Mon Feb 08 15:24:18 EST 2021" starttimestamp="1612813070441" timestamp="2788384" timestamp2="2788384">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="908" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2788424" />
  <Command __id="909" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2789378" />
  <Command __id="910" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:20 EST 2021" starttimestamp="1612813070441" timestamp="2789591" />
  <Command __id="911" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:20 EST 2021" starttimestamp="1612813070441" timestamp="2789743" />
  <Command __id="912" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:20 EST 2021" starttimestamp="1612813070441" timestamp="2790527" />
  <Command __id="913" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:21 EST 2021" starttimestamp="1612813070441" timestamp="2790669" />
  <Command __id="914" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:21 EST 2021" starttimestamp="1612813070441" timestamp="2790792" />
  <Command __id="915" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:21 EST 2021" starttimestamp="1612813070441" timestamp="2790917" />
  <Command __id="916" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:21 EST 2021" starttimestamp="1612813070441" timestamp="2791046" />
  <Command __id="917" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:21 EST 2021" starttimestamp="1612813070441" timestamp="2791172" />
  <Command __id="918" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:21 EST 2021" starttimestamp="1612813070441" timestamp="2791308" />
  <Command __id="919" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:21 EST 2021" starttimestamp="1612813070441" timestamp="2791407" />
  <Command __id="920" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:22 EST 2021" starttimestamp="1612813070441" timestamp="2791562" />
  <Command __id="921" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:24:22 EST 2021" starttimestamp="1612813070441" timestamp="2791873" />
  <Command __id="923" _type="InsertStringCommand" date="Mon Feb 08 15:24:22 EST 2021" starttimestamp="1612813070441" timestamp="2792021" timestamp2="2792021">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="925" _type="InsertStringCommand" date="Mon Feb 08 15:24:22 EST 2021" starttimestamp="1612813070441" timestamp="2792372" timestamp2="2792372">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="926" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:22 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2792407" />
  <Command __id="929" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:23 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2792802" />
  <Command __id="931" _type="InsertStringCommand" date="Mon Feb 08 15:24:23 EST 2021" starttimestamp="1612813070441" timestamp="2792821" timestamp2="2792821">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="933" _type="InsertStringCommand" date="Mon Feb 08 15:24:23 EST 2021" starttimestamp="1612813070441" timestamp="2792958" timestamp2="2792958">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="935" _type="InsertStringCommand" date="Mon Feb 08 15:24:23 EST 2021" starttimestamp="1612813070441" timestamp="2793334" timestamp2="2793334">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="936" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:23 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2793377" />
  <Command __id="938" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:23 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2793526" />
  <Command __id="940" _type="InsertStringCommand" date="Mon Feb 08 15:24:24 EST 2021" starttimestamp="1612813070441" timestamp="2793657" timestamp2="2793657">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="941" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:24 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2793697" />
  <Command __id="942" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2793710" />
  <Command __id="944" _type="InsertStringCommand" date="Mon Feb 08 15:24:24 EST 2021" starttimestamp="1612813070441" timestamp="2793926" timestamp2="2793926">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="945" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:24 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2794020" />
  <Command __id="946" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2794034" />
  <Command __id="948" _type="InsertStringCommand" date="Mon Feb 08 15:24:24 EST 2021" starttimestamp="1612813070441" timestamp="2794101" timestamp2="2794101">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="949" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:24 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2794194" />
  <Command __id="950" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2794216" />
  <Command __id="952" _type="InsertStringCommand" date="Mon Feb 08 15:24:25 EST 2021" starttimestamp="1612813070441" timestamp="2794887" timestamp2="2794887">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="954" _type="InsertStringCommand" date="Mon Feb 08 15:24:25 EST 2021" starttimestamp="1612813070441" timestamp="2795018" timestamp2="2795018">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="956" _type="InsertStringCommand" date="Mon Feb 08 15:24:25 EST 2021" starttimestamp="1612813070441" timestamp="2795081" timestamp2="2795081">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="958" _type="PauseCommand" date="Mon Feb 08 15:24:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2796704">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1623]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="959" _type="InsertStringCommand" date="Mon Feb 08 15:24:27 EST 2021" starttimestamp="1612813070441" timestamp="2796709" timestamp2="2796709">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="961" _type="InsertStringCommand" date="Mon Feb 08 15:24:27 EST 2021" starttimestamp="1612813070441" timestamp="2796780" timestamp2="2796780">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="963" _type="InsertStringCommand" date="Mon Feb 08 15:24:27 EST 2021" starttimestamp="1612813070441" timestamp="2796859" timestamp2="2796859">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="965" _type="InsertStringCommand" date="Mon Feb 08 15:24:27 EST 2021" starttimestamp="1612813070441" timestamp="2796973" timestamp2="2796973">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="967" _type="UndoCommand" date="Mon Feb 08 15:24:28 EST 2021" starttimestamp="1612813070441" timestamp="2797669" />
  <Command __id="969" _type="InsertStringCommand" date="Mon Feb 08 15:24:28 EST 2021" starttimestamp="1612813070441" timestamp="2798449" timestamp2="2798449">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="971" _type="InsertStringCommand" date="Mon Feb 08 15:24:29 EST 2021" starttimestamp="1612813070441" timestamp="2798658" timestamp2="2798658">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="972" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2798752" />
  <Command __id="974" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2798863" />
  <Command __id="976" _type="InsertStringCommand" date="Mon Feb 08 15:24:29 EST 2021" starttimestamp="1612813070441" timestamp="2798950" timestamp2="2798950">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="977" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2798988" />
  <Command __id="978" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2799003" />
  <Command __id="980" _type="InsertStringCommand" date="Mon Feb 08 15:24:29 EST 2021" starttimestamp="1612813070441" timestamp="2799116" timestamp2="2799116">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="981" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2799210" />
  <Command __id="982" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2799224" />
  <Command __id="984" _type="InsertStringCommand" date="Mon Feb 08 15:24:29 EST 2021" starttimestamp="1612813070441" timestamp="2799296" timestamp2="2799296">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="985" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2799388" />
  <Command __id="986" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2799402" />
  <Command __id="988" _type="InsertStringCommand" date="Mon Feb 08 15:24:30 EST 2021" starttimestamp="1612813070441" timestamp="2800169" timestamp2="2800169">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="990" _type="InsertStringCommand" date="Mon Feb 08 15:24:31 EST 2021" starttimestamp="1612813070441" timestamp="2800647" timestamp2="2800647">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="992" _type="InsertStringCommand" date="Mon Feb 08 15:24:31 EST 2021" starttimestamp="1612813070441" timestamp="2800699" timestamp2="2800699">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="994" _type="InsertStringCommand" date="Mon Feb 08 15:24:31 EST 2021" starttimestamp="1612813070441" timestamp="2801086" timestamp2="2801086">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="996" _type="InsertStringCommand" date="Mon Feb 08 15:24:31 EST 2021" starttimestamp="1612813070441" timestamp="2801160" timestamp2="2801160">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="997" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2801245" />
  <Command __id="998" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:32 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2801625" />
  <Command __id="1000" _type="InsertStringCommand" date="Mon Feb 08 15:24:32 EST 2021" starttimestamp="1612813070441" timestamp="2801640" timestamp2="2801640">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1002" _type="InsertStringCommand" date="Mon Feb 08 15:24:32 EST 2021" starttimestamp="1612813070441" timestamp="2801780" timestamp2="2801780">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1003" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:32 EST 2021" starttimestamp="1612813070441" timestamp="2802499" />
  <Command __id="1004" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:33 EST 2021" starttimestamp="1612813070441" timestamp="2802646" />
  <Command __id="1005" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:33 EST 2021" starttimestamp="1612813070441" timestamp="2803043" />
  <Command __id="1007" _type="PauseCommand" date="Mon Feb 08 15:24:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2804187">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1144]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1006" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:34 EST 2021" starttimestamp="1612813070441" timestamp="2804187" />
  <Command __id="1009" _type="PauseCommand" date="Mon Feb 08 15:24:36 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2806418">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2231]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1008" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:24:36 EST 2021" starttimestamp="1612813070441" timestamp="2806418" />
  <Command __id="1011" _type="InsertStringCommand" date="Mon Feb 08 15:24:37 EST 2021" starttimestamp="1612813070441" timestamp="2806560" timestamp2="2806560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1013" _type="InsertStringCommand" date="Mon Feb 08 15:24:37 EST 2021" starttimestamp="1612813070441" timestamp="2806828" timestamp2="2806828">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1014" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2806869" />
  <Command __id="1016" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:37 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2807466" />
  <Command __id="1018" _type="InsertStringCommand" date="Mon Feb 08 15:24:37 EST 2021" starttimestamp="1612813070441" timestamp="2807481" timestamp2="2807481">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1020" _type="InsertStringCommand" date="Mon Feb 08 15:24:38 EST 2021" starttimestamp="1612813070441" timestamp="2807666" timestamp2="2807666">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1022" _type="InsertStringCommand" date="Mon Feb 08 15:24:38 EST 2021" starttimestamp="1612813070441" timestamp="2807821" timestamp2="2807821">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1024" _type="InsertStringCommand" date="Mon Feb 08 15:24:38 EST 2021" starttimestamp="1612813070441" timestamp="2807908" timestamp2="2807908">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1026" _type="InsertStringCommand" date="Mon Feb 08 15:24:38 EST 2021" starttimestamp="1612813070441" timestamp="2808357" timestamp2="2808357">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1027" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:38 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2808398" />
  <Command __id="1029" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:39 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2808579" />
  <Command __id="1031" _type="InsertStringCommand" date="Mon Feb 08 15:24:39 EST 2021" starttimestamp="1612813070441" timestamp="2808593" timestamp2="2808593">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1033" _type="InsertStringCommand" date="Mon Feb 08 15:24:39 EST 2021" starttimestamp="1612813070441" timestamp="2808624" timestamp2="2808624">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1034" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:39 EST 2021" starttimestamp="1612813070441" timestamp="2809486" />
  <Command __id="1035" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:40 EST 2021" starttimestamp="1612813070441" timestamp="2809633" />
  <Command __id="1036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:40 EST 2021" starttimestamp="1612813070441" timestamp="2809781" />
  <Command __id="1038" _type="PauseCommand" date="Mon Feb 08 15:24:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2811015">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1234]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1037" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:41 EST 2021" starttimestamp="1612813070441" timestamp="2811015" />
  <Command __id="1039" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:24:41 EST 2021" starttimestamp="1612813070441" timestamp="2811335" />
  <Command __id="1040" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:42 EST 2021" starttimestamp="1612813070441" timestamp="2811705" />
  <Command __id="1041" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:42 EST 2021" starttimestamp="1612813070441" timestamp="2811850" />
  <Command __id="1042" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:24:42 EST 2021" starttimestamp="1612813070441" timestamp="2812046" />
  <Command __id="1043" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:24:42 EST 2021" starttimestamp="1612813070441" timestamp="2812539" />
  <Command __id="1045" _type="InsertStringCommand" date="Mon Feb 08 15:24:43 EST 2021" starttimestamp="1612813070441" timestamp="2812691" timestamp2="2812691">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1047" _type="PauseCommand" date="Mon Feb 08 15:24:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2814302">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1611]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1048" _type="InsertStringCommand" date="Mon Feb 08 15:24:44 EST 2021" starttimestamp="1612813070441" timestamp="2814317" timestamp2="2814317">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1050" _type="InsertStringCommand" date="Mon Feb 08 15:24:44 EST 2021" starttimestamp="1612813070441" timestamp="2814357" timestamp2="2814357">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1052" _type="InsertStringCommand" date="Mon Feb 08 15:24:44 EST 2021" starttimestamp="1612813070441" timestamp="2814403" timestamp2="2814403">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1053" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:24:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2814446" />
  <Command __id="1054" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:24:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2815069" />
  <Command __id="1056" _type="InsertStringCommand" date="Mon Feb 08 15:24:45 EST 2021" starttimestamp="1612813070441" timestamp="2815081" timestamp2="2815081">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1058" _type="InsertStringCommand" date="Mon Feb 08 15:24:45 EST 2021" starttimestamp="1612813070441" timestamp="2815409" timestamp2="2815409">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1060" _type="InsertStringCommand" date="Mon Feb 08 15:24:46 EST 2021" starttimestamp="1612813070441" timestamp="2815577" timestamp2="2815577">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1062" _type="InsertStringCommand" date="Mon Feb 08 15:24:46 EST 2021" starttimestamp="1612813070441" timestamp="2815614" timestamp2="2815614">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1064" _type="PauseCommand" date="Mon Feb 08 15:24:49 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2819001">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3387]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1063" _type="SelectTextCommand" caretOffset="5323" date="Mon Feb 08 15:24:49 EST 2021" end="5323" start="5275" starttimestamp="1612813070441" timestamp="2819001" />
  <Command __id="1065" _type="CopyCommand" date="Mon Feb 08 15:24:49 EST 2021" starttimestamp="1612813070441" timestamp="2819300" />
  <Command __id="1066" _type="MoveCaretCommand" caretOffset="5707" date="Mon Feb 08 15:24:50 EST 2021" docOffset="25969" starttimestamp="1612813070441" timestamp="2820031" />
  <Command __id="1068" _type="PasteCommand" date="Mon Feb 08 15:24:50 EST 2021" starttimestamp="1612813070441" timestamp="2820202" />
  <Command __id="1070" _type="PauseCommand" date="Mon Feb 08 15:25:01 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2831415">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[11213]]></rest>
    <prev><![CDATA[PasteCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1069" _type="MoveCaretCommand" caretOffset="5791" date="Mon Feb 08 15:25:01 EST 2021" docOffset="26053" starttimestamp="1612813070441" timestamp="2831415" />
  <Command __id="1072" _type="PauseCommand" date="Mon Feb 08 15:25:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2833116">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1701]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1073" _type="InsertStringCommand" date="Mon Feb 08 15:25:03 EST 2021" starttimestamp="1612813070441" timestamp="2833128" timestamp2="2833128">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1075" _type="InsertStringCommand" date="Mon Feb 08 15:25:03 EST 2021" starttimestamp="1612813070441" timestamp="2833429" timestamp2="2833429">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1076" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:25:03 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2833472" />
  <Command __id="1078" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:25:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2833642" />
  <Command __id="1080" _type="InsertStringCommand" date="Mon Feb 08 15:25:04 EST 2021" starttimestamp="1612813070441" timestamp="2833749" timestamp2="2833749">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="889" _type="Insert" date="Mon Feb 08 15:24:16 EST 2021" docASTNodeCount="4545" docActiveCodeLength="26207" docExpressionCount="3117" docLength="26559" length="1" offset="25930" starttimestamp="1612813070441" timestamp="2785609">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="893" _type="Insert" date="Mon Feb 08 15:24:16 EST 2021" docASTNodeCount="4545" docActiveCodeLength="26208" docExpressionCount="3117" docLength="26560" length="1" offset="25918" starttimestamp="1612813070441" timestamp="2786303">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="900" _type="Delete" date="Mon Feb 08 15:24:18 EST 2021" docASTNodeCount="4545" docActiveCodeLength="26206" docExpressionCount="3117" docLength="26558" endLine="742" length="2" offset="25916" repeat="2" startLine="742" starttimestamp="1612813070441" timestamp="2788144" timestamp2="2788265">
    <text><![CDATA[es]]></text>
  </DocumentChange>
  <DocumentChange __id="904" _type="Insert" date="Mon Feb 08 15:24:18 EST 2021" docASTNodeCount="4543" docActiveCodeLength="26208" docExpressionCount="3116" docLength="26560" length="2" offset="25916" repeat="2" starttimestamp="1612813070441" timestamp="2788343" timestamp2="2788376">
    <text><![CDATA[se]]></text>
  </DocumentChange>
  <DocumentChange __id="922" _type="Insert" date="Mon Feb 08 15:24:22 EST 2021" docASTNodeCount="4545" docActiveCodeLength="26215" docExpressionCount="3117" docLength="26567" length="7" offset="25585" repeat="4" starttimestamp="1612813070441" timestamp="2792008" timestamp2="2792586">
    <text><![CDATA[
		boo]]></text>
  </DocumentChange>
  <DocumentChange __id="930" _type="Replace" date="Mon Feb 08 15:24:23 EST 2021" docASTNodeCount="4547" docActiveCodeLength="26219" docExpressionCount="3117" docLength="26571" endLine="736" insertionLength="7" int_docASTNodeCount="4543" int_docActiveCodeLength="26212" int_docExpressionCount="3116" int_docLength="26564" length="3" offset="25589" startLine="736" starttimestamp="1612813070441" timestamp="2792808">
    <deletedText><![CDATA[boo]]></deletedText>
    <insertedText><![CDATA[boolean]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="932" _type="Insert" date="Mon Feb 08 15:24:23 EST 2021" docASTNodeCount="4548" docActiveCodeLength="26237" docExpressionCount="3118" docLength="26589" length="18" offset="25596" repeat="13" starttimestamp="1612813070441" timestamp="2792953" timestamp2="2796968">
    <text><![CDATA[ added = fa
				;]]></text>
  </DocumentChange>
  <DocumentChange __id="966" _type="Delete" date="Mon Feb 08 15:24:28 EST 2021" docASTNodeCount="4547" docActiveCodeLength="26219" docExpressionCount="3117" docLength="26571" endLine="737" length="18" offset="25596" startLine="736" starttimestamp="1612813070441" timestamp="2797656">
    <text><![CDATA[ added = fa
				;]]></text>
  </DocumentChange>
  <DocumentChange __id="968" _type="Insert" date="Mon Feb 08 15:24:28 EST 2021" docASTNodeCount="4548" docActiveCodeLength="26230" docExpressionCount="3118" docLength="26582" length="11" offset="25596" repeat="11" starttimestamp="1612813070441" timestamp="2798443" timestamp2="2801156">
    <text><![CDATA[ added = fa]]></text>
  </DocumentChange>
  <DocumentChange __id="999" _type="Replace" date="Mon Feb 08 15:24:32 EST 2021" docASTNodeCount="4548" docActiveCodeLength="26233" docExpressionCount="3118" docLength="26585" endLine="736" insertionLength="5" int_docASTNodeCount="4547" int_docActiveCodeLength="26228" int_docExpressionCount="3117" int_docLength="26580" length="2" offset="25605" startLine="736" starttimestamp="1612813070441" timestamp="2801632">
    <deletedText><![CDATA[fa]]></deletedText>
    <insertedText><![CDATA[false]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1001" _type="Insert" date="Mon Feb 08 15:24:32 EST 2021" docASTNodeCount="4548" docActiveCodeLength="26234" docExpressionCount="3118" docLength="26586" length="1" offset="25610" starttimestamp="1612813070441" timestamp="2801774">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1010" _type="Insert" date="Mon Feb 08 15:24:36 EST 2021" docASTNodeCount="4550" docActiveCodeLength="26241" docExpressionCount="3119" docLength="26593" length="7" offset="25848" repeat="3" starttimestamp="1612813070441" timestamp="2806550" timestamp2="2807066">
    <text><![CDATA[
			ad]]></text>
  </DocumentChange>
  <DocumentChange __id="1017" _type="Replace" date="Mon Feb 08 15:24:37 EST 2021" docASTNodeCount="4550" docActiveCodeLength="26244" docExpressionCount="3119" docLength="26596" endLine="741" insertionLength="5" int_docASTNodeCount="4548" int_docActiveCodeLength="26239" int_docExpressionCount="3118" int_docLength="26591" length="2" offset="25853" startLine="741" starttimestamp="1612813070441" timestamp="2807473">
    <deletedText><![CDATA[ad]]></deletedText>
    <insertedText><![CDATA[added]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1019" _type="Insert" date="Mon Feb 08 15:24:38 EST 2021" docASTNodeCount="4552" docActiveCodeLength="26249" docExpressionCount="3121" docLength="26601" length="5" offset="25858" repeat="5" starttimestamp="1612813070441" timestamp="2807660" timestamp2="2808564">
    <text><![CDATA[ = tr]]></text>
  </DocumentChange>
  <DocumentChange __id="1030" _type="Replace" date="Mon Feb 08 15:24:39 EST 2021" docASTNodeCount="4552" docActiveCodeLength="26251" docExpressionCount="3121" docLength="26603" endLine="741" insertionLength="4" int_docASTNodeCount="4550" int_docActiveCodeLength="26247" int_docExpressionCount="3119" int_docLength="26599" length="2" offset="25861" startLine="741" starttimestamp="1612813070441" timestamp="2808585">
    <deletedText><![CDATA[tr]]></deletedText>
    <insertedText><![CDATA[true]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1032" _type="Insert" date="Mon Feb 08 15:24:39 EST 2021" docASTNodeCount="4552" docActiveCodeLength="26252" docExpressionCount="3121" docLength="26604" length="1" offset="25865" starttimestamp="1612813070441" timestamp="2808619">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1044" _type="Insert" date="Mon Feb 08 15:24:43 EST 2021" docASTNodeCount="4554" docActiveCodeLength="26261" docExpressionCount="3122" docLength="26613" length="9" offset="25951" repeat="4" starttimestamp="1612813070441" timestamp="2812680" timestamp2="2814398">
    <text><![CDATA[
				tim]]></text>
  </DocumentChange>
  <DocumentChange __id="1055" _type="Replace" date="Mon Feb 08 15:24:45 EST 2021" docASTNodeCount="4554" docActiveCodeLength="26267" docExpressionCount="3122" docLength="26619" endLine="744" insertionLength="9" int_docASTNodeCount="4552" int_docActiveCodeLength="26258" int_docExpressionCount="3121" int_docLength="26610" length="3" offset="25957" startLine="744" starttimestamp="1612813070441" timestamp="2815075">
    <deletedText><![CDATA[tim]]></deletedText>
    <insertedText><![CDATA[timestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1057" _type="Insert" date="Mon Feb 08 15:24:45 EST 2021" docASTNodeCount="4552" docActiveCodeLength="26270" docExpressionCount="3121" docLength="26622" length="3" offset="25966" repeat="3" starttimestamp="1612813070441" timestamp="2815393" timestamp2="2815610">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1067" _type="Insert" date="Mon Feb 08 15:24:50 EST 2021" docASTNodeCount="4560" docActiveCodeLength="26318" docExpressionCount="3128" docLength="26670" length="48" offset="25969" starttimestamp="1612813070441" timestamp="2820195">
    <text><![CDATA[webCommand.getStartTimestamp() - startTimestamp;]]></text>
  </DocumentChange>
  <DocumentChange __id="1071" _type="Insert" date="Mon Feb 08 15:25:03 EST 2021" docASTNodeCount="4560" docActiveCodeLength="26324" docExpressionCount="3128" docLength="26676" length="6" offset="26053" repeat="3" starttimestamp="1612813070441" timestamp="2833116" timestamp2="2833628">
    <text><![CDATA[
		if]]></text>
  </DocumentChange>
  <DocumentChange __id="1079" _type="Replace" date="Mon Feb 08 15:25:04 EST 2021" docASTNodeCount="4563" docActiveCodeLength="26344" docExpressionCount="3129" docLength="26696" endLine="749" insertionLength="22" int_docASTNodeCount="4560" int_docActiveCodeLength="26322" int_docExpressionCount="3128" int_docLength="26674" length="2" offset="26057" startLine="749" starttimestamp="1612813070441" timestamp="2833663">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (added) {
			
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1083" _type="Insert" date="Mon Feb 08 15:25:10 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26360" docExpressionCount="3132" docLength="26712" length="16" offset="25906" repeat="11" starttimestamp="1612813070441" timestamp="2840364" timestamp2="2842223">
    <text><![CDATA[
				last = web]]></text>
  </DocumentChange>
  <DocumentChange __id="1105" _type="Replace" date="Mon Feb 08 15:25:12 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26367" docExpressionCount="3132" docLength="26719" endLine="743" insertionLength="10" int_docASTNodeCount="4565" int_docActiveCodeLength="26357" int_docExpressionCount="3131" int_docLength="26709" length="3" offset="25919" startLine="743" starttimestamp="1612813070441" timestamp="2842359">
    <deletedText><![CDATA[web]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <Command __id="1082" _type="PauseCommand" date="Mon Feb 08 15:25:09 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2839377">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[5628]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1081" _type="MoveCaretCommand" caretOffset="5644" date="Mon Feb 08 15:25:09 EST 2021" docOffset="25906" starttimestamp="1612813070441" timestamp="2839377" />
  <Command __id="1084" _type="InsertStringCommand" date="Mon Feb 08 15:25:10 EST 2021" starttimestamp="1612813070441" timestamp="2840378" timestamp2="2840378">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1086" _type="InsertStringCommand" date="Mon Feb 08 15:25:11 EST 2021" starttimestamp="1612813070441" timestamp="2840753" timestamp2="2840753">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1087" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:25:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2840796" />
  <Command __id="1091" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:25:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2841329" />
  <Command __id="1092" _type="InsertStringCommand" date="Mon Feb 08 15:25:11 EST 2021" starttimestamp="1612813070441" timestamp="2841331" timestamp2="2841331">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1094" _type="InsertStringCommand" date="Mon Feb 08 15:25:11 EST 2021" starttimestamp="1612813070441" timestamp="2841488" timestamp2="2841488">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1096" _type="InsertStringCommand" date="Mon Feb 08 15:25:12 EST 2021" starttimestamp="1612813070441" timestamp="2841625" timestamp2="2841625">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1098" _type="InsertStringCommand" date="Mon Feb 08 15:25:12 EST 2021" starttimestamp="1612813070441" timestamp="2841699" timestamp2="2841699">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1100" _type="InsertStringCommand" date="Mon Feb 08 15:25:12 EST 2021" starttimestamp="1612813070441" timestamp="2841946" timestamp2="2841946">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1101" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:25:12 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2841988" />
  <Command __id="1104" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:25:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2842353" />
  <Command __id="1106" _type="InsertStringCommand" date="Mon Feb 08 15:25:12 EST 2021" starttimestamp="1612813070441" timestamp="2842366" timestamp2="2842366">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1108" _type="InsertStringCommand" date="Mon Feb 08 15:25:13 EST 2021" starttimestamp="1612813070441" timestamp="2842776" timestamp2="2842776">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1110" _type="PauseCommand" date="Mon Feb 08 15:25:24 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="2854380">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[11604]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1109" _type="MoveCaretCommand" caretOffset="5836" date="Mon Feb 08 15:25:24 EST 2021" docOffset="26098" starttimestamp="1612813070441" timestamp="2854380" />
  <Command __id="1112" _type="PauseCommand" date="Mon Feb 08 15:25:29 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2858950">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4570]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1113" _type="InsertStringCommand" date="Mon Feb 08 15:25:29 EST 2021" starttimestamp="1612813070441" timestamp="2858956" timestamp2="2858956">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1114" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:25:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2858998" />
  <Command __id="1118" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:25:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2860026" />
  <Command __id="1119" _type="InsertStringCommand" date="Mon Feb 08 15:25:30 EST 2021" starttimestamp="1612813070441" timestamp="2860031" timestamp2="2860031">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1121" _type="InsertStringCommand" date="Mon Feb 08 15:25:30 EST 2021" starttimestamp="1612813070441" timestamp="2860483" timestamp2="2860483">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1123" _type="InsertStringCommand" date="Mon Feb 08 15:25:31 EST 2021" starttimestamp="1612813070441" timestamp="2860595" timestamp2="2860595">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1125" _type="InsertStringCommand" date="Mon Feb 08 15:25:31 EST 2021" starttimestamp="1612813070441" timestamp="2860663" timestamp2="2860663">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1127" _type="PauseCommand" date="Mon Feb 08 15:25:32 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2862494">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1831]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1128" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:25:32 EST 2021" starttimestamp="1612813070441" timestamp="2862498" />
  <Command __id="1130" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:25:33 EST 2021" starttimestamp="1612813070441" timestamp="2862641" />
  <Command __id="1132" _type="PauseCommand" date="Mon Feb 08 15:25:35 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2865251">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2610]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1131" _type="MoveCaretCommand" caretOffset="5902" date="Mon Feb 08 15:25:35 EST 2021" docOffset="26164" starttimestamp="1612813070441" timestamp="2865251" />
  <Command __id="1133" _type="SelectTextCommand" caretOffset="5905" date="Mon Feb 08 15:25:35 EST 2021" end="5905" start="5885" starttimestamp="1612813070441" timestamp="2865401" />
  <Command __id="1134" _type="SelectTextCommand" caretOffset="5938" date="Mon Feb 08 15:25:36 EST 2021" end="5938" start="5881" starttimestamp="1612813070441" timestamp="2865560" />
  <Command __id="1135" _type="CopyCommand" date="Mon Feb 08 15:25:36 EST 2021" starttimestamp="1612813070441" timestamp="2865798" />
  <Command __id="1136" _type="MoveCaretCommand" caretOffset="5836" date="Mon Feb 08 15:25:36 EST 2021" docOffset="26098" starttimestamp="1612813070441" timestamp="2866380" />
  <Command __id="1138" _type="PasteCommand" date="Mon Feb 08 15:25:37 EST 2021" starttimestamp="1612813070441" timestamp="2866576" />
  <Command __id="1140" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:25:37 EST 2021" starttimestamp="1612813070441" timestamp="2866925" />
  <Command __id="1141" _type="MoveCaretCommand" caretOffset="5846" date="Mon Feb 08 15:25:37 EST 2021" docOffset="26108" starttimestamp="1612813070441" timestamp="2867323" />
  <Command __id="1143" _type="PauseCommand" date="Mon Feb 08 15:25:38 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2868395">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1072]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1144" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:25:38 EST 2021" starttimestamp="1612813070441" timestamp="2868423" />
  <Command __id="1146" _type="PauseCommand" date="Mon Feb 08 15:25:40 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2869999">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1576]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1145" _type="MoveCaretCommand" caretOffset="5878" date="Mon Feb 08 15:25:40 EST 2021" docOffset="26140" starttimestamp="1612813070441" timestamp="2869999" />
  <Command __id="1148" _type="PauseCommand" date="Mon Feb 08 15:25:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2871033">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1034]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1147" _type="MoveCaretCommand" caretOffset="5878" date="Mon Feb 08 15:25:41 EST 2021" docOffset="26140" starttimestamp="1612813070441" timestamp="2871033" />
  <Command __id="1149" _type="SelectTextCommand" caretOffset="5880" date="Mon Feb 08 15:25:41 EST 2021" end="5880" start="5870" starttimestamp="1612813070441" timestamp="2871212" />
  <Command __id="1151" _type="PauseCommand" date="Mon Feb 08 15:25:48 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="2878371">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7159]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1150" _type="MoveCaretCommand" caretOffset="5892" date="Mon Feb 08 15:25:48 EST 2021" docOffset="26154" starttimestamp="1612813070441" timestamp="2878371" />
  <Command __id="1153" _type="PauseCommand" date="Mon Feb 08 15:25:50 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2880199">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1828]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1152" _type="MoveCaretCommand" caretOffset="5887" date="Mon Feb 08 15:25:50 EST 2021" docOffset="26149" starttimestamp="1612813070441" timestamp="2880199" />
  <Command __id="1155" _type="PauseCommand" date="Mon Feb 08 15:25:55 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2884996">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4797]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1156" _type="InsertStringCommand" date="Mon Feb 08 15:25:55 EST 2021" starttimestamp="1612813070441" timestamp="2885006" timestamp2="2885006">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1158" _type="InsertStringCommand" date="Mon Feb 08 15:25:55 EST 2021" starttimestamp="1612813070441" timestamp="2885199" timestamp2="2885199">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1159" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:25:55 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2885240" />
  <Command __id="1162" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:25:55 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2885435" />
  <Command __id="1164" _type="InsertStringCommand" date="Mon Feb 08 15:25:55 EST 2021" starttimestamp="1612813070441" timestamp="2885450" timestamp2="2885450">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1166" _type="InsertStringCommand" date="Mon Feb 08 15:25:55 EST 2021" starttimestamp="1612813070441" timestamp="2885536" timestamp2="2885536">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1168" _type="InsertStringCommand" date="Mon Feb 08 15:25:56 EST 2021" starttimestamp="1612813070441" timestamp="2885826" timestamp2="2885826">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1170" _type="InsertStringCommand" date="Mon Feb 08 15:25:56 EST 2021" starttimestamp="1612813070441" timestamp="2885874" timestamp2="2885874">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1171" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:25:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2885914" />
  <Command __id="1172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:25:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2886033" />
  <Command __id="1174" _type="InsertStringCommand" date="Mon Feb 08 15:25:56 EST 2021" starttimestamp="1612813070441" timestamp="2886046" timestamp2="2886046">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1176" _type="InsertStringCommand" date="Mon Feb 08 15:25:56 EST 2021" starttimestamp="1612813070441" timestamp="2886411" timestamp2="2886411">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:25:57 EST 2021" starttimestamp="1612813070441" timestamp="2886982" />
  <Command __id="1178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:25:57 EST 2021" starttimestamp="1612813070441" timestamp="2887131" />
  <Command __id="1179" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:25:57 EST 2021" starttimestamp="1612813070441" timestamp="2887247" />
  <Command __id="1180" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:25:57 EST 2021" starttimestamp="1612813070441" timestamp="2887514" />
  <Command __id="1181" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:25:58 EST 2021" starttimestamp="1612813070441" timestamp="2887731" />
  <Command __id="1182" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:25:58 EST 2021" starttimestamp="1612813070441" timestamp="2888029" />
  <Command __id="1184" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:25:58 EST 2021" starttimestamp="1612813070441" timestamp="2888508" />
  <Command __id="1186" _type="PauseCommand" date="Mon Feb 08 15:26:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2889942">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1434]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:00 EST 2021" starttimestamp="1612813070441" timestamp="2889942" />
  <Command __id="1187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:00 EST 2021" starttimestamp="1612813070441" timestamp="2890089" />
  <Command __id="1188" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:00 EST 2021" starttimestamp="1612813070441" timestamp="2890234" />
  <Command __id="1189" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:00 EST 2021" starttimestamp="1612813070441" timestamp="2890345" />
  <Command __id="1190" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:00 EST 2021" starttimestamp="1612813070441" timestamp="2890492" />
  <Command __id="1191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:01 EST 2021" starttimestamp="1612813070441" timestamp="2890660" />
  <Command __id="1192" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:26:01 EST 2021" starttimestamp="1612813070441" timestamp="2890946" />
  <Command __id="1193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:26:01 EST 2021" starttimestamp="1612813070441" timestamp="2891218" />
  <Command __id="1194" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:26:01 EST 2021" starttimestamp="1612813070441" timestamp="2891553" />
  <Command __id="1195" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 15:26:02 EST 2021" starttimestamp="1612813070441" timestamp="2891741" />
  <Command __id="1197" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:26:02 EST 2021" starttimestamp="1612813070441" timestamp="2892280" />
  <Command __id="1199" _type="InsertStringCommand" date="Mon Feb 08 15:26:03 EST 2021" starttimestamp="1612813070441" timestamp="2892690" timestamp2="2892690">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1200" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:26:03 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2892731" />
  <Command __id="1203" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:26:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2893116" />
  <Command __id="1205" _type="InsertStringCommand" date="Mon Feb 08 15:26:03 EST 2021" starttimestamp="1612813070441" timestamp="2893129" timestamp2="2893129">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1206" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:26:04 EST 2021" starttimestamp="1612813070441" timestamp="2893602" />
  <Command __id="1207" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:26:04 EST 2021" starttimestamp="1612813070441" timestamp="2893738" />
  <Command __id="1208" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:26:04 EST 2021" starttimestamp="1612813070441" timestamp="2893906" />
  <Command __id="1209" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:26:04 EST 2021" starttimestamp="1612813070441" timestamp="2894054" />
  <Command __id="1210" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:26:04 EST 2021" starttimestamp="1612813070441" timestamp="2894356" />
  <Command __id="1211" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:26:05 EST 2021" starttimestamp="1612813070441" timestamp="2894657" />
  <Command __id="1212" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:26:05 EST 2021" starttimestamp="1612813070441" timestamp="2894801" />
  <Command __id="1213" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:26:05 EST 2021" starttimestamp="1612813070441" timestamp="2895221" />
  <Command __id="1215" _type="PauseCommand" date="Mon Feb 08 15:26:08 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="2897759">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2538]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1216" _type="InsertStringCommand" date="Mon Feb 08 15:26:08 EST 2021" starttimestamp="1612813070441" timestamp="2897768" timestamp2="2897768">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1217" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:26:08 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="2897807" />
  <Command __id="1220" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:26:08 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="2898139" />
  <Command __id="1222" _type="InsertStringCommand" date="Mon Feb 08 15:26:08 EST 2021" starttimestamp="1612813070441" timestamp="2898152" timestamp2="2898152">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1224" _type="PauseCommand" date="Mon Feb 08 15:26:10 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="2900064">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1912]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1223" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:10 EST 2021" starttimestamp="1612813070441" timestamp="2900064" />
  <Command __id="1225" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:10 EST 2021" starttimestamp="1612813070441" timestamp="2900183" />
  <Command __id="1226" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:10 EST 2021" starttimestamp="1612813070441" timestamp="2900333" />
  <Command __id="1227" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:10 EST 2021" starttimestamp="1612813070441" timestamp="2900459" />
  <Command __id="1228" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:26:11 EST 2021" starttimestamp="1612813070441" timestamp="2900755" />
  <Command __id="1230" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:26:11 EST 2021" starttimestamp="1612813070441" timestamp="2901157" />
  <Command __id="1231" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:26:12 EST 2021" starttimestamp="1612813070441" timestamp="2901989" />
  <Command __id="1233" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:26:12 EST 2021" starttimestamp="1612813070441" timestamp="2902365" />
  <Command __id="1235" _type="PauseCommand" date="Mon Feb 08 15:27:46 EST 2021" range="1m-2m" starttimestamp="1612813070441" timestamp="2995952">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[93587]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1234" _type="MoveCaretCommand" caretOffset="2304" date="Mon Feb 08 15:27:46 EST 2021" docOffset="3827" starttimestamp="1612813070441" timestamp="2995952" />
  <Command __id="1237" _type="PauseCommand" date="Mon Feb 08 15:28:30 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="3040068">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[44116]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1236" _type="MoveCaretCommand" caretOffset="5877" date="Mon Feb 08 15:28:30 EST 2021" docOffset="26139" starttimestamp="1612813070441" timestamp="3040068" />
  <Command __id="1238" _type="SelectTextCommand" caretOffset="5880" date="Mon Feb 08 15:28:30 EST 2021" end="5880" start="5870" starttimestamp="1612813070441" timestamp="3040241" />
  <Command __id="1240" _type="PauseCommand" date="Mon Feb 08 15:28:31 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3041483">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1242]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1241" _type="InsertStringCommand" date="Mon Feb 08 15:28:31 EST 2021" starttimestamp="1612813070441" timestamp="3041489" timestamp2="3041489">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1242" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:28:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3041527" />
  <Command __id="1245" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:28:32 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3042448" />
  <Command __id="1247" _type="InsertStringCommand" date="Mon Feb 08 15:28:32 EST 2021" starttimestamp="1612813070441" timestamp="3042463" timestamp2="3042463">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1249" _type="PauseCommand" date="Mon Feb 08 15:28:36 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3046442">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3979]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1248" _type="MoveCaretCommand" caretOffset="5881" date="Mon Feb 08 15:28:36 EST 2021" docOffset="26143" starttimestamp="1612813070441" timestamp="3046442" />
  <DocumentChange __id="1107" _type="Insert" date="Mon Feb 08 15:25:13 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26368" docExpressionCount="3132" docLength="26720" length="1" offset="25929" starttimestamp="1612813070441" timestamp="2842763">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1111" _type="Insert" date="Mon Feb 08 15:25:29 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26375" docExpressionCount="3132" docLength="26727" length="7" offset="26098" repeat="7" starttimestamp="1612813070441" timestamp="2858950" timestamp2="2860657">
    <text><![CDATA[last = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1126" _type="Delete" date="Mon Feb 08 15:25:32 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26368" docExpressionCount="3132" docLength="26720" endLine="751" length="7" offset="26098" repeat="2" startLine="751" starttimestamp="1612813070441" timestamp="2862494" timestamp2="2862638">
    <text><![CDATA[last = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1137" _type="Replace" date="Mon Feb 08 15:25:37 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26367" docExpressionCount="3132" docLength="26775" endLine="751" insertionLength="58" int_docASTNodeCount="4567" int_docActiveCodeLength="26365" int_docExpressionCount="3132" int_docLength="26717" length="3" offset="26095" startLine="751" starttimestamp="1612813070441" timestamp="2866567">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[//			maybeAddPauseCommand(newCommands, webCommand, cur);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1139" _type="Delete" date="Mon Feb 08 15:25:37 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26365" docExpressionCount="3132" docLength="26773" endLine="753" length="2" offset="26153" startLine="752" starttimestamp="1612813070441" timestamp="2866923">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="1142" _type="Delete" date="Mon Feb 08 15:25:38 EST 2021" docASTNodeCount="4573" docActiveCodeLength="26419" docExpressionCount="3137" docLength="26771" endLine="751" length="2" offset="26095" startLine="751" starttimestamp="1612813070441" timestamp="2868395">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1154" _type="Insert" date="Mon Feb 08 15:25:55 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26427" docExpressionCount="3138" docLength="26779" length="8" offset="26149" repeat="4" starttimestamp="1612813070441" timestamp="2884996" timestamp2="2885403">
    <text><![CDATA[
			ret]]></text>
  </DocumentChange>
  <DocumentChange __id="1163" _type="Replace" date="Mon Feb 08 15:25:55 EST 2021" docASTNodeCount="4574" docActiveCodeLength="26430" docExpressionCount="3137" docLength="26782" endLine="752" insertionLength="6" int_docASTNodeCount="4573" int_docActiveCodeLength="26424" int_docExpressionCount="3137" int_docLength="26776" length="3" offset="26154" startLine="752" starttimestamp="1612813070441" timestamp="2885440">
    <deletedText><![CDATA[ret]]></deletedText>
    <insertedText><![CDATA[return]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1165" _type="Insert" date="Mon Feb 08 15:25:55 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26433" docExpressionCount="3138" docLength="26785" length="3" offset="26160" repeat="3" starttimestamp="1612813070441" timestamp="2885529" timestamp2="2885866">
    <text><![CDATA[ tr]]></text>
  </DocumentChange>
  <DocumentChange __id="1173" _type="Replace" date="Mon Feb 08 15:25:56 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26435" docExpressionCount="3138" docLength="26787" endLine="752" insertionLength="4" int_docASTNodeCount="4574" int_docActiveCodeLength="26431" int_docExpressionCount="3137" int_docLength="26783" length="2" offset="26161" startLine="752" starttimestamp="1612813070441" timestamp="2886039">
    <deletedText><![CDATA[tr]]></deletedText>
    <insertedText><![CDATA[true]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1175" _type="Insert" date="Mon Feb 08 15:25:56 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26436" docExpressionCount="3138" docLength="26788" length="1" offset="26165" starttimestamp="1612813070441" timestamp="2886405">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1183" _type="Delete" date="Mon Feb 08 15:25:58 EST 2021" docASTNodeCount="4574" docActiveCodeLength="26432" docExpressionCount="3137" docLength="26784" endLine="757" length="4" offset="26277" startLine="757" starttimestamp="1612813070441" timestamp="2888504">
    <text><![CDATA[true]]></text>
  </DocumentChange>
  <DocumentChange __id="1196" _type="Delete" date="Mon Feb 08 15:26:02 EST 2021" docASTNodeCount="4573" docActiveCodeLength="26428" docExpressionCount="3136" docLength="26780" endLine="752" length="4" offset="26161" startLine="752" starttimestamp="1612813070441" timestamp="2892277">
    <text><![CDATA[true]]></text>
  </DocumentChange>
  <DocumentChange __id="1198" _type="Insert" date="Mon Feb 08 15:26:03 EST 2021" docASTNodeCount="4574" docActiveCodeLength="26431" docExpressionCount="3137" docLength="26783" length="3" offset="26161" repeat="3" starttimestamp="1612813070441" timestamp="2892683" timestamp2="2893030">
    <text><![CDATA[add]]></text>
  </DocumentChange>
  <DocumentChange __id="1204" _type="Replace" date="Mon Feb 08 15:26:03 EST 2021" docASTNodeCount="4574" docActiveCodeLength="26433" docExpressionCount="3137" docLength="26785" endLine="752" insertionLength="5" int_docASTNodeCount="4573" int_docActiveCodeLength="26428" int_docExpressionCount="3136" int_docLength="26780" length="3" offset="26161" startLine="752" starttimestamp="1612813070441" timestamp="2893122">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[added]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1214" _type="Insert" date="Mon Feb 08 15:26:08 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26436" docExpressionCount="3138" docLength="26788" length="3" offset="26278" repeat="3" starttimestamp="1612813070441" timestamp="2897759" timestamp2="2898031">
    <text><![CDATA[add]]></text>
  </DocumentChange>
  <DocumentChange __id="1221" _type="Replace" date="Mon Feb 08 15:26:08 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26438" docExpressionCount="3138" docLength="26790" endLine="757" insertionLength="5" int_docASTNodeCount="4574" int_docActiveCodeLength="26433" int_docExpressionCount="3137" int_docLength="26785" length="3" offset="26278" startLine="757" starttimestamp="1612813070441" timestamp="2898144">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[added]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1229" _type="Delete" date="Mon Feb 08 15:26:11 EST 2021" docASTNodeCount="4573" docActiveCodeLength="26420" docExpressionCount="3137" docLength="26772" endLine="753" length="18" offset="26151" startLine="752" starttimestamp="1612813070441" timestamp="2901154">
    <text><![CDATA[			return added;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1232" _type="Delete" date="Mon Feb 08 15:26:12 EST 2021" docASTNodeCount="4573" docActiveCodeLength="26416" docExpressionCount="3137" docLength="26768" endLine="754" length="4" offset="26156" startLine="753" starttimestamp="1612813070441" timestamp="2902363">
    <text><![CDATA[		
]]></text>
  </DocumentChange>
  <DocumentChange __id="1239" _type="Replace" date="Mon Feb 08 15:28:31 EST 2021" docASTNodeCount="4573" docActiveCodeLength="26407" docExpressionCount="3137" docLength="26759" endLine="751" insertionLength="1" int_docASTNodeCount="4572" int_docActiveCodeLength="26406" int_docExpressionCount="3136" int_docLength="26758" length="10" offset="26132" startLine="751" starttimestamp="1612813070441" timestamp="3041483">
    <deletedText><![CDATA[webCommand]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1243" _type="Insert" date="Mon Feb 08 15:28:32 EST 2021" docASTNodeCount="4573" docActiveCodeLength="26409" docExpressionCount="3137" docLength="26761" length="2" offset="26133" repeat="2" starttimestamp="1612813070441" timestamp="3041829" timestamp2="3041999">
    <text><![CDATA[as]]></text>
  </DocumentChange>
  <DocumentChange __id="1246" _type="Replace" date="Mon Feb 08 15:28:32 EST 2021" docASTNodeCount="4573" docActiveCodeLength="26410" docExpressionCount="3137" docLength="26762" endLine="751" insertionLength="4" int_docASTNodeCount="4572" int_docActiveCodeLength="26406" int_docExpressionCount="3136" int_docLength="26758" length="3" offset="26132" startLine="751" starttimestamp="1612813070441" timestamp="3042454">
    <deletedText><![CDATA[las]]></deletedText>
    <insertedText><![CDATA[last]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1250" _type="Insert" date="Mon Feb 08 15:28:40 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26418" docExpressionCount="3138" docLength="26770" length="8" offset="26143" repeat="4" starttimestamp="1612813070441" timestamp="3049928" timestamp2="3050433">
    <text><![CDATA[
			ret]]></text>
  </DocumentChange>
  <DocumentChange __id="1259" _type="Replace" date="Mon Feb 08 15:28:40 EST 2021" docASTNodeCount="4574" docActiveCodeLength="26421" docExpressionCount="3137" docLength="26773" endLine="752" insertionLength="6" int_docASTNodeCount="4573" int_docActiveCodeLength="26415" int_docExpressionCount="3137" int_docLength="26767" length="3" offset="26148" startLine="752" starttimestamp="1612813070441" timestamp="3050487">
    <deletedText><![CDATA[ret]]></deletedText>
    <insertedText><![CDATA[return]]></insertedText>
  </DocumentChange>
  <Command __id="1251" _type="PauseCommand" date="Mon Feb 08 15:28:40 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3049928">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3486]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1252" _type="InsertStringCommand" date="Mon Feb 08 15:28:40 EST 2021" starttimestamp="1612813070441" timestamp="3049939" timestamp2="3049939">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1254" _type="InsertStringCommand" date="Mon Feb 08 15:28:40 EST 2021" starttimestamp="1612813070441" timestamp="3050224" timestamp2="3050224">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1255" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:28:40 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3050261" />
  <Command __id="1258" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:28:40 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3050481" />
  <Command __id="1260" _type="InsertStringCommand" date="Mon Feb 08 15:28:40 EST 2021" starttimestamp="1612813070441" timestamp="3050494" timestamp2="3050494">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1262" _type="InsertStringCommand" date="Mon Feb 08 15:28:41 EST 2021" starttimestamp="1612813070441" timestamp="3050611" timestamp2="3050611">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1264" _type="InsertStringCommand" date="Mon Feb 08 15:28:41 EST 2021" starttimestamp="1612813070441" timestamp="3050951" timestamp2="3050951">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1266" _type="InsertStringCommand" date="Mon Feb 08 15:28:41 EST 2021" starttimestamp="1612813070441" timestamp="3050994" timestamp2="3050994">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1267" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:28:41 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3051036" />
  <Command __id="1271" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:28:42 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3051849" />
  <Command __id="1273" _type="InsertStringCommand" date="Mon Feb 08 15:28:42 EST 2021" starttimestamp="1612813070441" timestamp="3051862" timestamp2="3051862">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1275" _type="InsertStringCommand" date="Mon Feb 08 15:28:42 EST 2021" starttimestamp="1612813070441" timestamp="3052267" timestamp2="3052267">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1277" _type="PauseCommand" date="Mon Feb 08 15:28:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3053842">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1575]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1276" _type="MoveCaretCommand" caretOffset="5084" date="Mon Feb 08 15:28:44 EST 2021" docOffset="25346" starttimestamp="1612813070441" timestamp="3053842" />
  <Command __id="1278" _type="SelectTextCommand" caretOffset="5085" date="Mon Feb 08 15:28:44 EST 2021" end="5085" start="5078" starttimestamp="1612813070441" timestamp="3053968" />
  <Command __id="1280" _type="InsertStringCommand" date="Mon Feb 08 15:28:44 EST 2021" starttimestamp="1612813070441" timestamp="3054520" timestamp2="3054520">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1281" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:28:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3054542" />
  <Command __id="1284" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:28:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3055288" />
  <Command __id="1286" _type="InsertStringCommand" date="Mon Feb 08 15:28:45 EST 2021" starttimestamp="1612813070441" timestamp="3055303" timestamp2="3055303">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1288" _type="PauseCommand" date="Mon Feb 08 15:28:48 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3057985">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2682]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1287" _type="MoveCaretCommand" caretOffset="6017" date="Mon Feb 08 15:28:48 EST 2021" docOffset="26279" starttimestamp="1612813070441" timestamp="3057985" />
  <Command __id="1289" _type="SelectTextCommand" caretOffset="6019" date="Mon Feb 08 15:28:48 EST 2021" end="6019" start="6014" starttimestamp="1612813070441" timestamp="3058143" />
  <Command __id="1291" _type="PauseCommand" date="Mon Feb 08 15:28:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3059167">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1024]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1292" _type="InsertStringCommand" date="Mon Feb 08 15:28:49 EST 2021" starttimestamp="1612813070441" timestamp="3059174" timestamp2="3059174">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1293" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:28:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3059213" />
  <Command __id="1297" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:28:50 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3059920" />
  <Command __id="1298" _type="InsertStringCommand" date="Mon Feb 08 15:28:50 EST 2021" starttimestamp="1612813070441" timestamp="3059923" timestamp2="3059923">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1300" _type="PauseCommand" date="Mon Feb 08 15:29:11 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="3080576">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[20653]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1299" _type="SelectTextCommand" caretOffset="2664" date="Mon Feb 08 15:29:11 EST 2021" end="2664" start="2304" starttimestamp="1612813070441" timestamp="3080576" />
  <Command __id="1302" _type="PauseCommand" date="Mon Feb 08 15:29:19 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3088584">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8008]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1301" _type="MoveCaretCommand" caretOffset="2261" date="Mon Feb 08 15:29:19 EST 2021" docOffset="3784" starttimestamp="1612813070441" timestamp="3088584" />
  <Command __id="1304" _type="PauseCommand" date="Mon Feb 08 15:29:21 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3090651">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2067]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1303" _type="SelectTextCommand" caretOffset="2664" date="Mon Feb 08 15:29:21 EST 2021" end="2664" start="2261" starttimestamp="1612813070441" timestamp="3090651" />
  <Command __id="1306" _type="PauseCommand" date="Mon Feb 08 15:29:45 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="3115286">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[24635]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1305" _type="SelectTextCommand" caretOffset="5912" date="Mon Feb 08 15:29:45 EST 2021" end="5912" start="5261" starttimestamp="1612813070441" timestamp="3115286" />
  <Command __id="1307" _type="CopyCommand" date="Mon Feb 08 15:29:46 EST 2021" starttimestamp="1612813070441" timestamp="3116051" />
  <Command __id="1309" _type="PauseCommand" date="Mon Feb 08 15:29:55 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3125350">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[9299]]></rest>
    <prev><![CDATA[CopyCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1308" _type="SelectTextCommand" caretOffset="2664" date="Mon Feb 08 15:29:55 EST 2021" end="2664" start="2304" starttimestamp="1612813070441" timestamp="3125350" />
  <Command __id="1319" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:29:56 EST 2021" starttimestamp="1612813070441" timestamp="3126248" />
  <Command __id="1321" _type="PauseCommand" date="Mon Feb 08 15:29:58 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3128369">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2121]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1320" _type="SelectTextCommand" caretOffset="2693" date="Mon Feb 08 15:29:58 EST 2021" end="2785" start="2693" starttimestamp="1612813070441" timestamp="3128369" />
  <Command __id="1325" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:29:59 EST 2021" starttimestamp="1612813070441" timestamp="3128934" />
  <Command __id="1326" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 15:29:59 EST 2021" starttimestamp="1612813070441" timestamp="3129287" />
  <Command __id="1328" _type="InsertStringCommand" date="Mon Feb 08 15:30:00 EST 2021" starttimestamp="1612813070441" timestamp="3129676" timestamp2="3129676">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1330" _type="PasteCommand" date="Mon Feb 08 15:30:00 EST 2021" starttimestamp="1612813070441" timestamp="3130357" />
  <Command __id="1332" _type="PauseCommand" date="Mon Feb 08 15:30:03 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3132722">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2365]]></rest>
    <prev><![CDATA[PasteCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1331" _type="MoveCaretCommand" caretOffset="3551" date="Mon Feb 08 15:30:03 EST 2021" docOffset="5074" starttimestamp="1612813070441" timestamp="3132722" />
  <DocumentChange __id="1261" _type="Insert" date="Mon Feb 08 15:28:41 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26427" docExpressionCount="3138" docLength="26779" length="6" offset="26154" repeat="6" starttimestamp="1612813070441" timestamp="3050602" timestamp2="3051528">
    <text><![CDATA[ webco]]></text>
  </DocumentChange>
  <DocumentChange __id="1272" _type="Replace" date="Mon Feb 08 15:28:42 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26432" docExpressionCount="3138" docLength="26784" endLine="752" insertionLength="10" int_docASTNodeCount="4574" int_docActiveCodeLength="26422" int_docExpressionCount="3137" int_docLength="26774" length="5" offset="26155" startLine="752" starttimestamp="1612813070441" timestamp="3051855">
    <deletedText><![CDATA[webco]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1274" _type="Insert" date="Mon Feb 08 15:28:42 EST 2021" docASTNodeCount="4575" docActiveCodeLength="26433" docExpressionCount="3138" docLength="26785" length="1" offset="26165" starttimestamp="1612813070441" timestamp="3052262">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1279" _type="Replace" date="Mon Feb 08 15:28:44 EST 2021" docASTNodeCount="4576" docActiveCodeLength="26427" docExpressionCount="3139" docLength="26779" endLine="734" insertionLength="1" int_docASTNodeCount="4574" int_docActiveCodeLength="26426" int_docExpressionCount="3138" int_docLength="26778" length="7" offset="25340" startLine="734" starttimestamp="1612813070441" timestamp="3054508">
    <deletedText><![CDATA[boolean]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1282" _type="Insert" date="Mon Feb 08 15:28:45 EST 2021" docASTNodeCount="4576" docActiveCodeLength="26429" docExpressionCount="3139" docLength="26781" length="2" offset="25341" repeat="2" starttimestamp="1612813070441" timestamp="3054712" timestamp2="3054751">
    <text><![CDATA[hi]]></text>
  </DocumentChange>
  <DocumentChange __id="1285" _type="Replace" date="Mon Feb 08 15:28:45 EST 2021" docASTNodeCount="4576" docActiveCodeLength="26436" docExpressionCount="3139" docLength="26788" endLine="734" insertionLength="10" int_docASTNodeCount="4574" int_docActiveCodeLength="26426" int_docExpressionCount="3138" int_docLength="26778" length="3" offset="25340" startLine="734" starttimestamp="1612813070441" timestamp="3055294">
    <deletedText><![CDATA[ehi]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1290" _type="Replace" date="Mon Feb 08 15:28:49 EST 2021" docASTNodeCount="4576" docActiveCodeLength="26432" docExpressionCount="3139" docLength="26784" endLine="756" insertionLength="1" int_docASTNodeCount="4575" int_docActiveCodeLength="26431" int_docExpressionCount="3138" int_docLength="26783" length="5" offset="26276" startLine="756" starttimestamp="1612813070441" timestamp="3059167">
    <deletedText><![CDATA[added]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1294" _type="Insert" date="Mon Feb 08 15:28:49 EST 2021" docASTNodeCount="4576" docActiveCodeLength="26435" docExpressionCount="3139" docLength="26787" length="3" offset="26277" repeat="3" starttimestamp="1612813070441" timestamp="3059399" timestamp2="3059692">
    <text><![CDATA[ull]]></text>
  </DocumentChange>
  <DocumentChange __id="1310" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26305" docExpressionCount="2851" docLength="26789" length="2" offset="3818" starttimestamp="1612813070441" timestamp="3126159">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1311" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26272" docExpressionCount="2851" docLength="26791" length="2" offset="3952" starttimestamp="1612813070441" timestamp="3126174">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1312" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26244" docExpressionCount="2851" docLength="26793" length="2" offset="3989" starttimestamp="1612813070441" timestamp="3126181">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1313" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4165" docActiveCodeLength="26229" docExpressionCount="2869" docLength="26795" length="2" offset="4021" starttimestamp="1612813070441" timestamp="3126188">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1314" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4165" docActiveCodeLength="26179" docExpressionCount="2869" docLength="26797" length="2" offset="4040" starttimestamp="1612813070441" timestamp="3126195">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1315" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4165" docActiveCodeLength="26133" docExpressionCount="2869" docLength="26799" length="2" offset="4094" starttimestamp="1612813070441" timestamp="3126202">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1316" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4165" docActiveCodeLength="26104" docExpressionCount="2869" docLength="26801" length="2" offset="4144" starttimestamp="1612813070441" timestamp="3126209">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1317" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26093" docExpressionCount="2851" docLength="26803" length="2" offset="4177" starttimestamp="1612813070441" timestamp="3126216">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1318" _type="Insert" date="Mon Feb 08 15:29:56 EST 2021" docASTNodeCount="4536" docActiveCodeLength="26082" docExpressionCount="3111" docLength="26805" length="2" offset="4192" starttimestamp="1612813070441" timestamp="3126218">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1322" _type="Insert" date="Mon Feb 08 15:29:59 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26050" docExpressionCount="2851" docLength="26807" length="2" offset="4207" starttimestamp="1612813070441" timestamp="3128894">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1323" _type="Insert" date="Mon Feb 08 15:29:59 EST 2021" docASTNodeCount="4131" docActiveCodeLength="25995" docExpressionCount="2851" docLength="26809" length="2" offset="4243" starttimestamp="1612813070441" timestamp="3128900">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1324" _type="Insert" date="Mon Feb 08 15:29:59 EST 2021" docASTNodeCount="4526" docActiveCodeLength="25985" docExpressionCount="3104" docLength="26811" length="2" offset="4302" starttimestamp="1612813070441" timestamp="3128902">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1327" _type="Insert" date="Mon Feb 08 15:30:00 EST 2021" docASTNodeCount="4526" docActiveCodeLength="25996" docExpressionCount="3104" docLength="26822" length="11" offset="4314" starttimestamp="1612813070441" timestamp="3129659">
    <text><![CDATA[
									]]></text>
  </DocumentChange>
  <DocumentChange __id="1329" _type="Replace" date="Mon Feb 08 15:30:00 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26773" docExpressionCount="3168" docLength="27599" endLine="123" insertionLength="786" int_docASTNodeCount="4526" int_docActiveCodeLength="25987" int_docExpressionCount="3104" int_docLength="26813" length="9" offset="4316" startLine="123" starttimestamp="1612813070441" timestamp="3130335">
    <deletedText><![CDATA[									]]></deletedText>
    <insertedText><![CDATA[									long timestamp = webCommand.getStartTimestamp() - startTimestamp;
									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
										added = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getStartTimestamp() - startTimestamp;
										} else {
											break;
										}
									}
									if (added) {
										maybeAddPauseCommand(newCommands, last, cur);
										return webCommand;
									}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1333" _type="Insert" date="Mon Feb 08 15:30:05 EST 2021" docASTNodeCount="4611" docActiveCodeLength="26745" docExpressionCount="3167" docLength="27601" length="2" offset="5062" starttimestamp="1612813070441" timestamp="3134817">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1337" _type="Insert" date="Mon Feb 08 15:30:06 EST 2021" docASTNodeCount="4105" docActiveCodeLength="26784" docExpressionCount="2839" docLength="27640" length="39" offset="5104" repeat="16" starttimestamp="1612813070441" timestamp="3135758" timestamp2="3138956">
    <text><![CDATA[ else {
										mayaddpa
									}]]></text>
  </DocumentChange>
  <Command __id="1334" _type="PauseCommand" date="Mon Feb 08 15:30:05 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3134817">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2095]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1335" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:30:05 EST 2021" starttimestamp="1612813070441" timestamp="3134848" />
  <Command __id="1336" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:30:05 EST 2021" starttimestamp="1612813070441" timestamp="3135270" />
  <Command __id="1338" _type="InsertStringCommand" date="Mon Feb 08 15:30:06 EST 2021" starttimestamp="1612813070441" timestamp="3135764" timestamp2="3135764">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1340" _type="InsertStringCommand" date="Mon Feb 08 15:30:06 EST 2021" starttimestamp="1612813070441" timestamp="3135981" timestamp2="3135981">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1341" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:30:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3136025" />
  <Command __id="1346" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:30:07 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3136849" />
  <Command __id="1348" _type="InsertStringCommand" date="Mon Feb 08 15:30:07 EST 2021" starttimestamp="1612813070441" timestamp="3137089" timestamp2="3137089">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1350" _type="InsertStringCommand" date="Mon Feb 08 15:30:07 EST 2021" starttimestamp="1612813070441" timestamp="3137250" timestamp2="3137250">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1352" _type="InsertStringCommand" date="Mon Feb 08 15:30:08 EST 2021" starttimestamp="1612813070441" timestamp="3137971" timestamp2="3137971">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1353" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:30:08 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3138015" />
  <Command __id="1361" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:30:09 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3139239" />
  <Command __id="1363" _type="InsertStringCommand" date="Mon Feb 08 15:30:09 EST 2021" starttimestamp="1612813070441" timestamp="3139379" timestamp2="3139379">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1365" _type="PauseCommand" date="Mon Feb 08 15:30:10 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3140505">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1126]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1364" _type="InsertStringCommand" date="Mon Feb 08 15:30:10 EST 2021" starttimestamp="1612813070441" timestamp="3140505" timestamp2="3140505">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1367" _type="PauseCommand" date="Mon Feb 08 15:30:14 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3143927">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3422]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1366" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:30:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3143927" />
  <Command __id="1368" _type="MoveCaretCommand" caretOffset="3268" date="Mon Feb 08 15:30:14 EST 2021" docOffset="4791" starttimestamp="1612813070441" timestamp="3144237" />
  <Command __id="1370" _type="PauseCommand" date="Mon Feb 08 15:30:18 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3148128">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3891]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1369" _type="MoveCaretCommand" caretOffset="2270" date="Mon Feb 08 15:30:18 EST 2021" docOffset="3793" starttimestamp="1612813070441" timestamp="3148128" />
  <Command __id="1372" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:30:19 EST 2021" starttimestamp="1612813070441" timestamp="3149135" />
  <Command __id="1374" _type="PauseCommand" date="Mon Feb 08 15:30:21 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3151405">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2270]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1375" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:30:21 EST 2021" starttimestamp="1612813070441" timestamp="3151438" />
  <Command __id="1377" _type="PauseCommand" date="Mon Feb 08 15:30:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3152529">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1091]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1376" _type="MoveCaretCommand" caretOffset="2896" date="Mon Feb 08 15:30:22 EST 2021" docOffset="4419" starttimestamp="1612813070441" timestamp="3152529" />
  <Command __id="1379" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:30:23 EST 2021" starttimestamp="1612813070441" timestamp="3152746" />
  <Command __id="1380" _type="MoveCaretCommand" caretOffset="2278" date="Mon Feb 08 15:30:23 EST 2021" docOffset="3801" starttimestamp="1612813070441" timestamp="3153552" />
  <Command __id="1381" _type="SelectTextCommand" caretOffset="2284" date="Mon Feb 08 15:30:24 EST 2021" end="2284" start="2269" starttimestamp="1612813070441" timestamp="3153707" />
  <Command __id="1382" _type="CopyCommand" date="Mon Feb 08 15:30:24 EST 2021" starttimestamp="1612813070441" timestamp="3153963" />
  <Command __id="1383" _type="MoveCaretCommand" caretOffset="3180" date="Mon Feb 08 15:30:24 EST 2021" docOffset="4703" starttimestamp="1612813070441" timestamp="3154525" />
  <Command __id="1384" _type="SelectTextCommand" caretOffset="3184" date="Mon Feb 08 15:30:25 EST 2021" end="3184" start="3179" starttimestamp="1612813070441" timestamp="3154669" />
  <Command __id="1386" _type="PasteCommand" date="Mon Feb 08 15:30:25 EST 2021" starttimestamp="1612813070441" timestamp="3154782" />
  <Command __id="1387" _type="MoveCaretCommand" caretOffset="3201" date="Mon Feb 08 15:30:25 EST 2021" docOffset="4724" starttimestamp="1612813070441" timestamp="3154976" />
  <Command __id="1389" _type="PauseCommand" date="Mon Feb 08 15:30:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3156714">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1738]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1388" _type="MoveCaretCommand" caretOffset="3486" date="Mon Feb 08 15:30:27 EST 2021" docOffset="5009" starttimestamp="1612813070441" timestamp="3156714" />
  <Command __id="1390" _type="SelectTextCommand" caretOffset="3489" date="Mon Feb 08 15:30:27 EST 2021" end="3489" start="3484" starttimestamp="1612813070441" timestamp="3156883" />
  <Command __id="1392" _type="PasteCommand" date="Mon Feb 08 15:30:27 EST 2021" starttimestamp="1612813070441" timestamp="3157112" />
  <Command __id="1393" _type="MoveCaretCommand" caretOffset="3469" date="Mon Feb 08 15:30:27 EST 2021" docOffset="4992" starttimestamp="1612813070441" timestamp="3157360" />
  <Command __id="1395" _type="PauseCommand" date="Mon Feb 08 15:30:58 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="3187845">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[30485]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1394" _type="SelectTextCommand" caretOffset="2867" date="Mon Feb 08 15:30:58 EST 2021" end="2867" start="2802" starttimestamp="1612813070441" timestamp="3187845" />
  <Command __id="1397" _type="CutCommand" date="Mon Feb 08 15:30:58 EST 2021" starttimestamp="1612813070441" timestamp="3188531" />
  <Command __id="1398" _type="MoveCaretCommand" caretOffset="2050" date="Mon Feb 08 15:30:59 EST 2021" docOffset="3573" starttimestamp="1612813070441" timestamp="3189048" />
  <Command __id="1400" _type="InsertStringCommand" date="Mon Feb 08 15:30:59 EST 2021" starttimestamp="1612813070441" timestamp="3189284" timestamp2="3189284">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1402" _type="PasteCommand" date="Mon Feb 08 15:30:59 EST 2021" starttimestamp="1612813070441" timestamp="3189457" />
  <Command __id="1404" _type="PauseCommand" date="Mon Feb 08 15:31:01 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3191156">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1699]]></rest>
    <prev><![CDATA[PasteCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1403" _type="MoveCaretCommand" caretOffset="2876" date="Mon Feb 08 15:31:01 EST 2021" docOffset="4399" starttimestamp="1612813070441" timestamp="3191156" />
  <Command __id="1406" _type="PauseCommand" date="Mon Feb 08 15:31:06 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3196104">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4948]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1405" _type="MoveCaretCommand" caretOffset="3414" date="Mon Feb 08 15:31:06 EST 2021" docOffset="4937" starttimestamp="1612813070441" timestamp="3196104" />
  <Command __id="1408" _type="PauseCommand" date="Mon Feb 08 15:32:41 EST 2021" range="1m-2m" starttimestamp="1612813070441" timestamp="3290723">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[94619]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1407" _type="SelectTextCommand" caretOffset="3568" date="Mon Feb 08 15:32:41 EST 2021" end="3568" start="3523" starttimestamp="1612813070441" timestamp="3290723" />
  <Command __id="1409" _type="CopyCommand" date="Mon Feb 08 15:32:41 EST 2021" starttimestamp="1612813070441" timestamp="3290997" />
  <Command __id="1411" _type="PauseCommand" date="Mon Feb 08 15:32:45 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3295540">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4543]]></rest>
    <prev><![CDATA[CopyCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1410" _type="ShellCommand" date="Mon Feb 08 15:32:45 EST 2021" starttimestamp="1612813070441" timestamp="3295540" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1413" _type="PauseCommand" date="Mon Feb 08 15:34:00 EST 2021" range="1m-2m" starttimestamp="1612813070441" timestamp="3370199">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[74659]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1412" _type="ShellCommand" date="Mon Feb 08 15:34:00 EST 2021" starttimestamp="1612813070441" timestamp="3370199" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1414" _type="MoveCaretCommand" caretOffset="3434" date="Mon Feb 08 15:34:00 EST 2021" docOffset="4957" starttimestamp="1612813070441" timestamp="3370276" />
  <Command __id="1416" _type="PauseCommand" date="Mon Feb 08 15:34:01 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3371421">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1145]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1415" _type="MoveCaretCommand" caretOffset="3434" date="Mon Feb 08 15:34:01 EST 2021" docOffset="4957" starttimestamp="1612813070441" timestamp="3371421" />
  <Command __id="1417" _type="MoveCaretCommand" caretOffset="3434" date="Mon Feb 08 15:34:02 EST 2021" docOffset="4957" starttimestamp="1612813070441" timestamp="3371953" />
  <Command __id="1418" _type="MoveCaretCommand" caretOffset="3453" date="Mon Feb 08 15:34:02 EST 2021" docOffset="4976" starttimestamp="1612813070441" timestamp="3372234" />
  <Command __id="1419" _type="MoveCaretCommand" caretOffset="3466" date="Mon Feb 08 15:34:03 EST 2021" docOffset="4989" starttimestamp="1612813070441" timestamp="3372605" />
  <Command __id="1421" _type="PauseCommand" date="Mon Feb 08 15:34:06 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3375995">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3390]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1420" _type="MoveCaretCommand" caretOffset="3376" date="Mon Feb 08 15:34:06 EST 2021" docOffset="4899" starttimestamp="1612813070441" timestamp="3375995" />
  <Command __id="1422" _type="MoveCaretCommand" caretOffset="3434" date="Mon Feb 08 15:34:06 EST 2021" docOffset="4957" starttimestamp="1612813070441" timestamp="3376524" />
  <Command __id="1424" _type="PauseCommand" date="Mon Feb 08 15:34:09 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3379311">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2787]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1423" _type="MoveCaretCommand" caretOffset="3540" date="Mon Feb 08 15:34:09 EST 2021" docOffset="5063" starttimestamp="1612813070441" timestamp="3379311" />
  <Command __id="1426" _type="PauseCommand" date="Mon Feb 08 15:34:12 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3381630">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2319]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1425" _type="ShellCommand" date="Mon Feb 08 15:34:12 EST 2021" starttimestamp="1612813070441" timestamp="3381630" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1428" _type="PauseCommand" date="Mon Feb 08 15:38:28 EST 2021" range="2m-5m" starttimestamp="1612813070441" timestamp="3638102">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[256472]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1427" _type="ShellCommand" date="Mon Feb 08 15:38:28 EST 2021" starttimestamp="1612813070441" timestamp="3638102" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1430" _type="PauseCommand" date="Mon Feb 08 15:38:30 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3640451">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2349]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1429" _type="MoveCaretCommand" caretOffset="3498" date="Mon Feb 08 15:38:30 EST 2021" docOffset="5021" starttimestamp="1612813070441" timestamp="3640451" />
  <Command __id="1432" _type="PauseCommand" date="Mon Feb 08 15:38:33 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3642795">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2344]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1431" _type="MoveCaretCommand" caretOffset="3540" date="Mon Feb 08 15:38:33 EST 2021" docOffset="5063" starttimestamp="1612813070441" timestamp="3642795" />
  <Command __id="1433" _type="MoveCaretCommand" caretOffset="3645" date="Mon Feb 08 15:38:34 EST 2021" docOffset="5168" starttimestamp="1612813070441" timestamp="3643579" />
  <Command __id="1434" _type="MoveCaretCommand" caretOffset="3551" date="Mon Feb 08 15:38:34 EST 2021" docOffset="5074" starttimestamp="1612813070441" timestamp="3644332" />
  <Command __id="1436" _type="PauseCommand" date="Mon Feb 08 15:38:38 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3647604">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3272]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1435" _type="SelectTextCommand" caretOffset="3523" date="Mon Feb 08 15:38:38 EST 2021" end="3568" start="3523" starttimestamp="1612813070441" timestamp="3647604" />
  <Command __id="1438" _type="PauseCommand" date="Mon Feb 08 15:38:49 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="3659357">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[11753]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1437" _type="MoveCaretCommand" caretOffset="3434" date="Mon Feb 08 15:38:49 EST 2021" docOffset="4957" starttimestamp="1612813070441" timestamp="3659357" />
  <Command __id="1440" _type="PauseCommand" date="Mon Feb 08 15:38:54 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3663680">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4323]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1439" _type="SelectTextCommand" caretOffset="3568" date="Mon Feb 08 15:38:54 EST 2021" end="3568" start="3523" starttimestamp="1612813070441" timestamp="3663680" />
  <Command __id="1442" _type="CutCommand" date="Mon Feb 08 15:38:55 EST 2021" starttimestamp="1612813070441" timestamp="3664647" />
  <Command __id="1443" _type="MoveCaretCommand" caretOffset="3365" date="Mon Feb 08 15:38:55 EST 2021" docOffset="4888" starttimestamp="1612813070441" timestamp="3665243" />
  <Command __id="1444" _type="MoveCaretCommand" caretOffset="3434" date="Mon Feb 08 15:38:56 EST 2021" docOffset="4957" starttimestamp="1612813070441" timestamp="3665786" />
  <Command __id="1446" _type="InsertStringCommand" date="Mon Feb 08 15:38:56 EST 2021" starttimestamp="1612813070441" timestamp="3666030" timestamp2="3666030">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1448" _type="PasteCommand" date="Mon Feb 08 15:38:56 EST 2021" starttimestamp="1612813070441" timestamp="3666228" />
  <Command __id="1450" _type="PauseCommand" date="Mon Feb 08 15:38:59 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3668872">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2644]]></rest>
    <prev><![CDATA[PasteCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1449" _type="MoveCaretCommand" caretOffset="3632" date="Mon Feb 08 15:38:59 EST 2021" docOffset="5155" starttimestamp="1612813070441" timestamp="3668872" />
  <Command __id="1452" _type="PauseCommand" date="Mon Feb 08 15:39:04 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3673939">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5067]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1451" _type="MoveCaretCommand" caretOffset="3632" date="Mon Feb 08 15:39:04 EST 2021" docOffset="5155" starttimestamp="1612813070441" timestamp="3673939" />
  <Command __id="1453" _type="MoveCaretCommand" caretOffset="3632" date="Mon Feb 08 15:39:04 EST 2021" docOffset="5155" starttimestamp="1612813070441" timestamp="3674295" />
  <Command __id="1455" _type="PauseCommand" date="Mon Feb 08 15:39:20 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="3689745">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[15450]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1456" _type="UndoCommand" date="Mon Feb 08 15:39:20 EST 2021" starttimestamp="1612813070441" timestamp="3689770" />
  <Command __id="1458" _type="UndoCommand" date="Mon Feb 08 15:39:20 EST 2021" starttimestamp="1612813070441" timestamp="3689886" />
  <Command __id="1460" _type="UndoCommand" date="Mon Feb 08 15:39:21 EST 2021" starttimestamp="1612813070441" timestamp="3690735" />
  <Command __id="1462" _type="PauseCommand" date="Mon Feb 08 15:39:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3691796">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1061]]></rest>
    <prev><![CDATA[UndoCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1461" _type="MoveCaretCommand" caretOffset="3498" date="Mon Feb 08 15:39:22 EST 2021" docOffset="5021" starttimestamp="1612813070441" timestamp="3691796" />
  <Command __id="1464" _type="PauseCommand" date="Mon Feb 08 15:39:41 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="3710669">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[18873]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1463" _type="MoveCaretCommand" caretOffset="3368" date="Mon Feb 08 15:39:41 EST 2021" docOffset="4891" starttimestamp="1612813070441" timestamp="3710669" />
  <Command __id="1465" _type="MoveCaretCommand" caretOffset="3434" date="Mon Feb 08 15:39:41 EST 2021" docOffset="4957" starttimestamp="1612813070441" timestamp="3710965" />
  <Command __id="1467" _type="InsertStringCommand" date="Mon Feb 08 15:39:42 EST 2021" starttimestamp="1612813070441" timestamp="3711619" timestamp2="3711619">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1469" _type="InsertStringCommand" date="Mon Feb 08 15:39:42 EST 2021" starttimestamp="1612813070441" timestamp="3711813" timestamp2="3711813">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1470" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:39:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3711851" />
  <Command __id="1474" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:39:42 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3712436" />
  <Command __id="1476" _type="InsertStringCommand" date="Mon Feb 08 15:39:42 EST 2021" starttimestamp="1612813070441" timestamp="3712451" timestamp2="3712451">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1478" _type="InsertStringCommand" date="Mon Feb 08 15:39:43 EST 2021" starttimestamp="1612813070441" timestamp="3712642" timestamp2="3712642">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1480" _type="InsertStringCommand" date="Mon Feb 08 15:39:43 EST 2021" starttimestamp="1612813070441" timestamp="3712975" timestamp2="3712975">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1482" _type="InsertStringCommand" date="Mon Feb 08 15:39:43 EST 2021" starttimestamp="1612813070441" timestamp="3713285" timestamp2="3713285">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1484" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:39:44 EST 2021" starttimestamp="1612813070441" timestamp="3713680" />
  <Command __id="1486" _type="InsertStringCommand" date="Mon Feb 08 15:39:44 EST 2021" starttimestamp="1612813070441" timestamp="3713799" timestamp2="3713799">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1488" _type="InsertStringCommand" date="Mon Feb 08 15:39:44 EST 2021" starttimestamp="1612813070441" timestamp="3713966" timestamp2="3713966">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1489" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:39:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3714007" />
  <Command __id="1493" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:39:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3714572" />
  <Command __id="1494" _type="InsertStringCommand" date="Mon Feb 08 15:39:45 EST 2021" starttimestamp="1612813070441" timestamp="3714576" timestamp2="3714576">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1496" _type="InsertStringCommand" date="Mon Feb 08 15:39:45 EST 2021" starttimestamp="1612813070441" timestamp="3714717" timestamp2="3714717">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="1362" _type="Replace" date="Mon Feb 08 15:30:09 EST 2021" docASTNodeCount="4618" docActiveCodeLength="26821" docExpressionCount="3172" docLength="27677" endLine="142" insertionLength="45" int_docASTNodeCount="4612" int_docActiveCodeLength="26776" int_docExpressionCount="3167" int_docLength="27632" length="8" offset="5123" startLine="142" starttimestamp="1612813070441" timestamp="3139245">
    <deletedText><![CDATA[mayaddpa]]></deletedText>
    <insertedText><![CDATA[maybeAddPauseCommand(newCommands, last, cur);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1371" _type="Insert" date="Mon Feb 08 15:30:19 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26780" docExpressionCount="3170" docLength="27679" length="2" offset="3775" starttimestamp="1612813070441" timestamp="3149100">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1373" _type="Delete" date="Mon Feb 08 15:30:21 EST 2021" docASTNodeCount="4618" docActiveCodeLength="26821" docExpressionCount="3172" docLength="27677" endLine="110" length="2" offset="3775" startLine="110" starttimestamp="1612813070441" timestamp="3151405">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1378" _type="Insert" date="Mon Feb 08 15:30:23 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26790" docExpressionCount="3170" docLength="27679" length="2" offset="4392" starttimestamp="1612813070441" timestamp="3152714">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1385" _type="Replace" date="Mon Feb 08 15:30:25 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26800" docExpressionCount="3170" docLength="27689" endLine="129" insertionLength="25" int_docASTNodeCount="4388" int_docActiveCodeLength="26775" int_docExpressionCount="3013" int_docLength="27664" length="15" offset="4692" startLine="129" starttimestamp="1612813070441" timestamp="3154774">
    <deletedText><![CDATA[										added]]></deletedText>
    <insertedText><![CDATA[										webCommandAdded]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1391" _type="Replace" date="Mon Feb 08 15:30:27 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26810" docExpressionCount="3170" docLength="27699" endLine="138" insertionLength="15" int_docASTNodeCount="4613" int_docActiveCodeLength="26795" int_docExpressionCount="3170" int_docLength="27684" length="5" offset="5007" startLine="138" starttimestamp="1612813070441" timestamp="3157104">
    <deletedText><![CDATA[added]]></deletedText>
    <insertedText><![CDATA[webCommandAdded]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1396" _type="Delete" date="Mon Feb 08 15:30:58 EST 2021" docASTNodeCount="4604" docActiveCodeLength="26745" docExpressionCount="3164" docLength="27634" endLine="123" length="65" offset="4325" startLine="123" starttimestamp="1612813070441" timestamp="3188526">
    <text><![CDATA[long timestamp = webCommand.getStartTimestamp() - startTimestamp;]]></text>
  </DocumentChange>
  <DocumentChange __id="1399" _type="Insert" date="Mon Feb 08 15:30:59 EST 2021" docASTNodeCount="4604" docActiveCodeLength="26754" docExpressionCount="3164" docLength="27643" length="9" offset="3573" starttimestamp="1612813070441" timestamp="3189273">
    <text><![CDATA[
							]]></text>
  </DocumentChange>
  <DocumentChange __id="1401" _type="Replace" date="Mon Feb 08 15:30:59 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26819" docExpressionCount="3170" docLength="27708" endLine="103" insertionLength="72" int_docASTNodeCount="4604" int_docActiveCodeLength="26747" int_docExpressionCount="3164" int_docLength="27636" length="7" offset="3575" startLine="103" starttimestamp="1612813070441" timestamp="3189451">
    <deletedText><![CDATA[							]]></deletedText>
    <insertedText><![CDATA[							long timestamp = webCommand.getStartTimestamp() - startTimestamp;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1441" _type="Delete" date="Mon Feb 08 15:38:55 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26774" docExpressionCount="3165" docLength="27663" endLine="140" length="45" offset="5046" startLine="140" starttimestamp="1612813070441" timestamp="3664642">
    <text><![CDATA[maybeAddPauseCommand(newCommands, last, cur);]]></text>
  </DocumentChange>
  <DocumentChange __id="1445" _type="Insert" date="Mon Feb 08 15:38:56 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26787" docExpressionCount="3165" docLength="27676" length="13" offset="4957" starttimestamp="1612813070441" timestamp="3666017">
    <text><![CDATA[
											]]></text>
  </DocumentChange>
  <DocumentChange __id="1447" _type="Replace" date="Mon Feb 08 15:38:56 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26832" docExpressionCount="3170" docLength="27721" endLine="136" insertionLength="56" int_docASTNodeCount="4607" int_docActiveCodeLength="26776" int_docExpressionCount="3165" int_docLength="27665" length="11" offset="4959" startLine="136" starttimestamp="1612813070441" timestamp="3666220">
    <deletedText><![CDATA[											]]></deletedText>
    <insertedText><![CDATA[											maybeAddPauseCommand(newCommands, last, cur);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1454" _type="Replace" date="Mon Feb 08 15:39:20 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26787" docExpressionCount="3165" docLength="27676" endLine="136" insertionLength="11" int_docASTNodeCount="4607" int_docActiveCodeLength="26776" int_docExpressionCount="3165" int_docLength="27665" length="56" offset="4959" startLine="136" starttimestamp="1612813070441" timestamp="3689745">
    <deletedText><![CDATA[											maybeAddPauseCommand(newCommands, last, cur);]]></deletedText>
    <insertedText><![CDATA[											]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1457" _type="Delete" date="Mon Feb 08 15:39:20 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26774" docExpressionCount="3165" docLength="27663" endLine="136" length="13" offset="4957" startLine="135" starttimestamp="1612813070441" timestamp="3689867">
    <text><![CDATA[
											]]></text>
  </DocumentChange>
  <DocumentChange __id="1459" _type="Insert" date="Mon Feb 08 15:39:21 EST 2021" docASTNodeCount="4613" docActiveCodeLength="26819" docExpressionCount="3170" docLength="27708" length="45" offset="5046" starttimestamp="1612813070441" timestamp="3690718">
    <text><![CDATA[maybeAddPauseCommand(newCommands, last, cur);]]></text>
  </DocumentChange>
  <DocumentChange __id="1466" _type="Insert" date="Mon Feb 08 15:39:42 EST 2021" docASTNodeCount="4615" docActiveCodeLength="26836" docExpressionCount="3171" docLength="27725" length="17" offset="4957" repeat="5" starttimestamp="1612813070441" timestamp="3711608" timestamp2="3712224">
    <text><![CDATA[
											webc]]></text>
  </DocumentChange>
  <DocumentChange __id="1475" _type="Replace" date="Mon Feb 08 15:39:42 EST 2021" docASTNodeCount="4615" docActiveCodeLength="26842" docExpressionCount="3171" docLength="27731" endLine="136" insertionLength="10" int_docASTNodeCount="4613" int_docActiveCodeLength="26832" int_docExpressionCount="3170" int_docLength="27721" length="4" offset="4970" startLine="136" starttimestamp="1612813070441" timestamp="3712443">
    <deletedText><![CDATA[webc]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1477" _type="Insert" date="Mon Feb 08 15:39:43 EST 2021" docASTNodeCount="4615" docActiveCodeLength="26845" docExpressionCount="3171" docLength="27734" length="3" offset="4980" repeat="3" starttimestamp="1612813070441" timestamp="3712637" timestamp2="3713280">
    <text><![CDATA[ ==]]></text>
  </DocumentChange>
  <DocumentChange __id="1483" _type="Delete" date="Mon Feb 08 15:39:44 EST 2021" docASTNodeCount="4616" docActiveCodeLength="26844" docExpressionCount="3173" docLength="27733" endLine="136" length="1" offset="4982" startLine="136" starttimestamp="1612813070441" timestamp="3713677">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="1485" _type="Insert" date="Mon Feb 08 15:39:44 EST 2021" docASTNodeCount="4617" docActiveCodeLength="26850" docExpressionCount="3173" docLength="27739" length="6" offset="4982" repeat="6" starttimestamp="1612813070441" timestamp="3713795" timestamp2="3714711">
    <text><![CDATA[ null;]]></text>
  </DocumentChange>
  <DocumentChange __id="1499" _type="Insert" date="Mon Feb 08 15:39:50 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26819" docExpressionCount="2851" docLength="27741" length="2" offset="5034" starttimestamp="1612813070441" timestamp="3720303">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1500" _type="Insert" date="Mon Feb 08 15:39:50 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26764" docExpressionCount="2851" docLength="27743" length="2" offset="5069" starttimestamp="1612813070441" timestamp="3720310">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1501" _type="Insert" date="Mon Feb 08 15:39:50 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26764" docExpressionCount="2851" docLength="27745" length="2" offset="5128" starttimestamp="1612813070441" timestamp="3720317">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1502" _type="Insert" date="Mon Feb 08 15:39:50 EST 2021" docASTNodeCount="4131" docActiveCodeLength="26747" docExpressionCount="2851" docLength="27747" length="2" offset="5162" starttimestamp="1612813070441" timestamp="3720323">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1498" _type="PauseCommand" date="Mon Feb 08 15:39:50 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3719846">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[5129]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1497" _type="SelectTextCommand" caretOffset="3517" date="Mon Feb 08 15:39:50 EST 2021" end="3650" start="3517" starttimestamp="1612813070441" timestamp="3719846" />
  <Command __id="1503" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:39:50 EST 2021" starttimestamp="1612813070441" timestamp="3720366" />
  <Command __id="1504" _type="MoveCaretCommand" caretOffset="3727" date="Mon Feb 08 15:39:51 EST 2021" docOffset="5250" starttimestamp="1612813070441" timestamp="3721100" />
  <Command __id="1506" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:39:51 EST 2021" starttimestamp="1612813070441" timestamp="3721354" />
  <Command __id="1507" _type="MoveCaretCommand" caretOffset="3658" date="Mon Feb 08 15:39:52 EST 2021" docOffset="5181" starttimestamp="1612813070441" timestamp="3721799" />
  <Command __id="1509" _type="PauseCommand" date="Mon Feb 08 15:39:55 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3725113">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3314]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1508" _type="MoveCaretCommand" caretOffset="2324" date="Mon Feb 08 15:39:55 EST 2021" docOffset="3847" starttimestamp="1612813070441" timestamp="3725113" />
  <Command __id="1510" _type="MoveCaretCommand" caretOffset="2393" date="Mon Feb 08 15:39:55 EST 2021" docOffset="3916" starttimestamp="1612813070441" timestamp="3725436" />
  <Command __id="1511" _type="MoveCaretCommand" caretOffset="2352" date="Mon Feb 08 15:39:56 EST 2021" docOffset="3875" starttimestamp="1612813070441" timestamp="3725712" />
  <Command __id="1513" _type="PauseCommand" date="Mon Feb 08 15:39:57 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3727024">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1312]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1514" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:39:57 EST 2021" starttimestamp="1612813070441" timestamp="3727072" />
  <Command __id="1515" _type="MoveCaretCommand" caretOffset="3206" date="Mon Feb 08 15:39:57 EST 2021" docOffset="4729" starttimestamp="1612813070441" timestamp="3727416" />
  <Command __id="1517" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:39:58 EST 2021" starttimestamp="1612813070441" timestamp="3727624" />
  <Command __id="1518" _type="MoveCaretCommand" caretOffset="3055" date="Mon Feb 08 15:39:58 EST 2021" docOffset="4578" starttimestamp="1612813070441" timestamp="3727877" />
  <Command __id="1520" _type="PauseCommand" date="Mon Feb 08 15:40:03 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3733361">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5484]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1519" _type="SelectTextCommand" caretOffset="3067" date="Mon Feb 08 15:40:03 EST 2021" end="3067" start="2931" starttimestamp="1612813070441" timestamp="3733361" />
  <Command __id="1521" _type="MoveCaretCommand" caretOffset="3067" date="Mon Feb 08 15:40:04 EST 2021" docOffset="4590" starttimestamp="1612813070441" timestamp="3733672" />
  <Command __id="1523" _type="PauseCommand" date="Mon Feb 08 15:40:14 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="3744319">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[10647]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1522" _type="MoveCaretCommand" caretOffset="3676" date="Mon Feb 08 15:40:14 EST 2021" docOffset="5199" starttimestamp="1612813070441" timestamp="3744319" />
  <Command __id="1525" _type="PauseCommand" date="Mon Feb 08 15:40:21 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3750861">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6542]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1524" _type="SelectTextCommand" caretOffset="3114" date="Mon Feb 08 15:40:21 EST 2021" end="3114" start="3035" starttimestamp="1612813070441" timestamp="3750861" />
  <Command __id="1526" _type="MoveCaretCommand" caretOffset="3114" date="Mon Feb 08 15:40:21 EST 2021" docOffset="4637" starttimestamp="1612813070441" timestamp="3751160" />
  <Command __id="1528" _type="PauseCommand" date="Mon Feb 08 15:40:38 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="3768019">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[16859]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1527" _type="SelectTextCommand" caretOffset="3035" date="Mon Feb 08 15:40:38 EST 2021" end="3114" start="3035" starttimestamp="1612813070441" timestamp="3768019" />
  <Command __id="1535" _type="PauseCommand" date="Mon Feb 08 15:41:04 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3793590">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9215]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1536" _type="MoveCaretCommand" caretOffset="4943" date="Mon Feb 08 15:41:04 EST 2021" docOffset="5181" starttimestamp="1612813070441" timestamp="3793846" />
  <Command __id="1538" _type="MoveCaretCommand" caretOffset="3215" date="Mon Feb 08 15:41:05 EST 2021" docOffset="4738" starttimestamp="1612813070441" timestamp="3794647" />
  <Command __id="1540" _type="PauseCommand" date="Mon Feb 08 15:41:11 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3800630">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5983]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1541" _type="SelectTextCommand" caretOffset="32339" date="Mon Feb 08 15:41:11 EST 2021" end="32339" start="32324" starttimestamp="1612813070441" timestamp="3800875" />
  <Command __id="1543" _type="PauseCommand" date="Mon Feb 08 15:41:14 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3803585">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2710]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1542" _type="MoveCaretCommand" caretOffset="33016" date="Mon Feb 08 15:41:14 EST 2021" docOffset="34708" starttimestamp="1612813070441" timestamp="3803585" />
  <Command __id="1544" _type="SelectTextCommand" caretOffset="33022" date="Mon Feb 08 15:41:14 EST 2021" end="33022" start="33005" starttimestamp="1612813070441" timestamp="3803736" />
  <Command __id="1546" _type="PauseCommand" date="Mon Feb 08 15:41:15 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3804857">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1121]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1547" _type="InsertStringCommand" date="Mon Feb 08 15:41:15 EST 2021" starttimestamp="1612813070441" timestamp="3804865" timestamp2="3804865">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1549" _type="InsertStringCommand" date="Mon Feb 08 15:41:15 EST 2021" starttimestamp="1612813070441" timestamp="3804898" timestamp2="3804898">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:41:15 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3804937" />
  <Command __id="1554" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:41:16 EST 2021" starttimestamp="1612813070441" timestamp="3805845" />
  <Command __id="1565" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:41:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3807676" />
  <Command __id="1567" _type="InsertStringCommand" date="Mon Feb 08 15:41:18 EST 2021" starttimestamp="1612813070441" timestamp="3807843" timestamp2="3807843">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1569" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:41:18 EST 2021" starttimestamp="1612813070441" timestamp="3808539" />
  <Command __id="1571" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:41:19 EST 2021" starttimestamp="1612813070441" timestamp="3808822" />
  <Command __id="1573" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 15:41:19 EST 2021" starttimestamp="1612813070441" timestamp="3809167" />
  <Command __id="1575" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 15:41:19 EST 2021" starttimestamp="1612813070441" timestamp="3809288" />
  <Command __id="1577" _type="PauseCommand" date="Mon Feb 08 15:41:26 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3815588">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6300]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1576" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 15:41:26 EST 2021" starttimestamp="1612813070441" timestamp="3815588" />
  <Command __id="1578" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:41:26 EST 2021" starttimestamp="1612813070441" timestamp="3815676" />
  <Command __id="1579" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:41:26 EST 2021" starttimestamp="1612813070441" timestamp="3815913" />
  <Command __id="1581" _type="PauseCommand" date="Mon Feb 08 15:41:29 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3818847">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2934]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1582" _type="MoveCaretCommand" caretOffset="1414" date="Mon Feb 08 15:41:29 EST 2021" docOffset="2937" starttimestamp="1612813070441" timestamp="3819005" />
  <Command __id="1584" _type="PauseCommand" date="Mon Feb 08 15:41:39 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="3829154">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[10149]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1583" _type="MoveCaretCommand" caretOffset="3057" date="Mon Feb 08 15:41:39 EST 2021" docOffset="4580" starttimestamp="1612813070441" timestamp="3829154" />
  <Command __id="1585" _type="SelectTextCommand" caretOffset="3063" date="Mon Feb 08 15:41:39 EST 2021" end="3063" start="3046" starttimestamp="1612813070441" timestamp="3829294" />
  <Command __id="1587" _type="PauseCommand" date="Mon Feb 08 15:41:42 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3832377">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3083]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1588" _type="MoveCaretCommand" caretOffset="33017" date="Mon Feb 08 15:41:42 EST 2021" docOffset="34709" starttimestamp="1612813070441" timestamp="3832545" />
  <Command __id="1590" _type="PauseCommand" date="Mon Feb 08 15:41:46 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3836526">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3981]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1591" _type="SelectTextCommand" caretOffset="3063" date="Mon Feb 08 15:41:47 EST 2021" end="3063" start="3046" starttimestamp="1612813070441" timestamp="3836730" />
  <Command __id="1592" _type="MoveCaretCommand" caretOffset="3093" date="Mon Feb 08 15:41:47 EST 2021" docOffset="4616" starttimestamp="1612813070441" timestamp="3837496" />
  <Command __id="1594" _type="PauseCommand" date="Mon Feb 08 15:41:50 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3839879">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2383]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1593" _type="MoveCaretCommand" caretOffset="3390" date="Mon Feb 08 15:41:50 EST 2021" docOffset="4913" starttimestamp="1612813070441" timestamp="3839879" />
  <Command __id="1595" _type="SelectTextCommand" caretOffset="3398" date="Mon Feb 08 15:41:50 EST 2021" end="3398" start="3381" starttimestamp="1612813070441" timestamp="3840030" />
  <Command __id="1597" _type="InsertStringCommand" date="Mon Feb 08 15:41:51 EST 2021" starttimestamp="1612813070441" timestamp="3840861" timestamp2="3840861">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1598" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:41:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3840892" />
  <Command __id="1604" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:41:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3841641" />
  <Command __id="1606" _type="InsertStringCommand" date="Mon Feb 08 15:41:52 EST 2021" starttimestamp="1612813070441" timestamp="3841662" timestamp2="3841662">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1608" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:41:52 EST 2021" starttimestamp="1612813070441" timestamp="3842270" />
  <Command __id="1610" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:41:52 EST 2021" starttimestamp="1612813070441" timestamp="3842368" />
  <DocumentChange __id="1505" _type="Insert" date="Mon Feb 08 15:39:51 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26737" docExpressionCount="3167" docLength="27749" length="2" offset="5240" starttimestamp="1612813070441" timestamp="3721320">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1512" _type="Insert" date="Mon Feb 08 15:39:57 EST 2021" docASTNodeCount="4602" docActiveCodeLength="26696" docExpressionCount="3165" docLength="27751" length="2" offset="3849" starttimestamp="1612813070441" timestamp="3727024">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1516" _type="Insert" date="Mon Feb 08 15:39:58 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26663" docExpressionCount="3162" docLength="27753" length="2" offset="4703" starttimestamp="1612813070441" timestamp="3727594">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1531" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:40:54 EST 2021" docASTNodeCount="465" docActiveCodeLength="3488" docExpressionCount="284" docLength="3560" projectName="Hermes" starttimestamp="1612813070441" timestamp="3784143">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util."), Diff(DELETE,"Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.Tree"), Diff(INSERT,"HashMap;¶import java.util."), Diff(EQUAL,"Map;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	¶	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; ¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶			return "Search Result";¶		}¶		return "Link";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.HashMap;
import java.util.Map;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class WebCommand extends AbstractCommand implements EHICommand{
	private static final String XML_KEYWORD = "keyword";
	private static final String XML_URL = "URL";
//	private static final String XML_TITLE = "title";
	private static final String XML_TYPE = "type";
	private String keyword, url, type;	
	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",
			"http://zetcode.com/gfx/java2d/shapesandfills/", 
			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", 
			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", 
			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", 
			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", 
			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", 
			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; 

	public WebCommand() {}
	
	public WebCommand(String keyword, String url) {
		this.keyword = keyword;
		this.url = url;
		//this.title = title;
		type = getType();
	}
	
	private String getType() {
		for (String providedURL : PROVIDED_URL) {
			if (url.equals(providedURL)) {
				return "Instructor Provided Link";
			}
		}
		if (keyword.contains("Google Search")) {
			return "Search";
		}
		if (keyword.contains("Stack Overflow")) {
			return "Stack Overflow";
		}
		if (keyword.equals(url) && keyword.contains("google.com/url?")) {
			return "Search Result";
		}
		return "Link";
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_TYPE, type);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new HashMap<String, String>();
		dataMap.put(XML_KEYWORD, keyword);
		dataMap.put(XML_URL, url);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "WebCommand";
	}

	@Override
	public String getName() {
		return "Web";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			keyword = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			type = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			url = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="1534" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:41:04 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1612813070441" timestamp="3793590">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class PauseCommand extends AbstractCommand implements EHICommand{
	private static final String XML_RANGE = "range";
	private static final String XML_PREV = "prev";
	private static final String XML_NEXT = "next";
	private static final String XML_PAUSE = "pause";
	private static final String XML_PREV_TYPE = "prevType";
	private static final String XML_NEXT_TYPE = "nextType";
	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; 
	private String prev, next, range, prevType, nextType;
	private long pause;

	public PauseCommand() {}
	
	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {
		this.prev = prev.getCommandType();
		this.next = next.getCommandType();
		this.pause = pause;
		this.range = range;
		prevType = getType(prev);
		nextType = getType(next);
	}
	
	private String getType(EHICommand command) {
		if (command instanceof InsertStringCommand || command instanceof Insert ||
				command instanceof CopyCommand ||
				command instanceof Delete ||
				command instanceof Replace || command instanceof PasteCommand ||
				command instanceof AssistCommand) {
			return TYPES[0];
		}
		if (command instanceof RunCommand && (command.getAttributesMap().get("type").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {
			return TYPES[1];
		}
		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {
			return TYPES[2];
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return TYPES[3];
		}
		if (command instanceof ExceptionCommand) {
			return TYPES[4];
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return TYPES[5];
		}
		if (command instanceof WebCommand) {
			return TYPES[6];
		}
		if (command instanceof EclipseCommand) {
			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();
			if (id.contains("delete")) {
				return TYPES[0];
			}
			if (id.contains("save")) {
				return TYPES[7];
			}
			if (id.contains("terminate")) {
				return TYPES[10];
			}
			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {
				return TYPES[12];
			}
		}
		if (command instanceof ShellCommand) {
			String type = command.getAttributesMap().get("type").toLowerCase();
			if (type.contains("gained_focus")) {
				return TYPES[8];
			}
			if (type.contains("lost_focus") || type.contains("minimized")) {
				return TYPES[9];
			}
		}
		if (command instanceof DifficultyCommand) {
			return TYPES[11];
		}
		if (command instanceof MoveCaretCommand) {
			return TYPES[12];
		}
		if (command instanceof FileOpenCommand) {
			return TYPES[13];
		}
		if (command instanceof SelectTextCommand) {
			return TYPES[14];
		}
		if (command instanceof CompilationCommand) {
			return TYPES[15];
		}
		return TYPES[16];
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_RANGE, range);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());
		dataMap.put(XML_PREV, prev);
		dataMap.put(XML_NEXT, next);
		dataMap.put(XML_PAUSE, pause+"");
		dataMap.put(XML_PREV_TYPE, prevType);
		dataMap.put(XML_NEXT_TYPE, nextType);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "PauseCommand";
	}

	@Override
	public String getName() {
		return "Pause";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prev = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			next = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			pause = Long.parseLong(textNode.getTextContent());
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			range = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prevType = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			nextType = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="1537" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:41:04 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26663" docExpressionCount="3162" docLength="27753" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3794485">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶"), Diff(DELETE,"//					if (studentFolder.getName().equals("30")) {¶//						int a = 0;¶//					} else {¶//						latch.countDown();¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						return;¶//					}¶"), Diff(EQUAL,"					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							"), Diff(INSERT,"long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶							"), Diff(EQUAL,"for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶"), Diff(INSERT,"//"), Diff(EQUAL,"									boolean webCommandAdded = false;¶"), Diff(INSERT,"//"), Diff(EQUAL,"									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand,"), Diff(INSERT," webCommandIterator,"), Diff(EQUAL," startTimestamp)) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"										webCommandAdded = true;¶"), Diff(INSERT,"//"), Diff(EQUAL,"										last = webCommand;¶"), Diff(INSERT,"//"), Diff(EQUAL,"										try {¶"), Diff(INSERT,"//"), Diff(EQUAL,"											webCommand = webCommandIterator.next();¶"), Diff(INSERT,"//"), Diff(EQUAL,"										} catch (NoSuchElementException e) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"											webCommand = null;¶"), Diff(INSERT,"//"), Diff(EQUAL,"										}¶"), Diff(INSERT,"//"), Diff(EQUAL,"									} ¶"), Diff(INSERT,"//"), Diff(EQUAL,"									if (!webCommandAdded) {¶"), Diff(INSERT,"//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getStartTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶"), Diff(EQUAL,"										maybeAddPauseCommand(newCommands, last, cur);¶"), Diff(INSERT,"//"), Diff(EQUAL,"									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private "), Diff(DELETE,"boole"), Diff(INSERT,"EHIComm"), Diff(EQUAL,"an"), Diff(INSERT,"d"), Diff(EQUAL," maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand,"), Diff(INSERT," Iterator<EHICommand> webCommandIterator,"), Diff(EQUAL," long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		"), Diff(DELETE,"if"), Diff(INSERT,"boolean added = false;¶		while"), Diff(EQUAL," (webCommand "), Diff(DELETE,"="), Diff(INSERT,"!"), Diff(EQUAL,"= null "), Diff(DELETE,"||"), Diff(INSERT,"&&"), Diff(EQUAL," timestamp "), Diff(DELETE,"<"), Diff(INSERT,">="), Diff(EQUAL," last.getTimestamp() "), Diff(DELETE,"||"), Diff(INSERT,"&&"), Diff(EQUAL," timestamp "), Diff(DELETE,">"), Diff(INSERT,"<="), Diff(EQUAL," cur.getTimestamp()) {¶			"), Diff(DELETE,"return false;¶		}¶		"), Diff(EQUAL,"webCommand.setStartTimestamp(0);¶		"), Diff(INSERT,"	webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = "), Diff(EQUAL,"webCommand."), Diff(DELETE,"s"), Diff(INSERT,"g"), Diff(EQUAL,"et"), Diff(INSERT,"Start"), Diff(EQUAL,"Timestamp("), Diff(DELETE,"timestamp);¶"), Diff(INSERT,") - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶	"), Diff(EQUAL,"		maybeAddPauseCommand(newCommands, last,"), Diff(DELETE,"	"), Diff(INSERT," cur);¶			return "), Diff(EQUAL,"webCommand"), Diff(DELETE,")"), Diff(EQUAL,";¶"), Diff(INSERT,"		}¶"), Diff(EQUAL,"//		newCommands.add(webCommand);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return "), Diff(DELETE,"true"), Diff(INSERT,"null"), Diff(EQUAL,";¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getStartTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = webCommand.getStartTimestamp() - startTimestamp;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getStartTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
		boolean added = false;
		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			maybeAddPauseCommand(newCommands, last,	webCommand);
			added = true;
			if (webCommandIterator.hasNext()) {
				last = webCommand;
				webCommand = webCommandIterator.next();
				timestamp = webCommand.getStartTimestamp() - startTimestamp;
			} else {
				break;
			}
		}
		if (added) {
			maybeAddPauseCommand(newCommands, last, cur);
			return webCommand;
		}
//		newCommands.add(webCommand);
//		maybeAddPauseCommand(newCommands, webCommand, cur);
		return null;
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getStartTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
}
]]></snapshot>
  </Command>
  <Command __id="1539" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:41:11 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36295" docExpressionCount="4220" docLength="36350" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3800630">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	protected static final String REST_INSESSION = "Rest(In Session)";
	protected static final String REST_ENDSESSION = "Rest(End Session)";
	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	protected static final String XML_START1 = "<Events startTimestamp=\"";
	protected static final String XML_START2 = "\" logVersion=\"";
	protected static final String XML_VERSION = "1.0.0.202008151525";
	protected static final String XML_START3 = "\">\r\n";
	protected static final String XML_FILE_ENDING = "\r\n</Events>"; 
	protected static final long ONE_SECOND = 1000;
	protected static final long ONE_MIN = 60*1000;
	protected static final long TEN_MIN = 10*ONE_MIN;
	protected static final long FIVE_MIN = 5*ONE_MIN;
	protected static final long HALF_MIN = ONE_MIN/2;
	protected static final long TWO_MIN = 2*ONE_MIN;
	protected static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	protected int threadCount = 0;
	protected CountDownLatch latch;
	protected Analyzer analyzer;
	private static final int THREAD_LIM = 3;
	private int count = 0;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};

	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	protected String getEventType(EHICommand command) {
		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	protected boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			int k = 0;
			for(; k < commands.size(); k++) {
				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {
					break;
				}
			}
			for(; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						webCommand = new WebCommand(keyword, url);
						webCommand.setStartTimestamp(date.getTime());
						retVal.add(0, webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
	
	protected long getLogFileCreationTime(File file) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
		try {
			return df.parse(file.getName().substring(3, 27)).getTime();
		} catch (ParseException e) {
			e.printStackTrace();
			return 0;
		}
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="1545" _type="Replace" date="Mon Feb 08 15:41:15 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36279" docExpressionCount="4220" docLength="36334" endLine="1010" insertionLength="1" int_docASTNodeCount="6291" int_docActiveCodeLength="36278" int_docExpressionCount="4218" int_docLength="36333" length="17" offset="34697" startLine="1010" starttimestamp="1612813070441" timestamp="3804857">
    <deletedText><![CDATA[setStartTimestamp]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1548" _type="Insert" date="Mon Feb 08 15:41:15 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36282" docExpressionCount="4220" docLength="36337" length="3" offset="34698" repeat="3" starttimestamp="1612813070441" timestamp="3804891" timestamp2="3805123">
    <text><![CDATA[ime]]></text>
  </DocumentChange>
  <DocumentChange __id="1553" _type="Delete" date="Mon Feb 08 15:41:16 EST 2021" docASTNodeCount="6291" docActiveCodeLength="36278" docExpressionCount="4218" docLength="36333" endLine="1010" length="4" offset="34697" startLine="1010" starttimestamp="1612813070441" timestamp="3805843">
    <text><![CDATA[time]]></text>
  </DocumentChange>
  <DocumentChange __id="1555" _type="Insert" date="Mon Feb 08 15:41:16 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36281" docExpressionCount="4220" docLength="36336" length="3" offset="34697" repeat="3" starttimestamp="1612813070441" timestamp="3806046" timestamp2="3806265">
    <text><![CDATA[ste]]></text>
  </DocumentChange>
  <DocumentChange __id="1558" _type="Delete" date="Mon Feb 08 15:41:17 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36279" docExpressionCount="4220" docLength="36334" endLine="1010" length="2" offset="34698" repeat="2" startLine="1010" starttimestamp="1612813070441" timestamp="3806766" timestamp2="3806895">
    <text><![CDATA[te]]></text>
  </DocumentChange>
  <DocumentChange __id="1560" _type="Insert" date="Mon Feb 08 15:41:17 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36284" docExpressionCount="4220" docLength="36339" length="5" offset="34698" repeat="5" starttimestamp="1612813070441" timestamp="3806998" timestamp2="3807442">
    <text><![CDATA[ettim]]></text>
  </DocumentChange>
  <DocumentChange __id="1566" _type="Replace" date="Mon Feb 08 15:41:18 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36302" docExpressionCount="4222" docLength="36357" endLine="1010" insertionLength="24" int_docASTNodeCount="6291" int_docActiveCodeLength="36278" int_docExpressionCount="4218" int_docLength="36333" length="6" offset="34697" startLine="1010" starttimestamp="1612813070441" timestamp="3807695">
    <deletedText><![CDATA[settim]]></deletedText>
    <insertedText><![CDATA[setTimestamp(timestamp);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1568" _type="Delete" date="Mon Feb 08 15:41:18 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36290" docExpressionCount="4220" docLength="36345" endLine="1010" length="12" offset="34709" repeat="4" startLine="1010" starttimestamp="1612813070441" timestamp="3808533" timestamp2="3809284">
    <text><![CDATA[(timestamp);]]></text>
  </DocumentChange>
  <Command __id="1580" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:41:29 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26663" docExpressionCount="3162" docLength="27753" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3818847">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getStartTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		boolean added = false;¶		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶			maybeAddPauseCommand(newCommands, last, cur);¶			return webCommand;¶		}¶//		newCommands.add(webCommand);¶//		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return null;¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getStartTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1586" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:41:42 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36290" docExpressionCount="4220" docLength="36345" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3832377">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.set"), Diff(DELETE,"Start"), Diff(EQUAL,"Timestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	protected static final String REST_INSESSION = "Rest(In Session)";
	protected static final String REST_ENDSESSION = "Rest(End Session)";
	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	protected static final String XML_START1 = "<Events startTimestamp=\"";
	protected static final String XML_START2 = "\" logVersion=\"";
	protected static final String XML_VERSION = "1.0.0.202008151525";
	protected static final String XML_START3 = "\">\r\n";
	protected static final String XML_FILE_ENDING = "\r\n</Events>"; 
	protected static final long ONE_SECOND = 1000;
	protected static final long ONE_MIN = 60*1000;
	protected static final long TEN_MIN = 10*ONE_MIN;
	protected static final long FIVE_MIN = 5*ONE_MIN;
	protected static final long HALF_MIN = ONE_MIN/2;
	protected static final long TWO_MIN = 2*ONE_MIN;
	protected static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	protected int threadCount = 0;
	protected CountDownLatch latch;
	protected Analyzer analyzer;
	private static final int THREAD_LIM = 3;
	private int count = 0;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};

	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	protected String getEventType(EHICommand command) {
		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	protected boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			int k = 0;
			for(; k < commands.size(); k++) {
				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {
					break;
				}
			}
			for(; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						webCommand = new WebCommand(keyword, url);
						webCommand.setTimestamp(date.getTime());
						retVal.add(0, webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
	
	protected long getLogFileCreationTime(File file) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
		try {
			return df.parse(file.getName().substring(3, 27)).getTime();
		} catch (ParseException e) {
			e.printStackTrace();
			return 0;
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="1589" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:41:46 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26663" docExpressionCount="3162" docLength="27753" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3836526">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getStartTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		boolean added = false;¶		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶			maybeAddPauseCommand(newCommands, last, cur);¶			return webCommand;¶		}¶//		newCommands.add(webCommand);¶//		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return null;¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getStartTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1596" _type="Replace" date="Mon Feb 08 15:41:51 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26647" docExpressionCount="3162" docLength="27737" endLine="134" insertionLength="1" int_docASTNodeCount="4598" int_docActiveCodeLength="26646" int_docExpressionCount="3162" int_docLength="27736" length="17" offset="4904" startLine="134" starttimestamp="1612813070441" timestamp="3840854">
    <deletedText><![CDATA[getStartTimestamp]]></deletedText>
    <insertedText><![CDATA[g]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1599" _type="Insert" date="Mon Feb 08 15:41:51 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26652" docExpressionCount="3162" docLength="27742" length="5" offset="4905" repeat="5" starttimestamp="1612813070441" timestamp="3841014" timestamp2="3841366">
    <text><![CDATA[ettim]]></text>
  </DocumentChange>
  <DocumentChange __id="1605" _type="Replace" date="Mon Feb 08 15:41:52 EST 2021" docASTNodeCount="4597" docActiveCodeLength="26660" docExpressionCount="3161" docLength="27750" endLine="134" insertionLength="14" int_docASTNodeCount="4598" int_docActiveCodeLength="26646" int_docExpressionCount="3162" int_docLength="27736" length="6" offset="4904" startLine="134" starttimestamp="1612813070441" timestamp="3841650">
    <deletedText><![CDATA[gettim]]></deletedText>
    <insertedText><![CDATA[getTimestamp()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1607" _type="Delete" date="Mon Feb 08 15:41:52 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26658" docExpressionCount="3162" docLength="27748" endLine="134" length="2" offset="4916" repeat="2" startLine="134" starttimestamp="1612813070441" timestamp="3842263" timestamp2="3842362">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="1616" _type="Replace" date="Mon Feb 08 15:41:56 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26642" docExpressionCount="3162" docLength="27732" endLine="103" insertionLength="1" int_docASTNodeCount="4598" int_docActiveCodeLength="26641" int_docExpressionCount="3162" int_docLength="27731" length="17" offset="3610" startLine="103" starttimestamp="1612813070441" timestamp="3846346">
    <deletedText><![CDATA[getStartTimestamp]]></deletedText>
    <insertedText><![CDATA[g]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1619" _type="Insert" date="Mon Feb 08 15:41:56 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26645" docExpressionCount="3162" docLength="27735" length="3" offset="3611" repeat="3" starttimestamp="1612813070441" timestamp="3846511" timestamp2="3846790">
    <text><![CDATA[ett]]></text>
  </DocumentChange>
  <Command __id="1612" _type="PauseCommand" date="Mon Feb 08 15:41:55 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3845327">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2959]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1611" _type="SelectTextCommand" caretOffset="1993" date="Mon Feb 08 15:41:55 EST 2021" end="2093" start="1993" starttimestamp="1612813070441" timestamp="3845327" />
  <Command __id="1613" _type="SelectTextCommand" caretOffset="2000" date="Mon Feb 08 15:41:55 EST 2021" end="2000" start="1972" starttimestamp="1612813070441" timestamp="3845495" />
  <Command __id="1614" _type="MoveCaretCommand" caretOffset="2091" date="Mon Feb 08 15:41:56 EST 2021" docOffset="3614" starttimestamp="1612813070441" timestamp="3846020" />
  <Command __id="1615" _type="SelectTextCommand" caretOffset="2104" date="Mon Feb 08 15:41:56 EST 2021" end="2104" start="2087" starttimestamp="1612813070441" timestamp="3846162" />
  <Command __id="1617" _type="InsertStringCommand" date="Mon Feb 08 15:41:56 EST 2021" starttimestamp="1612813070441" timestamp="3846355" timestamp2="3846355">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1618" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:41:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3846391" />
  <Command __id="1622" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:41:58 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3847733" />
  <Command __id="1624" _type="InsertStringCommand" date="Mon Feb 08 15:41:58 EST 2021" starttimestamp="1612813070441" timestamp="3847754" timestamp2="3847754">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1625" _type="MoveCaretCommand" caretOffset="2106" date="Mon Feb 08 15:41:59 EST 2021" docOffset="3629" starttimestamp="1612813070441" timestamp="3848568" />
  <Command __id="1626" _type="MoveCaretCommand" caretOffset="2104" date="Mon Feb 08 15:41:59 EST 2021" docOffset="3627" starttimestamp="1612813070441" timestamp="3849047" />
  <Command __id="1627" _type="MoveCaretCommand" caretOffset="2102" date="Mon Feb 08 15:42:00 EST 2021" docOffset="3625" starttimestamp="1612813070441" timestamp="3849703" />
  <Command __id="1629" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:42:00 EST 2021" starttimestamp="1612813070441" timestamp="3849842" />
  <Command __id="1631" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:42:00 EST 2021" starttimestamp="1612813070441" timestamp="3849964" />
  <Command __id="1632" _type="MoveCaretCommand" caretOffset="2095" date="Mon Feb 08 15:42:01 EST 2021" docOffset="3618" starttimestamp="1612813070441" timestamp="3850809" />
  <Command __id="1633" _type="SelectTextCommand" caretOffset="7032" date="Mon Feb 08 15:42:01 EST 2021" end="7032" start="7004" starttimestamp="1612813070441" timestamp="3851528" />
  <Command __id="1635" _type="PauseCommand" date="Mon Feb 08 15:42:04 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3854095">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2567]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1634" _type="MoveCaretCommand" caretOffset="7298" date="Mon Feb 08 15:42:04 EST 2021" docOffset="27560" starttimestamp="1612813070441" timestamp="3854095" />
  <Command __id="1636" _type="SelectTextCommand" caretOffset="7311" date="Mon Feb 08 15:42:04 EST 2021" end="7311" start="7294" starttimestamp="1612813070441" timestamp="3854416" />
  <Command __id="1638" _type="InsertStringCommand" date="Mon Feb 08 15:42:05 EST 2021" starttimestamp="1612813070441" timestamp="3854981" timestamp2="3854981">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1639" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:42:05 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3855046" />
  <Command __id="1643" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:42:07 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3856793" />
  <Command __id="1645" _type="InsertStringCommand" date="Mon Feb 08 15:42:07 EST 2021" starttimestamp="1612813070441" timestamp="3856819" timestamp2="3856819">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1647" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:42:07 EST 2021" starttimestamp="1612813070441" timestamp="3857230" />
  <Command __id="1649" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:42:07 EST 2021" starttimestamp="1612813070441" timestamp="3857343" />
  <Command __id="1650" _type="MoveCaretCommand" caretOffset="7370" date="Mon Feb 08 15:42:08 EST 2021" docOffset="27632" starttimestamp="1612813070441" timestamp="3858065" />
  <Command __id="1652" _type="PauseCommand" date="Mon Feb 08 15:42:13 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3862857">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4792]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1651" _type="MoveCaretCommand" caretOffset="7410" date="Mon Feb 08 15:42:13 EST 2021" docOffset="27672" starttimestamp="1612813070441" timestamp="3862857" />
  <Command __id="1654" _type="PauseCommand" date="Mon Feb 08 15:42:16 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3865905">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3048]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1653" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:42:16 EST 2021" starttimestamp="1612813070441" timestamp="3865905" />
  <Command __id="1656" _type="PauseCommand" date="Mon Feb 08 15:42:19 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3869058">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3153]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1655" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.forwardHistory" date="Mon Feb 08 15:42:19 EST 2021" starttimestamp="1612813070441" timestamp="3869058" />
  <Command __id="1658" _type="PauseCommand" date="Mon Feb 08 15:42:21 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3871214">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2156]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1657" _type="MoveCaretCommand" caretOffset="7440" date="Mon Feb 08 15:42:21 EST 2021" docOffset="27702" starttimestamp="1612813070441" timestamp="3871214" />
  <Command __id="1660" _type="PauseCommand" date="Mon Feb 08 15:42:33 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="3883208">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[11994]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1659" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:42:33 EST 2021" starttimestamp="1612813070441" timestamp="3883208" />
  <Command __id="1662" _type="PauseCommand" date="Mon Feb 08 15:42:41 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3890671">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7463]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1661" _type="MoveCaretCommand" caretOffset="1075" date="Mon Feb 08 15:42:41 EST 2021" docOffset="2598" starttimestamp="1612813070441" timestamp="3890671" />
  <Command __id="1664" _type="PauseCommand" date="Mon Feb 08 15:42:43 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3893230">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2559]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1663" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 15:42:43 EST 2021" starttimestamp="1612813070441" timestamp="3893230" />
  <Command __id="1665" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:42:43 EST 2021" starttimestamp="1612813070441" timestamp="3893320" />
  <Command __id="1666" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:42:43 EST 2021" starttimestamp="1612813070441" timestamp="3893469" />
  <Command __id="1668" _type="PauseCommand" date="Mon Feb 08 15:42:45 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3894619">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1150]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1669" _type="MoveCaretCommand" caretOffset="499" date="Mon Feb 08 15:42:45 EST 2021" docOffset="526" starttimestamp="1612813070441" timestamp="3894762" />
  <Command __id="1671" _type="PauseCommand" date="Mon Feb 08 15:42:47 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3896705">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1943]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1670" _type="MoveCaretCommand" caretOffset="835" date="Mon Feb 08 15:42:47 EST 2021" docOffset="862" starttimestamp="1612813070441" timestamp="3896705" />
  <Command __id="1672" _type="MoveCaretCommand" caretOffset="829" date="Mon Feb 08 15:42:47 EST 2021" docOffset="856" starttimestamp="1612813070441" timestamp="3897421" />
  <Command __id="1674" _type="SelectTextCommand" caretOffset="2023" date="Mon Feb 08 15:42:48 EST 2021" end="2023" start="2010" starttimestamp="1612813070441" timestamp="3898557" />
  <Command __id="1676" _type="PauseCommand" date="Mon Feb 08 15:42:50 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3899915">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1358]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1677" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 08 15:42:50 EST 2021" starttimestamp="1612813070441" timestamp="3899984" />
  <Command __id="1678" _type="MoveCaretCommand" caretOffset="829" date="Mon Feb 08 15:42:50 EST 2021" docOffset="856" starttimestamp="1612813070441" timestamp="3900100" />
  <Command __id="1680" _type="PauseCommand" date="Mon Feb 08 15:42:51 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3901183">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1083]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1679" _type="MoveCaretCommand" caretOffset="777" date="Mon Feb 08 15:42:51 EST 2021" docOffset="804" starttimestamp="1612813070441" timestamp="3901183" />
  <Command __id="1682" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 15:42:52 EST 2021" starttimestamp="1612813070441" timestamp="3902141" />
  <Command __id="1683" _type="MoveCaretCommand" caretOffset="830" date="Mon Feb 08 15:42:53 EST 2021" docOffset="857" starttimestamp="1612813070441" timestamp="3902642" />
  <Command __id="1694" _type="PauseCommand" date="Mon Feb 08 15:42:58 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3908378">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2094]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1693" _type="RunCommand" date="Mon Feb 08 15:42:58 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3908378" type="Run" />
  <Command __id="1695" _type="RunCommand" date="Mon Feb 08 15:42:58 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3908378" type="Run" />
  <Command __id="1697" _type="PauseCommand" date="Mon Feb 08 15:42:59 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3909379">
    <type><![CDATA[Run]]></type>
    <rest><![CDATA[1001]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1696" _type="ConsoleOutput" date="Mon Feb 08 15:42:59 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3909379" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Log2013-09-13-09-53-29-705.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Log2013-09-17-10-06-32-242.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Log2013-09-12-15-05-47-820.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1698" _type="ConsoleOutput" date="Mon Feb 08 15:42:59 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3909535" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"20"), Diff(INSERT,"16"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-40-05-321.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml¶Reading"), Diff(INSERT,"4-36-31-023.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-"), Diff(DELETE,"09-53-29-705"), Diff(INSERT,"14-36-31-023"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"8"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"7"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-06-32-242.xml¶Reading"), Diff(INSERT,"4-39-52-726.xml¶Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"9"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"5-05-47-820.xml¶Reading"), Diff(INSERT,"4-39-52-726.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-3"), Diff(DELETE,"6-31-023"), Diff(INSERT,"9-52-726"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"2"), Diff(EQUAL,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-05-18-71"), Diff(INSERT,"4-54-59-87"), Diff(EQUAL,"8.xml¶")]]]></diff>
  </Command>
  <Command __id="1699" _type="ShellCommand" date="Mon Feb 08 15:43:00 EST 2021" starttimestamp="1612813070441" timestamp="3910186" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1700" _type="ShellCommand" date="Mon Feb 08 15:43:01 EST 2021" starttimestamp="1612813070441" timestamp="3911111" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1701" _type="ConsoleOutput" date="Mon Feb 08 15:43:01 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3911531" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-"), Diff(EQUAL,"09-"), Diff(DELETE,"1"), Diff(INSERT,"5"), Diff(EQUAL,"3-"), Diff(DELETE,"14-54-59-878"), Diff(INSERT,"29-705"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1702" _type="ConsoleOutput" date="Mon Feb 08 15:43:02 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3912381" type="ConsoleOutput">
    <outputString><![CDATA[Reading 24
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-09-48-24-508.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml¶Finished writing to file"), Diff(INSERT,"Reading 24¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"17"), Diff(INSERT,"23"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"-09-"), Diff(DELETE,"53-29-705"), Diff(INSERT,"48-24-508"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1703" _type="ConsoleOutput" date="Mon Feb 08 15:43:03 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3912883" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 24¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-14-09-48-24-508.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267.xml¶")]]]></diff>
  </Command>
  <Command __id="1705" _type="PauseCommand" date="Mon Feb 08 15:43:12 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3922453">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9570]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1704" _type="ConsoleOutput" date="Mon Feb 08 15:43:12 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3922453" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading 26
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-12-59-39-052.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-"), Diff(DELETE,"09-48-24-508"), Diff(INSERT,"10-54-43-267"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-"), Diff(DELETE,"09-48-24-508"), Diff(INSERT,"10-54-43-267"), Diff(EQUAL,".xml¶"), Diff(INSERT,"Reading 26¶"), Diff(EQUAL,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Log2013-09-14-1"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"-5"), Diff(DELETE,"4-43-267"), Diff(INSERT,"9-39-052"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1706" _type="ShellCommand" date="Mon Feb 08 15:43:13 EST 2021" starttimestamp="1612813070441" timestamp="3922902" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1707" _type="ConsoleOutput" date="Mon Feb 08 15:43:14 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3923560" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-14-1"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"-5"), Diff(DELETE,"4-43-267"), Diff(INSERT,"9-39-052"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-14-1"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"-5"), Diff(DELETE,"4-43-267.xml¶Reading 26"), Diff(INSERT,"9-39-052.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-1"), Diff(DELETE,"2-59-3"), Diff(INSERT,"3-40-0"), Diff(EQUAL,"9-"), Diff(DELETE,"0"), Diff(INSERT,"5"), Diff(EQUAL,"52.xml¶")]]]></diff>
  </Command>
  <Command __id="1709" _type="PauseCommand" date="Mon Feb 08 15:43:21 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3931084">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7524]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1708" _type="ConsoleOutput" date="Mon Feb 08 15:43:21 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3931084" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"2-59-39-052"), Diff(INSERT,"0-05-18-718"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"2-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013"), Diff(INSERT,"0"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"5"), Diff(EQUAL,"-1"), Diff(DELETE,"4-13-40-09-552"), Diff(INSERT,"8-718"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1710" _type="ConsoleOutput" date="Mon Feb 08 15:43:21 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3931392" type="ConsoleOutput">
    <outputString><![CDATA[Reading 27
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-14-39-04-982.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml¶Finished writing to file"), Diff(INSERT,"Reading 27¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-05-18-718"), Diff(INSERT,"4-39-04-982"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1712" _type="PauseCommand" date="Mon Feb 08 15:43:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3932437">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1045]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1711" _type="ConsoleOutput" date="Mon Feb 08 15:43:22 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3932437" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 27¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-18-14-39-04-982.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml¶")]]]></diff>
  </Command>
  <Command __id="1714" _type="PauseCommand" date="Mon Feb 08 15:43:28 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3938314">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5877]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1713" _type="ConsoleOutput" date="Mon Feb 08 15:43:28 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3938314" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"26"), Diff(INSERT,"18"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-39-04-98"), Diff(INSERT,"0-06-32-24"), Diff(EQUAL,"2.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"26"), Diff(INSERT,"18"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1715" _type="ConsoleOutput" date="Mon Feb 08 15:43:28 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3938400" type="ConsoleOutput">
    <outputString><![CDATA[Reading 28
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶Finished writing to file"), Diff(INSERT,"Reading 28¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"27"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"17"), Diff(INSERT,"20"), Diff(EQUAL,"-10-"), Diff(DELETE,"06-32-242"), Diff(INSERT,"17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1717" _type="PauseCommand" date="Mon Feb 08 15:43:36 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3945701">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7301]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1716" _type="ConsoleOutput" date="Mon Feb 08 15:43:36 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3945701" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 28¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"0"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(INSERT,"1"), Diff(EQUAL,"2"), Diff(DELETE,"0"), Diff(EQUAL,"-10-"), Diff(DELETE,"17-49-07"), Diff(INSERT,"40-05-32"), Diff(EQUAL,"1.xml¶")]]]></diff>
  </Command>
  <Command __id="1718" _type="ConsoleOutput" date="Mon Feb 08 15:43:36 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3946271" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"20"), Diff(INSERT,"16"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-40-05-321"), Diff(INSERT,"4-54-59-878"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"20"), Diff(INSERT,"16"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-40-05-321"), Diff(INSERT,"4-54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1719" _type="ConsoleOutput" date="Mon Feb 08 15:43:36 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3946403" type="ConsoleOutput">
    <outputString><![CDATA[Reading 29
Reading 30
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Log2013-09-23-12-56-55-221.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file"), Diff(INSERT,"Reading 29¶Reading 30¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"16"), Diff(INSERT,"29"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"3-1"), Diff(DELETE,"4"), Diff(INSERT,"2"), Diff(EQUAL,"-5"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"-5"), Diff(DELETE,"9-878"), Diff(INSERT,"5-221"), Diff(EQUAL,".xml¶"), Diff(DELETE,"Finished writing to file"), Diff(INSERT,"Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"16"), Diff(INSERT,"28"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"13"), Diff(INSERT,"20"), Diff(EQUAL,"-14-"), Diff(DELETE,"54-59-878"), Diff(INSERT,"30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1721" _type="PauseCommand" date="Mon Feb 08 15:43:38 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3948411">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2008]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1720" _type="ConsoleOutput" date="Mon Feb 08 15:43:38 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3948411" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 29¶Reading 30¶Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"9"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"23-12-56-55"), Diff(INSERT,"18-15-33-03"), Diff(EQUAL,"-22"), Diff(DELETE,"1"), Diff(INSERT,"6"), Diff(EQUAL,".xml¶"), Diff(DELETE,"Reading"), Diff(INSERT,"Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"20"), Diff(INSERT,"18"), Diff(EQUAL,"-1"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL,"-3"), Diff(DELETE,"0-38-379"), Diff(INSERT,"3-03-226"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1722" _type="ConsoleOutput" date="Mon Feb 08 15:43:39 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3948940" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5-33-03-226"), Diff(INSERT,"3-40-09-552"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5-33-03-226"), Diff(INSERT,"3-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1723" _type="ConsoleOutput" date="Mon Feb 08 15:43:39 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3949409" type="ConsoleOutput">
    <outputString><![CDATA[Reading 31
Reading 32
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Log2013-09-11-15-13-48-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Log2013-09-06-16-07-40-790.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file"), Diff(INSERT,"Reading 31¶Reading 32¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"24"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"1-15"), Diff(EQUAL,"-13-4"), Diff(DELETE,"0-09-552.xml¶Finished writing to file"), Diff(INSERT,"8-829.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"24"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"14-13-40-09-552"), Diff(INSERT,"06-16-07-40-790"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1725" _type="PauseCommand" date="Mon Feb 08 15:43:45 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="3954800">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5391]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1724" _type="ConsoleOutput" date="Mon Feb 08 15:43:45 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3954800" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 31¶Reading 32¶Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"19"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"-15-"), Diff(DELETE,"13"), Diff(INSERT,"05"), Diff(EQUAL,"-4"), Diff(DELETE,"8"), Diff(INSERT,"7"), Diff(EQUAL,"-82"), Diff(DELETE,"9"), Diff(INSERT,"0"), Diff(EQUAL,".xml¶"), Diff(DELETE,"Reading"), Diff(INSERT,"Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(EQUAL,"1"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"06"), Diff(INSERT,"12"), Diff(EQUAL,"-1"), Diff(DELETE,"6"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"7"), Diff(INSERT,"5"), Diff(EQUAL,"-4"), Diff(DELETE,"0-79"), Diff(INSERT,"7-82"), Diff(EQUAL,"0.xml¶")]]]></diff>
  </Command>
  <Command __id="1726" _type="ConsoleOutput" date="Mon Feb 08 15:43:45 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3955457" type="ConsoleOutput">
    <outputString><![CDATA[Reading 33
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Log2013-09-13-12-11-53-568.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file"), Diff(INSERT,"Reading 33¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"32"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"2-15-05-47-820.xml¶Finished w"), Diff(INSERT,"3-12-11-53-568.xml¶W"), Diff(EQUAL,"riting to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"32"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2-15-05-47-820"), Diff(INSERT,"3-12-11-53-568"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1727" _type="ConsoleOutput" date="Mon Feb 08 15:43:45 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3955522" type="ConsoleOutput">
    <outputString><![CDATA[Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 33¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Log2013-09-13-12-11-53-568.xml¶W"), Diff(INSERT,"Finished w"), Diff(EQUAL,"riting to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml¶")]]]></diff>
  </Command>
  <Command __id="1728" _type="ExceptionCommand" date="Mon Feb 08 15:43:46 EST 2021" starttimestamp="1612813070441" timestamp="3956465" type="Exception">
    <exceptionString><![CDATA[Reading pd1
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-35-18-862.xml
java.lang.NullPointerException
	at logAnalyzer.AExperimentalReplayer$3.run(AExperimentalReplayer.java:104)
	at java.lang.Thread.run(Thread.java:748)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1730" _type="PauseCommand" date="Mon Feb 08 15:43:47 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3957465">
    <type><![CDATA[Exception]]></type>
    <rest><![CDATA[1000]]></rest>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1729" _type="ExceptionCommand" date="Mon Feb 08 15:43:47 EST 2021" starttimestamp="1612813070441" timestamp="3957465" type="Exception">
    <exceptionString><![CDATA[Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-09-23-822.xml
java.lang.NullPointerException
	at logAnalyzer.AExperimentalReplayer$3.run(AExperimentalReplayer.java:104)
	at java.lang.Thread.run(Thread.java:748)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1731" _type="ExceptionCommand" date="Mon Feb 08 15:43:48 EST 2021" starttimestamp="1612813070441" timestamp="3958418" type="Exception">
    <exceptionString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-12-25-59-852.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-13-38-06-627.xml
java.lang.NullPointerException
	at logAnalyzer.AExperimentalReplayer$3.run(AExperimentalReplayer.java:104)
	at java.lang.Thread.run(Thread.java:748)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1733" _type="PauseCommand" date="Mon Feb 08 15:43:51 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3961484">
    <type><![CDATA[Exception]]></type>
    <rest><![CDATA[3066]]></rest>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1732" _type="ConsoleOutput" date="Mon Feb 08 15:43:51 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3961484" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml¶"), Diff(EQUAL,"Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"13-12-11-53-568"), Diff(INSERT,"06-16-07-40-790"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1734" _type="ShellCommand" date="Mon Feb 08 15:43:52 EST 2021" starttimestamp="1612813070441" timestamp="3962436" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1736" _type="SelectTextCommand" caretOffset="2119" date="Mon Feb 08 15:43:53 EST 2021" end="2119" start="2052" starttimestamp="1612813070441" timestamp="3963521" />
  <Command __id="1738" _type="PauseCommand" date="Mon Feb 08 15:43:58 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3968191">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4670]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1737" _type="MoveCaretCommand" caretOffset="1985" date="Mon Feb 08 15:43:58 EST 2021" docOffset="3508" starttimestamp="1612813070441" timestamp="3968191" />
  <Command __id="1740" _type="PauseCommand" date="Mon Feb 08 15:44:01 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3971450">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3259]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1739" _type="MoveCaretCommand" caretOffset="2059" date="Mon Feb 08 15:44:01 EST 2021" docOffset="3582" starttimestamp="1612813070441" timestamp="3971450" />
  <Command __id="1742" _type="PauseCommand" date="Mon Feb 08 15:44:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3973447">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1997]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1741" _type="ConsoleOutput" date="Mon Feb 08 15:44:03 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3973447" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"31"), Diff(INSERT,"29"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"06-16-07-40-790"), Diff(INSERT,"23-12-56-55-221"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"31"), Diff(INSERT,"29"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"06-16-07-40-790"), Diff(INSERT,"23-12-56-55-221"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1749" _type="PauseCommand" date="Mon Feb 08 15:44:14 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="3984344">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2235]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1748" _type="ConsoleOutput" date="Mon Feb 08 15:44:14 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="3984344" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1750" _type="RunCommand" date="Mon Feb 08 15:44:15 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3984646" type="Run" />
  <Command __id="1751" _type="RunCommand" date="Mon Feb 08 15:44:15 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3984647" type="Run" />
  <Command __id="1753" _type="PauseCommand" date="Mon Feb 08 15:44:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3985959">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1312]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1752" _type="SelectTextCommand" caretOffset="1966" date="Mon Feb 08 15:44:16 EST 2021" end="1967" start="1966" starttimestamp="1612813070441" timestamp="3985959" />
  <Command __id="1754" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:44:17 EST 2021" starttimestamp="1612813070441" timestamp="3986865" />
  <Command __id="1756" _type="InsertStringCommand" date="Mon Feb 08 15:44:17 EST 2021" starttimestamp="1612813070441" timestamp="3987106" timestamp2="3987106">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1758" _type="PauseCommand" date="Mon Feb 08 15:44:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3988241">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1135]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1759" _type="InsertStringCommand" date="Mon Feb 08 15:44:18 EST 2021" starttimestamp="1612813070441" timestamp="3988248" timestamp2="3988248">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1760" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:44:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3988288" />
  <Command __id="1762" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:44:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3988476" />
  <Command __id="1764" _type="InsertStringCommand" date="Mon Feb 08 15:44:19 EST 2021" starttimestamp="1612813070441" timestamp="3988637" timestamp2="3988637">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1766" _type="InsertStringCommand" date="Mon Feb 08 15:44:19 EST 2021" starttimestamp="1612813070441" timestamp="3989319" timestamp2="3989319">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1768" _type="InsertStringCommand" date="Mon Feb 08 15:44:19 EST 2021" starttimestamp="1612813070441" timestamp="3989354" timestamp2="3989354">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1769" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:44:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3989395" />
  <Command __id="1771" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:44:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3990280" />
  <Command __id="1773" _type="InsertStringCommand" date="Mon Feb 08 15:44:20 EST 2021" starttimestamp="1612813070441" timestamp="3990296" timestamp2="3990296">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1775" _type="InsertStringCommand" date="Mon Feb 08 15:44:21 EST 2021" starttimestamp="1612813070441" timestamp="3991054" timestamp2="3991054">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1777" _type="PauseCommand" date="Mon Feb 08 15:44:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3992386">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1332]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1778" _type="InsertStringCommand" date="Mon Feb 08 15:44:22 EST 2021" starttimestamp="1612813070441" timestamp="3992388" timestamp2="3992388">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1780" _type="PauseCommand" date="Mon Feb 08 15:44:23 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3993442">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1054]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1781" _type="InsertStringCommand" date="Mon Feb 08 15:44:23 EST 2021" starttimestamp="1612813070441" timestamp="3993444" timestamp2="3993444">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1783" _type="InsertStringCommand" date="Mon Feb 08 15:44:24 EST 2021" starttimestamp="1612813070441" timestamp="3994339" timestamp2="3994339">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1785" _type="InsertStringCommand" date="Mon Feb 08 15:44:24 EST 2021" starttimestamp="1612813070441" timestamp="3994451" timestamp2="3994451">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1786" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:44:24 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3994493" />
  <Command __id="1790" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:44:25 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3995091" />
  <Command __id="1791" _type="InsertStringCommand" date="Mon Feb 08 15:44:25 EST 2021" starttimestamp="1612813070441" timestamp="3995095" timestamp2="3995095">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1623" _type="Replace" date="Mon Feb 08 15:41:58 EST 2021" docASTNodeCount="4597" docActiveCodeLength="26655" docExpressionCount="3161" docLength="27745" endLine="103" insertionLength="14" int_docASTNodeCount="4598" int_docActiveCodeLength="26641" int_docExpressionCount="3162" int_docLength="27731" length="4" offset="3610" startLine="103" starttimestamp="1612813070441" timestamp="3847741">
    <deletedText><![CDATA[gett]]></deletedText>
    <insertedText><![CDATA[getTimestamp()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1628" _type="Delete" date="Mon Feb 08 15:42:00 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26653" docExpressionCount="3162" docLength="27743" endLine="103" length="2" offset="3623" repeat="2" startLine="103" starttimestamp="1612813070441" timestamp="3849834" timestamp2="3849957">
    <text><![CDATA[)(]]></text>
  </DocumentChange>
  <DocumentChange __id="1637" _type="Replace" date="Mon Feb 08 15:42:05 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26637" docExpressionCount="3162" docLength="27727" endLine="788" insertionLength="1" int_docASTNodeCount="4598" int_docActiveCodeLength="26636" int_docExpressionCount="3162" int_docLength="27726" length="17" offset="27556" startLine="788" starttimestamp="1612813070441" timestamp="3854971">
    <deletedText><![CDATA[getStartTimestamp]]></deletedText>
    <insertedText><![CDATA[g]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1640" _type="Insert" date="Mon Feb 08 15:42:05 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26640" docExpressionCount="3162" docLength="27730" length="3" offset="27557" repeat="3" starttimestamp="1612813070441" timestamp="3855200" timestamp2="3855899">
    <text><![CDATA[ett]]></text>
  </DocumentChange>
  <DocumentChange __id="1644" _type="Replace" date="Mon Feb 08 15:42:07 EST 2021" docASTNodeCount="4601" docActiveCodeLength="26650" docExpressionCount="3164" docLength="27740" endLine="788" insertionLength="14" int_docASTNodeCount="4598" int_docActiveCodeLength="26636" int_docExpressionCount="3162" int_docLength="27726" length="4" offset="27556" startLine="788" starttimestamp="1612813070441" timestamp="3856799">
    <deletedText><![CDATA[gett]]></deletedText>
    <insertedText><![CDATA[getTimestamp()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1646" _type="Delete" date="Mon Feb 08 15:42:07 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26648" docExpressionCount="3162" docLength="27738" endLine="788" length="2" offset="27568" repeat="2" startLine="788" starttimestamp="1612813070441" timestamp="3857221" timestamp2="3857336">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="1667" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:42:45 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3894619">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
		replayer.analyzeFolder(experimentalClassFolderPath);
	}
}

















]]></snapshot>
  </Command>
  <Command __id="1673" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:42:48 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36290" docExpressionCount="4220" docLength="36345" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3898288">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1675" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:42:50 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3899915">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="1681" _type="Delete" date="Mon Feb 08 15:42:52 EST 2021" docASTNodeCount="83" docActiveCodeLength="752" docExpressionCount="42" docLength="932" endLine="19" length="2" offset="770" startLine="19" starttimestamp="1612813070441" timestamp="3902126">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1687" _type="Insert" date="Mon Feb 08 15:42:55 EST 2021" docASTNodeCount="78" docActiveCodeLength="698" docExpressionCount="38" docLength="934" length="2" offset="835" starttimestamp="1612813070441" timestamp="3904816">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1735" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:43:53 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26648" docExpressionCount="3162" docLength="27738" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="3963002">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = webCommand.get"), Diff(DELETE,"Start"), Diff(EQUAL,"Timestamp() - startTimestamp;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.get"), Diff(DELETE,"Start"), Diff(EQUAL,"Timestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		boolean added = false;¶		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶			maybeAddPauseCommand(newCommands, last, cur);¶			return webCommand;¶		}¶//		newCommands.add(webCommand);¶//		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return null;¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.get"), Diff(DELETE,"Start"), Diff(EQUAL,"Timestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = webCommand.getTimestamp() - startTimestamp;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
		boolean added = false;
		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			maybeAddPauseCommand(newCommands, last,	webCommand);
			added = true;
			if (webCommandIterator.hasNext()) {
				last = webCommand;
				webCommand = webCommandIterator.next();
				timestamp = webCommand.getStartTimestamp() - startTimestamp;
			} else {
				break;
			}
		}
		if (added) {
			maybeAddPauseCommand(newCommands, last, cur);
			return webCommand;
		}
//		newCommands.add(webCommand);
//		maybeAddPauseCommand(newCommands, webCommand, cur);
		return null;
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="1755" _type="Insert" date="Mon Feb 08 15:44:17 EST 2021" docASTNodeCount="4598" docActiveCodeLength="26659" docExpressionCount="3162" docLength="27749" length="11" offset="3573" repeat="3" starttimestamp="1612813070441" timestamp="3987094" timestamp2="3988459">
    <text><![CDATA[
							if]]></text>
  </DocumentChange>
  <DocumentChange __id="1763" _type="Replace" date="Mon Feb 08 15:44:18 EST 2021" docASTNodeCount="4601" docActiveCodeLength="26706" docExpressionCount="3163" docLength="27796" endLine="103" insertionLength="49" int_docASTNodeCount="4598" int_docActiveCodeLength="26657" int_docExpressionCount="3162" int_docLength="27747" length="2" offset="3582" startLine="103" starttimestamp="1612813070441" timestamp="3988505">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
								
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1765" _type="Replace" date="Mon Feb 08 15:44:19 EST 2021" docASTNodeCount="4601" docActiveCodeLength="26685" docExpressionCount="3163" docLength="27775" endLine="103" insertionLength="1" int_docASTNodeCount="4601" int_docActiveCodeLength="26684" int_docExpressionCount="3163" int_docLength="27774" length="22" offset="3586" startLine="103" starttimestamp="1612813070441" timestamp="3989311">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1767" _type="Insert" date="Mon Feb 08 15:44:19 EST 2021" docASTNodeCount="4601" docActiveCodeLength="26687" docExpressionCount="3163" docLength="27777" length="2" offset="3587" repeat="2" starttimestamp="1612813070441" timestamp="3989350" timestamp2="3989642">
    <text><![CDATA[eb]]></text>
  </DocumentChange>
  <DocumentChange __id="1772" _type="Replace" date="Mon Feb 08 15:44:20 EST 2021" docASTNodeCount="4601" docActiveCodeLength="26694" docExpressionCount="3163" docLength="27784" endLine="103" insertionLength="10" int_docASTNodeCount="4601" int_docActiveCodeLength="26684" int_docExpressionCount="3163" int_docLength="27774" length="3" offset="3586" startLine="103" starttimestamp="1612813070441" timestamp="3990287">
    <deletedText><![CDATA[web]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1774" _type="Insert" date="Mon Feb 08 15:44:21 EST 2021" docASTNodeCount="4603" docActiveCodeLength="26702" docExpressionCount="3165" docLength="27792" length="8" offset="3596" repeat="8" starttimestamp="1612813070441" timestamp="3991053" timestamp2="3994910">
    <text><![CDATA[ == null]]></text>
  </DocumentChange>
  <DocumentChange __id="1795" _type="Insert" date="Mon Feb 08 15:44:27 EST 2021" docASTNodeCount="4105" docActiveCodeLength="26709" docExpressionCount="2839" docLength="27799" length="7" offset="3627" repeat="7" starttimestamp="1612813070441" timestamp="3997204" timestamp2="3998706">
    <text><![CDATA[ else {]]></text>
  </DocumentChange>
  <DocumentChange __id="1809" _type="Insert" date="Mon Feb 08 15:44:30 EST 2021" docASTNodeCount="4105" docActiveCodeLength="26718" docExpressionCount="2839" docLength="27808" length="9" offset="3703" starttimestamp="1612813070441" timestamp="3999675">
    <text><![CDATA[
							]]></text>
  </DocumentChange>
  <DocumentChange __id="1811" _type="Replace" date="Mon Feb 08 15:44:30 EST 2021" docASTNodeCount="4604" docActiveCodeLength="26719" docExpressionCount="3165" docLength="27809" endLine="107" insertionLength="8" int_docASTNodeCount="4105" int_docActiveCodeLength="26711" int_docExpressionCount="2839" int_docLength="27801" length="7" offset="3705" startLine="107" starttimestamp="1612813070441" timestamp="4000089">
    <deletedText><![CDATA[							]]></deletedText>
    <insertedText><![CDATA[							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1815" _type="Delete" date="Mon Feb 08 15:44:31 EST 2021" docASTNodeCount="4603" docActiveCodeLength="26714" docExpressionCount="3166" docLength="27804" endLine="106" length="5" offset="3643" startLine="106" starttimestamp="1612813070441" timestamp="4001443">
    <text><![CDATA[long ]]></text>
  </DocumentChange>
  <DocumentChange __id="1817" _type="Insert" date="Mon Feb 08 15:44:32 EST 2021" docASTNodeCount="4603" docActiveCodeLength="26715" docExpressionCount="3166" docLength="27805" length="1" offset="3643" starttimestamp="1612813070441" timestamp="4001897">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="1819" _type="Delete" date="Mon Feb 08 15:44:32 EST 2021" docASTNodeCount="4603" docActiveCodeLength="26714" docExpressionCount="3166" docLength="27804" endLine="106" length="1" offset="3643" startLine="106" starttimestamp="1612813070441" timestamp="4002284">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1793" _type="PauseCommand" date="Mon Feb 08 15:44:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="3996636">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1541]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1792" _type="MoveCaretCommand" caretOffset="2120" date="Mon Feb 08 15:44:27 EST 2021" docOffset="3643" starttimestamp="1612813070441" timestamp="3996636" />
  <Command __id="1794" _type="MoveCaretCommand" caretOffset="2104" date="Mon Feb 08 15:44:27 EST 2021" docOffset="3627" starttimestamp="1612813070441" timestamp="3997065" />
  <Command __id="1796" _type="InsertStringCommand" date="Mon Feb 08 15:44:27 EST 2021" starttimestamp="1612813070441" timestamp="3997212" timestamp2="3997212">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1798" _type="InsertStringCommand" date="Mon Feb 08 15:44:28 EST 2021" starttimestamp="1612813070441" timestamp="3997573" timestamp2="3997573">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1799" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:44:28 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="3997614" />
  <Command __id="1804" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:44:28 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="3997921" />
  <Command __id="1806" _type="InsertStringCommand" date="Mon Feb 08 15:44:29 EST 2021" starttimestamp="1612813070441" timestamp="3998714" timestamp2="3998714">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1807" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:44:29 EST 2021" starttimestamp="1612813070441" timestamp="3999200" />
  <Command __id="1808" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:44:29 EST 2021" starttimestamp="1612813070441" timestamp="3999479" />
  <Command __id="1810" _type="InsertStringCommand" date="Mon Feb 08 15:44:30 EST 2021" starttimestamp="1612813070441" timestamp="3999685" timestamp2="3999685">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1812" _type="InsertStringCommand" date="Mon Feb 08 15:44:30 EST 2021" starttimestamp="1612813070441" timestamp="4000096" timestamp2="4000096">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="1813" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 15:44:30 EST 2021" starttimestamp="1612813070441" timestamp="4000459" />
  <Command __id="1814" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 15:44:31 EST 2021" starttimestamp="1612813070441" timestamp="4001203" />
  <Command __id="1816" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 08 15:44:31 EST 2021" starttimestamp="1612813070441" timestamp="4001446" />
  <Command __id="1818" _type="InsertStringCommand" date="Mon Feb 08 15:44:32 EST 2021" starttimestamp="1612813070441" timestamp="4001903" timestamp2="4001903">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1820" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:44:32 EST 2021" starttimestamp="1612813070441" timestamp="4002287" />
  <Command __id="1822" _type="InsertStringCommand" date="Mon Feb 08 15:44:32 EST 2021" starttimestamp="1612813070441" timestamp="4002375" timestamp2="4002375">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1824" _type="PauseCommand" date="Mon Feb 08 15:44:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4004230">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1855]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1823" _type="MoveCaretCommand" caretOffset="1977" date="Mon Feb 08 15:44:34 EST 2021" docOffset="3500" starttimestamp="1612813070441" timestamp="4004230" />
  <Command __id="1825" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:44:35 EST 2021" starttimestamp="1612813070441" timestamp="4004685" />
  <Command __id="1827" _type="InsertStringCommand" date="Mon Feb 08 15:44:35 EST 2021" starttimestamp="1612813070441" timestamp="4004833" timestamp2="4004833">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1829" _type="InsertStringCommand" date="Mon Feb 08 15:44:35 EST 2021" starttimestamp="1612813070441" timestamp="4005494" timestamp2="4005494">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1830" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:44:35 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4005533" />
  <Command __id="1835" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:44:36 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4005856" />
  <Command __id="1837" _type="InsertStringCommand" date="Mon Feb 08 15:44:36 EST 2021" starttimestamp="1612813070441" timestamp="4005996" timestamp2="4005996">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1839" _type="InsertStringCommand" date="Mon Feb 08 15:44:36 EST 2021" starttimestamp="1612813070441" timestamp="4006005" timestamp2="4006005">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1841" _type="InsertStringCommand" date="Mon Feb 08 15:44:36 EST 2021" starttimestamp="1612813070441" timestamp="4006056" timestamp2="4006056">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1842" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:44:36 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4006098" />
  <Command __id="1844" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:44:37 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4006843" />
  <Command __id="1846" _type="InsertStringCommand" date="Mon Feb 08 15:44:37 EST 2021" starttimestamp="1612813070441" timestamp="4006857" timestamp2="4006857">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1848" _type="InsertStringCommand" date="Mon Feb 08 15:44:37 EST 2021" starttimestamp="1612813070441" timestamp="4007334" timestamp2="4007334">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1850" _type="InsertStringCommand" date="Mon Feb 08 15:44:37 EST 2021" starttimestamp="1612813070441" timestamp="4007441" timestamp2="4007441">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1852" _type="InsertStringCommand" date="Mon Feb 08 15:44:37 EST 2021" starttimestamp="1612813070441" timestamp="4007523" timestamp2="4007523">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1854" _type="InsertStringCommand" date="Mon Feb 08 15:44:38 EST 2021" starttimestamp="1612813070441" timestamp="4007689" timestamp2="4007689">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="1856" _type="InsertStringCommand" date="Mon Feb 08 15:44:38 EST 2021" starttimestamp="1612813070441" timestamp="4007972" timestamp2="4007972">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1858" _type="PauseCommand" date="Mon Feb 08 15:44:41 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4010612">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2640]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1857" _type="MoveCaretCommand" caretOffset="2104" date="Mon Feb 08 15:44:41 EST 2021" docOffset="3627" starttimestamp="1612813070441" timestamp="4010612" />
  <Command __id="1859" _type="MoveCaretCommand" caretOffset="2103" date="Mon Feb 08 15:44:41 EST 2021" docOffset="3626" starttimestamp="1612813070441" timestamp="4011010" />
  <Command __id="1861" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 15:44:42 EST 2021" starttimestamp="1612813070441" timestamp="4011718" />
  <Command __id="1863" _type="InsertStringCommand" date="Mon Feb 08 15:44:42 EST 2021" starttimestamp="1612813070441" timestamp="4011840" timestamp2="4011840">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="1865" _type="PauseCommand" date="Mon Feb 08 15:44:43 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4013251">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1411]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1864" _type="MoveCaretCommand" caretOffset="2139" date="Mon Feb 08 15:44:43 EST 2021" docOffset="3662" starttimestamp="1612813070441" timestamp="4013251" />
  <Command __id="1866" _type="MoveCaretCommand" caretOffset="2122" date="Mon Feb 08 15:44:44 EST 2021" docOffset="3645" starttimestamp="1612813070441" timestamp="4013635" />
  <Command __id="1868" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:44:44 EST 2021" starttimestamp="1612813070441" timestamp="4013767" />
  <Command __id="1870" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:44:44 EST 2021" starttimestamp="1612813070441" timestamp="4013912" />
  <Command __id="1872" _type="PauseCommand" date="Mon Feb 08 15:44:46 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4016158">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2246]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1871" _type="MoveCaretCommand" caretOffset="2077" date="Mon Feb 08 15:44:46 EST 2021" docOffset="3600" starttimestamp="1612813070441" timestamp="4016158" />
  <Command __id="1874" _type="PauseCommand" date="Mon Feb 08 15:44:50 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4020111">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3953]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1873" _type="MoveCaretCommand" caretOffset="2139" date="Mon Feb 08 15:44:50 EST 2021" docOffset="3662" starttimestamp="1612813070441" timestamp="4020111" />
  <Command __id="1875" _type="MoveCaretCommand" caretOffset="2187" date="Mon Feb 08 15:44:51 EST 2021" docOffset="3710" starttimestamp="1612813070441" timestamp="4020667" />
  <Command __id="1877" _type="PauseCommand" date="Mon Feb 08 15:44:54 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4024434">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3767]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1876" _type="MoveCaretCommand" caretOffset="2187" date="Mon Feb 08 15:44:54 EST 2021" docOffset="3710" starttimestamp="1612813070441" timestamp="4024434" />
  <Command __id="1879" _type="PauseCommand" date="Mon Feb 08 15:44:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4026053">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1619]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1878" _type="MoveCaretCommand" caretOffset="2187" date="Mon Feb 08 15:44:56 EST 2021" docOffset="3710" starttimestamp="1612813070441" timestamp="4026053" />
  <Command __id="1885" _type="PauseCommand" date="Mon Feb 08 15:45:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4029753">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1789]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1884" _type="RunCommand" date="Mon Feb 08 15:45:00 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="4029753" type="Run" />
  <Command __id="1886" _type="RunCommand" date="Mon Feb 08 15:45:00 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="4029753" type="Run" />
  <Command __id="1887" _type="ConsoleOutput" date="Mon Feb 08 15:45:01 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4030672" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Log2013-09-17-10-06-32-242.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Log2013-09-13-09-53-29-705.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Log2013-09-12-15-05-47-820.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"0"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest"), Diff(INSERT,"Log2013-09-12-10-40-05-321.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse"), Diff(EQUAL,"\Log2013-09-"), Diff(DELETE,"20"), Diff(INSERT,"15"), Diff(EQUAL,"-1"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL,"-3"), Diff(DELETE,"0-38-379.xml¶Finished writing to file"), Diff(INSERT,"8-06-069.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Log2013-09-17-10-06-32-242.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Log2013-09-13-09-53-29-705.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest"), Diff(INSERT,"Log2013-09-16-10-05-18-718.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse"), Diff(EQUAL,"\Log2013-09-"), Diff(DELETE,"20-14-30-38-379"), Diff(INSERT,"12-15-05-47-820"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1888" _type="ConsoleOutput" date="Mon Feb 08 15:45:01 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4030782" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"20"), Diff(INSERT,"16"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-40-05-321.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml¶Reading"), Diff(INSERT,"4-36-31-023.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"8"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"7"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-06-32-242"), Diff(INSERT,"4-36-31-023"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Log2013-09-13-"), Diff(DELETE,"09-53-29-705.xml¶Reading"), Diff(INSERT,"14-39-52-726.xml¶Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-3"), Diff(DELETE,"6-31-023.xml¶Reading"), Diff(INSERT,"9-52-726.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"2"), Diff(EQUAL,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-05-18-718"), Diff(INSERT,"4-39-52-726"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"9"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"5-05-47-820"), Diff(INSERT,"4-54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1890" _type="PauseCommand" date="Mon Feb 08 15:45:02 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4032377">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1595]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1889" _type="ConsoleOutput" date="Mon Feb 08 15:45:02 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4032377" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-"), Diff(EQUAL,"09-"), Diff(DELETE,"1"), Diff(INSERT,"5"), Diff(EQUAL,"3-"), Diff(DELETE,"14-54-59-878"), Diff(INSERT,"29-705"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1891" _type="ConsoleOutput" date="Mon Feb 08 15:45:03 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4032623" type="ConsoleOutput">
    <outputString><![CDATA[Reading 24
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-09-48-24-508.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml¶Finished writing to file"), Diff(INSERT,"Reading 24¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"17"), Diff(INSERT,"23"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"-09-"), Diff(DELETE,"53-29-705"), Diff(INSERT,"48-24-508"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1892" _type="ConsoleOutput" date="Mon Feb 08 15:45:03 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4033062" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 24¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-14-09-48-24-508.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267.xml¶")]]]></diff>
  </Command>
  <Command __id="1894" _type="PauseCommand" date="Mon Feb 08 15:45:04 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4034302">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1240]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1893" _type="ShellCommand" date="Mon Feb 08 15:45:04 EST 2021" starttimestamp="1612813070441" timestamp="4034302" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1896" _type="PauseCommand" date="Mon Feb 08 15:45:05 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4035534">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1232]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1895" _type="ShellCommand" date="Mon Feb 08 15:45:05 EST 2021" starttimestamp="1612813070441" timestamp="4035534" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1897" _type="ShellCommand" date="Mon Feb 08 15:45:06 EST 2021" starttimestamp="1612813070441" timestamp="4035727" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1899" _type="PauseCommand" date="Mon Feb 08 15:45:08 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4038492">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2765]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1898" _type="ShellCommand" date="Mon Feb 08 15:45:08 EST 2021" starttimestamp="1612813070441" timestamp="4038492" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1900" _type="ShellCommand" date="Mon Feb 08 15:45:09 EST 2021" starttimestamp="1612813070441" timestamp="4039287" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1901" _type="ShellCommand" date="Mon Feb 08 15:45:09 EST 2021" starttimestamp="1612813070441" timestamp="4039533" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1903" _type="PauseCommand" date="Mon Feb 08 15:45:12 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4041859">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2326]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1902" _type="ShellCommand" date="Mon Feb 08 15:45:12 EST 2021" starttimestamp="1612813070441" timestamp="4041859" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1904" _type="ConsoleOutput" date="Mon Feb 08 15:45:12 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4042105" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-"), Diff(DELETE,"09-48-24-508"), Diff(INSERT,"10-54-43-267"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-"), Diff(DELETE,"09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-"), Diff(EQUAL,"10-54-43-267.xml¶")]]]></diff>
  </Command>
  <Command __id="1905" _type="ConsoleOutput" date="Mon Feb 08 15:45:13 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4042629" type="ConsoleOutput">
    <outputString><![CDATA[Reading 26
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-12-59-39-052.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml¶Finished writing to file"), Diff(INSERT,"Reading 26¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-14-1"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"-5"), Diff(DELETE,"4-43-267"), Diff(INSERT,"9-39-052"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1907" _type="PauseCommand" date="Mon Feb 08 15:45:14 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4043766">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1137]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1906" _type="ConsoleOutput" date="Mon Feb 08 15:45:14 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4043766" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 26¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-14-12-59-39-052.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552.xml¶")]]]></diff>
  </Command>
  <Command __id="1909" _type="PauseCommand" date="Mon Feb 08 15:45:21 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4051524">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7758]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1908" _type="ConsoleOutput" date="Mon Feb 08 15:45:21 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4051524" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"2-59-39-052"), Diff(INSERT,"0-05-18-718"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"2-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013"), Diff(INSERT,"0"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"5"), Diff(EQUAL,"-1"), Diff(DELETE,"4-13-40-09-552"), Diff(INSERT,"8-718"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1910" _type="ConsoleOutput" date="Mon Feb 08 15:45:22 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4051685" type="ConsoleOutput">
    <outputString><![CDATA[Reading 27
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-14-39-04-982.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml¶Finished writing to file"), Diff(INSERT,"Reading 27¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-05-18-718"), Diff(INSERT,"4-39-04-982"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1912" _type="PauseCommand" date="Mon Feb 08 15:45:23 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4052693">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1008]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1911" _type="ConsoleOutput" date="Mon Feb 08 15:45:23 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4052693" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 27¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-18-14-39-04-982.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml¶")]]]></diff>
  </Command>
  <Command __id="1914" _type="PauseCommand" date="Mon Feb 08 15:45:30 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4059772">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7079]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1913" _type="ConsoleOutput" date="Mon Feb 08 15:45:30 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4059772" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"26"), Diff(INSERT,"18"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-39-04-98"), Diff(INSERT,"0-06-32-24"), Diff(EQUAL,"2.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"26"), Diff(INSERT,"18"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1915" _type="ConsoleOutput" date="Mon Feb 08 15:45:31 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4060691" type="ConsoleOutput">
    <outputString><![CDATA[Reading 28
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶Finished writing to file"), Diff(INSERT,"Reading 28¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"27"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"17"), Diff(INSERT,"20"), Diff(EQUAL,"-10-"), Diff(DELETE,"06-32-242"), Diff(INSERT,"17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1916" _type="ShellCommand" date="Mon Feb 08 15:45:31 EST 2021" starttimestamp="1612813070441" timestamp="4060823" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1918" _type="PauseCommand" date="Mon Feb 08 15:45:32 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4062025">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1202]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1917" _type="ShellCommand" date="Mon Feb 08 15:45:32 EST 2021" starttimestamp="1612813070441" timestamp="4062025" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1920" _type="PauseCommand" date="Mon Feb 08 15:45:36 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4066317">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4292]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1919" _type="ConsoleOutput" date="Mon Feb 08 15:45:36 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4066317" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 28¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"27"), Diff(INSERT,"16"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"20-"), Diff(EQUAL,"1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"7-49-071"), Diff(INSERT,"4-54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1921" _type="ConsoleOutput" date="Mon Feb 08 15:45:37 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4066663" type="ConsoleOutput">
    <outputString><![CDATA[Reading 29
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml¶Finished writing to file"), Diff(INSERT,"Reading 29¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"16"), Diff(INSERT,"28"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"13"), Diff(INSERT,"20"), Diff(EQUAL,"-14-"), Diff(DELETE,"54-59-878"), Diff(INSERT,"30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1922" _type="ConsoleOutput" date="Mon Feb 08 15:45:37 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4067505" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 29¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"0"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"20-14-30-38-379"), Diff(INSERT,"12-10-40-05-321"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1923" _type="ConsoleOutput" date="Mon Feb 08 15:45:38 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4067645" type="ConsoleOutput">
    <outputString><![CDATA[Reading 30
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Log2013-09-23-12-56-55-221.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶Finished writing to file"), Diff(INSERT,"Reading 30¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"12-10-40-0"), Diff(INSERT,"23-12-56-5"), Diff(EQUAL,"5-"), Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL,"21.xml¶")]]]></diff>
  </Command>
  <Command __id="1925" _type="PauseCommand" date="Mon Feb 08 15:45:39 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4069473">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1828]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1924" _type="ConsoleOutput" date="Mon Feb 08 15:45:39 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4069473" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 30¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"9"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"23-12-56-55"), Diff(INSERT,"18-15-33-03"), Diff(EQUAL,"-22"), Diff(DELETE,"1"), Diff(INSERT,"6"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1926" _type="ConsoleOutput" date="Mon Feb 08 15:45:40 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4069649" type="ConsoleOutput">
    <outputString><![CDATA[Reading 31
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Finished writing to file"), Diff(INSERT,"Reading 31¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"26"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"1"), Diff(EQUAL,"-15-"), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL,"3-"), Diff(DELETE,"03-226"), Diff(INSERT,"48-829"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1927" _type="ConsoleOutput" date="Mon Feb 08 15:45:40 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4070133" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 31¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"24"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"1-15"), Diff(INSERT,"4"), Diff(EQUAL,"-13-4"), Diff(DELETE,"8-829"), Diff(INSERT,"0-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1928" _type="ConsoleOutput" date="Mon Feb 08 15:45:41 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4070648" type="ConsoleOutput">
    <outputString><![CDATA[Reading 32
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Log2013-09-06-16-07-40-790.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml¶Finished writing to file"), Diff(INSERT,"Reading 32¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"24"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"14-13-40-09-552"), Diff(INSERT,"06-16-07-40-790"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1930" _type="PauseCommand" date="Mon Feb 08 15:45:46 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4075863">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5215]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1929" _type="ConsoleOutput" date="Mon Feb 08 15:45:46 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4075863" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 32¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(EQUAL,"1"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"06"), Diff(INSERT,"12"), Diff(EQUAL,"-1"), Diff(DELETE,"6"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"7"), Diff(INSERT,"5"), Diff(EQUAL,"-4"), Diff(DELETE,"0-79"), Diff(INSERT,"7-82"), Diff(EQUAL,"0.xml¶")]]]></diff>
  </Command>
  <Command __id="1931" _type="ConsoleOutput" date="Mon Feb 08 15:45:47 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4076649" type="ConsoleOutput">
    <outputString><![CDATA[Reading 33
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Log2013-09-13-12-11-53-568.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml¶Finished writing to file"), Diff(INSERT,"Reading 33¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"32"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(INSERT,"13-"), Diff(EQUAL,"12-1"), Diff(DELETE,"5-05-47-820"), Diff(INSERT,"1-53-568"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1932" _type="ConsoleOutput" date="Mon Feb 08 15:45:47 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4076754" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 33¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-12-11-53-568.xml¶")]]]></diff>
  </Command>
  <Command __id="1933" _type="ConsoleOutput" date="Mon Feb 08 15:45:48 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4077653" type="ConsoleOutput">
    <outputString><![CDATA[Reading pd1
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-35-18-862.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml¶Finished writing to file"), Diff(INSERT,"Reading pd1¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log201"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL,"-12-"), Diff(DELETE,"11-53-568"), Diff(INSERT,"35-18-862"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1934" _type="ConsoleOutput" date="Mon Feb 08 15:45:48 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4077733" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-57-56-864.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading pd1"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-"), Diff(DELETE,"35-18"), Diff(INSERT,"57-56"), Diff(EQUAL,"-86"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1936" _type="PauseCommand" date="Mon Feb 08 15:45:51 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4081030">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3296]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1935" _type="ConsoleOutput" date="Mon Feb 08 15:45:51 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4081029" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-"), Diff(DELETE,"35-18"), Diff(INSERT,"57-56"), Diff(EQUAL,"-86"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-"), Diff(DELETE,"35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-"), Diff(EQUAL,"57-56-864.xml¶")]]]></diff>
  </Command>
  <Command __id="1937" _type="ConsoleOutput" date="Mon Feb 08 15:45:52 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4081662" type="ConsoleOutput">
    <outputString><![CDATA[Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-09-23-822.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-30-44-271.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-32-16-955.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-48-45-037.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-53-58-501.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33"), Diff(INSERT,"Reading pd2¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-09-23-822.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-0"), Diff(DELETE,"2-12-12-57-56-864.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864"), Diff(INSERT,"9-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-30-44-271.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-32-16-955.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-48-45-037.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-53-58-501"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1938" _type="ConsoleOutput" date="Mon Feb 08 15:45:52 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4081764" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-47-36-829.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-54-11-604.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-08-45-537.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-11-06-680.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-55-07-198.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-01-19-061.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-54-18-232.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-12-11-54-779.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading pd2"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-"), Diff(DELETE,"09-26-10-09-23"), Diff(INSERT,"10-04-09-47-36"), Diff(EQUAL,"-82"), Diff(DELETE,"2"), Diff(INSERT,"9"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-10-09-23"), Diff(INSERT,"10-04-09-47-36"), Diff(EQUAL,"-82"), Diff(DELETE,"2"), Diff(INSERT,"9"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-10-09-23"), Diff(INSERT,"10-04-09-47-36"), Diff(EQUAL,"-82"), Diff(DELETE,"2"), Diff(INSERT,"9"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-"), Diff(DELETE,"09-26-10-30-44-271.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271"), Diff(INSERT,"10-04-09-54-11-604.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-08-45-537.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26"), Diff(INSERT,"10-04"), Diff(EQUAL,"-10-"), Diff(DELETE,"30-44-271"), Diff(INSERT,"08-45-537"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-"), Diff(DELETE,"09-26-10-32-16-955"), Diff(INSERT,"10-04-10-11-06-680"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-10-32-16-955"), Diff(INSERT,"10-04-10-11-06-680"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-10-32-16-955"), Diff(INSERT,"10-04-10-11-06-680"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-0"), Diff(DELETE,"2-09-48-45-037"), Diff(INSERT,"4-10-55-07-198"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-0"), Diff(DELETE,"2-09-48-45-037"), Diff(INSERT,"4-10-55-07-198"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-0"), Diff(DELETE,"2-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-53-58-501"), Diff(INSERT,"4-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-01-19-061.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-54-18-232.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-12-11-54-779"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1939" _type="ConsoleOutput" date="Mon Feb 08 15:45:52 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4081829" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-12-53-09-775.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-06-57-784.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-13-24-337.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-15-38-180.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-17-08-589.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-0"), Diff(DELETE,"2-09-53-58-501.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-47-36-829.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-82"), Diff(INSERT,"4-12-11-54-77"), Diff(EQUAL,"9.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-"), Diff(DELETE,"09-47-36-82"), Diff(INSERT,"12-11-54-77"), Diff(EQUAL,"9.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-"), Diff(DELETE,"09-54-11-604"), Diff(INSERT,"12-53-09-775"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-"), Diff(DELETE,"09-54-11-604"), Diff(INSERT,"12-53-09-775"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-"), Diff(DELETE,"09-54-11-604"), Diff(INSERT,"12-53-09-775"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-0"), Diff(DELETE,"8-45-537"), Diff(INSERT,"6-57-784"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-0"), Diff(DELETE,"8-45-537"), Diff(INSERT,"6-57-784"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-0"), Diff(DELETE,"8-45-537"), Diff(INSERT,"6-57-784"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"1-06-680"), Diff(INSERT,"3-24-337"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"1-06-680"), Diff(INSERT,"3-24-337"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"1-06-680"), Diff(INSERT,"3-24-337"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-1"), Diff(DELETE,"0-55-07-198"), Diff(INSERT,"3-15-38-180"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"0-55-07-198"), Diff(INSERT,"3-15-38-180"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"0-55-07-198"), Diff(INSERT,"3-15-38-180"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-1"), Diff(DELETE,"1-01-19-061"), Diff(INSERT,"3-17-08-589"), Diff(EQUAL,".xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"1-01-19-061.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-54-18-232.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232"), Diff(INSERT,"3-17-08-589"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-1"), Diff(DELETE,"1-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0"), Diff(INSERT,"7"), Diff(EQUAL,"-0"), Diff(DELETE,"4-12-11-54-77"), Diff(INSERT,"8-58"), Diff(EQUAL,"9.xml¶")]]]></diff>
  </Command>
  <Command __id="1940" _type="ConsoleOutput" date="Mon Feb 08 15:45:53 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4082656" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-12-25-59-852.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-13-38-06-627.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶"), Diff(EQUAL,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Log2014-10-04-12-"), Diff(DELETE,"53-09-775.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-06-57-784.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-13-24-337.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1"), Diff(INSERT,"25-59-852.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2014-10-04-13-"), Diff(DELETE,"13-24-337.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-15-38-180.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-17-08-589.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589"), Diff(INSERT,"38-06-627"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1941" _type="ConsoleOutput" date="Mon Feb 08 15:45:53 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4083387" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"pd2"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log201"), Diff(DELETE,"4-10"), Diff(INSERT,"3-09"), Diff(EQUAL,"-0"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"2-25-59-852.xml¶Reading"), Diff(INSERT,"6-07-40-790.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"pd2"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log201"), Diff(DELETE,"4-10"), Diff(INSERT,"3-09"), Diff(EQUAL,"-0"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"3-38-06-627"), Diff(INSERT,"6-07-40-790"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1943" _type="PauseCommand" date="Mon Feb 08 15:45:56 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4086274">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2887]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1942" _type="ConsoleOutput" date="Mon Feb 08 15:45:56 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4086274" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"31"), Diff(INSERT,"pd2"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"6-07-40-790"), Diff(INSERT,"3-38-06-627"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"31"), Diff(INSERT,"pd2"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"6-07-40-790"), Diff(INSERT,"3-38-06-627"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1945" _type="PauseCommand" date="Mon Feb 08 15:46:06 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4095714">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9440]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1944" _type="ConsoleOutput" date="Mon Feb 08 15:46:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4095714" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"pd"), Diff(EQUAL,"2"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"4-10-04-13-38-06-627"), Diff(INSERT,"3-09-23-12-56-55-221"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"pd"), Diff(EQUAL,"2"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"4-10-04-13-38-06-627"), Diff(INSERT,"3-09-23-12-56-55-221"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1947" _type="PauseCommand" date="Mon Feb 08 15:46:13 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4103065">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7351]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1946" _type="ConsoleOutput" date="Mon Feb 08 15:46:13 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4103065" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"15-15-38-06-069"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"15-15-38-06-069.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1948" _type="ConsoleOutput" date="Mon Feb 08 15:46:13 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4103180" type="ConsoleOutput">
    <outputString><![CDATA[Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml¶W"), Diff(INSERT,"Finished w"), Diff(EQUAL,"riting to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml¶")]]]></diff>
  </Command>
  <Command __id="1950" _type="PauseCommand" date="Mon Feb 08 15:46:14 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4104213">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1033]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1949" _type="ConsoleOutput" date="Mon Feb 08 15:46:14 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4104213" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml¶"), Diff(EQUAL,"Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"27"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"11"), Diff(INSERT,"20"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,"-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-4"), Diff(DELETE,"8-829"), Diff(INSERT,"9-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1952" _type="PauseCommand" date="Mon Feb 08 15:46:16 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4106544">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2331]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1951" _type="ConsoleOutput" date="Mon Feb 08 15:46:16 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="4106544" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1953" _type="RunCommand" date="Mon Feb 08 15:46:17 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="4106853" type="Run" />
  <Command __id="1954" _type="RunCommand" date="Mon Feb 08 15:46:17 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="4106853" type="Run" />
  <Command __id="1956" _type="PauseCommand" date="Mon Feb 08 15:46:40 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="4130308">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[23455]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1955" _type="ShellCommand" date="Mon Feb 08 15:46:40 EST 2021" starttimestamp="1612813070441" timestamp="4130308" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1957" _type="MoveCaretCommand" caretOffset="2195" date="Mon Feb 08 15:46:40 EST 2021" docOffset="3718" starttimestamp="1612813070441" timestamp="4130389" />
  <Command __id="1959" _type="PauseCommand" date="Mon Feb 08 15:46:43 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4132937">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2548]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1958" _type="ShellCommand" date="Mon Feb 08 15:46:43 EST 2021" starttimestamp="1612813070441" timestamp="4132937" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1961" _type="PauseCommand" date="Mon Feb 08 15:47:05 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="4154776">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[21839]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1960" _type="ShellCommand" date="Mon Feb 08 15:47:05 EST 2021" starttimestamp="1612813070441" timestamp="4154776" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1963" _type="SelectTextCommand" caretOffset="2023" date="Mon Feb 08 15:47:05 EST 2021" end="2023" start="2010" starttimestamp="1612813070441" timestamp="4155051" />
  <Command __id="1965" _type="PauseCommand" date="Mon Feb 08 15:47:22 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="4172503">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[17452]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1964" _type="ShellCommand" date="Mon Feb 08 15:47:22 EST 2021" starttimestamp="1612813070441" timestamp="4172503" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1967" _type="PauseCommand" date="Mon Feb 08 15:47:36 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="4186451">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[13948]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1966" _type="ShellCommand" date="Mon Feb 08 15:47:36 EST 2021" starttimestamp="1612813070441" timestamp="4186451" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1968" _type="MoveCaretCommand" caretOffset="3213" date="Mon Feb 08 15:47:36 EST 2021" docOffset="4905" starttimestamp="1612813070441" timestamp="4186546" />
  <Command __id="1970" _type="PauseCommand" date="Mon Feb 08 15:47:44 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4193866">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7320]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1969" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Mon Feb 08 15:47:44 EST 2021" starttimestamp="1612813070441" timestamp="4193866" />
  <Command __id="1972" _type="PauseCommand" date="Mon Feb 08 15:47:58 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="4207630">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[13764]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1971" _type="MoveCaretCommand" caretOffset="4060" date="Mon Feb 08 15:47:58 EST 2021" docOffset="34576" starttimestamp="1612813070441" timestamp="4207630" />
  <Command __id="1973" _type="MoveCaretCommand" caretOffset="4021" date="Mon Feb 08 15:47:58 EST 2021" docOffset="34537" starttimestamp="1612813070441" timestamp="4208135" />
  <Command __id="1975" _type="PauseCommand" date="Mon Feb 08 15:48:02 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4212123">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3988]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1976" _type="InsertStringCommand" date="Mon Feb 08 15:48:02 EST 2021" starttimestamp="1612813070441" timestamp="4212137" timestamp2="4212137">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1978" _type="InsertStringCommand" date="Mon Feb 08 15:48:02 EST 2021" starttimestamp="1612813070441" timestamp="4212423" timestamp2="4212423">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1979" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4212466" />
  <Command __id="1981" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4212645" />
  <Command __id="1983" _type="InsertStringCommand" date="Mon Feb 08 15:48:03 EST 2021" starttimestamp="1612813070441" timestamp="4212749" timestamp2="4212749">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1985" _type="PauseCommand" date="Mon Feb 08 15:48:04 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4214534">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1785]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1986" _type="InsertStringCommand" date="Mon Feb 08 15:48:04 EST 2021" starttimestamp="1612813070441" timestamp="4214542" timestamp2="4214542">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1987" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:05 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4214578" />
  <Command __id="1991" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4214951" />
  <Command __id="1993" _type="InsertStringCommand" date="Mon Feb 08 15:48:05 EST 2021" starttimestamp="1612813070441" timestamp="4214966" timestamp2="4214966">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1995" _type="InsertStringCommand" date="Mon Feb 08 15:48:06 EST 2021" starttimestamp="1612813070441" timestamp="4215672" timestamp2="4215672">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1997" _type="PauseCommand" date="Mon Feb 08 15:48:09 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4219121">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3449]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1998" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:48:09 EST 2021" starttimestamp="1612813070441" timestamp="4219125" />
  <Command __id="2000" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:48:09 EST 2021" starttimestamp="1612813070441" timestamp="4219295" />
  <Command __id="2002" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 15:48:10 EST 2021" starttimestamp="1612813070441" timestamp="4219698" />
  <Command __id="2003" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 15:48:10 EST 2021" starttimestamp="1612813070441" timestamp="4220472" />
  <Command __id="2004" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:48:11 EST 2021" starttimestamp="1612813070441" timestamp="4220958" />
  <Command __id="2006" _type="PauseCommand" date="Mon Feb 08 15:48:20 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4230193">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9235]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2005" _type="ShellCommand" date="Mon Feb 08 15:48:20 EST 2021" starttimestamp="1612813070441" timestamp="4230193" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2008" _type="PauseCommand" date="Mon Feb 08 15:48:25 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="4235412">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5219]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2007" _type="ShellCommand" date="Mon Feb 08 15:48:25 EST 2021" starttimestamp="1612813070441" timestamp="4235412" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2009" _type="MoveCaretCommand" caretOffset="4112" date="Mon Feb 08 15:48:25 EST 2021" docOffset="34628" starttimestamp="1612813070441" timestamp="4235500" />
  <Command __id="2011" _type="PauseCommand" date="Mon Feb 08 15:48:28 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4237884">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2384]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2012" _type="InsertStringCommand" date="Mon Feb 08 15:48:28 EST 2021" starttimestamp="1612813070441" timestamp="4237895" timestamp2="4237895">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2014" _type="InsertStringCommand" date="Mon Feb 08 15:48:29 EST 2021" starttimestamp="1612813070441" timestamp="4238582" timestamp2="4238582">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2015" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4238625" />
  <Command __id="2017" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4238835" />
  <Command __id="2019" _type="InsertStringCommand" date="Mon Feb 08 15:48:29 EST 2021" starttimestamp="1612813070441" timestamp="4238952" timestamp2="4238952">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2021" _type="InsertStringCommand" date="Mon Feb 08 15:48:30 EST 2021" starttimestamp="1612813070441" timestamp="4239635" timestamp2="4239635">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2022" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:30 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4239670" />
  <Command __id="2026" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4240291" />
  <Command __id="2028" _type="InsertStringCommand" date="Mon Feb 08 15:48:30 EST 2021" starttimestamp="1612813070441" timestamp="4240316" timestamp2="4240316">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2030" _type="InsertStringCommand" date="Mon Feb 08 15:48:30 EST 2021" starttimestamp="1612813070441" timestamp="4240533" timestamp2="4240533">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2031" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4240573" />
  <Command __id="2034" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4240871" />
  <Command __id="2036" _type="InsertStringCommand" date="Mon Feb 08 15:48:31 EST 2021" starttimestamp="1612813070441" timestamp="4240990" timestamp2="4240990">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2038" _type="InsertStringCommand" date="Mon Feb 08 15:48:31 EST 2021" starttimestamp="1612813070441" timestamp="4241249" timestamp2="4241249">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2040" _type="InsertStringCommand" date="Mon Feb 08 15:48:31 EST 2021" starttimestamp="1612813070441" timestamp="4241340" timestamp2="4241340">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2041" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4241381" />
  <Command __id="2043" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:32 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4241607" />
  <Command __id="2044" _type="InsertStringCommand" date="Mon Feb 08 15:48:32 EST 2021" starttimestamp="1612813070441" timestamp="4241612" timestamp2="4241612">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1821" _type="Replace" date="Mon Feb 08 15:44:32 EST 2021" docASTNodeCount="4603" docActiveCodeLength="26715" docExpressionCount="3166" docLength="27805" endLine="106" insertionLength="8" int_docASTNodeCount="4603" int_docActiveCodeLength="26707" int_docExpressionCount="3166" int_docLength="27797" length="7" offset="3636" startLine="106" starttimestamp="1612813070441" timestamp="4002369">
    <deletedText><![CDATA[							]]></deletedText>
    <insertedText><![CDATA[								]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1826" _type="Insert" date="Mon Feb 08 15:44:35 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26733" docExpressionCount="3167" docLength="27823" length="18" offset="3573" repeat="10" starttimestamp="1612813070441" timestamp="4004815" timestamp2="4006181">
    <text><![CDATA[
							long time]]></text>
  </DocumentChange>
  <DocumentChange __id="1845" _type="Replace" date="Mon Feb 08 15:44:37 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26738" docExpressionCount="3167" docLength="27828" endLine="103" insertionLength="9" int_docASTNodeCount="4607" int_docActiveCodeLength="26729" int_docExpressionCount="3167" int_docLength="27819" length="4" offset="3587" startLine="103" starttimestamp="1612813070441" timestamp="4006848">
    <deletedText><![CDATA[time]]></deletedText>
    <insertedText><![CDATA[timestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1847" _type="Insert" date="Mon Feb 08 15:44:37 EST 2021" docASTNodeCount="4608" docActiveCodeLength="26743" docExpressionCount="3168" docLength="27833" length="5" offset="3596" repeat="5" starttimestamp="1612813070441" timestamp="4007322" timestamp2="4007967">
    <text><![CDATA[ = 0;]]></text>
  </DocumentChange>
  <DocumentChange __id="1860" _type="Delete" date="Mon Feb 08 15:44:42 EST 2021" docASTNodeCount="4608" docActiveCodeLength="26742" docExpressionCount="3168" docLength="27832" endLine="104" length="1" offset="3625" startLine="104" starttimestamp="1612813070441" timestamp="4011716">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="1862" _type="Insert" date="Mon Feb 08 15:44:42 EST 2021" docASTNodeCount="4608" docActiveCodeLength="26743" docExpressionCount="3168" docLength="27833" length="1" offset="3625" starttimestamp="1612813070441" timestamp="4011834">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="1867" _type="Delete" date="Mon Feb 08 15:44:44 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26716" docExpressionCount="3168" docLength="27806" endLine="107" length="27" offset="3637" repeat="2" startLine="105" starttimestamp="1612813070441" timestamp="4013764" timestamp2="4013909">
    <text><![CDATA[								
							} else {
]]></text>
  </DocumentChange>
  <Command __id="1962" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:47:05 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36290" docExpressionCount="4220" docLength="36345" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="4154903">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1974" _type="Insert" date="Mon Feb 08 15:48:02 EST 2021" docASTNodeCount="6294" docActiveCodeLength="36300" docExpressionCount="4219" docLength="36355" length="10" offset="34537" repeat="3" starttimestamp="1612813070441" timestamp="4212123" timestamp2="4212630">
    <text><![CDATA[
						if]]></text>
  </DocumentChange>
  <DocumentChange __id="1982" _type="Replace" date="Mon Feb 08 15:48:03 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36345" docExpressionCount="4221" docLength="36400" endLine="1006" insertionLength="47" int_docASTNodeCount="6293" int_docActiveCodeLength="36298" int_docExpressionCount="4220" int_docLength="36353" length="2" offset="34545" startLine="1006" starttimestamp="1612813070441" timestamp="4212669">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
							
						}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1984" _type="Replace" date="Mon Feb 08 15:48:04 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36324" docExpressionCount="4221" docLength="36379" endLine="1006" insertionLength="1" int_docASTNodeCount="6296" int_docActiveCodeLength="36323" int_docExpressionCount="4221" int_docLength="36378" length="22" offset="34549" startLine="1006" starttimestamp="1612813070441" timestamp="4214534">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1988" _type="Insert" date="Mon Feb 08 15:48:05 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36327" docExpressionCount="4221" docLength="36382" length="3" offset="34550" repeat="3" starttimestamp="1612813070441" timestamp="4214771" timestamp2="4214825">
    <text><![CDATA[oke]]></text>
  </DocumentChange>
  <DocumentChange __id="1992" _type="Replace" date="Mon Feb 08 15:48:05 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36329" docExpressionCount="4221" docLength="36384" endLine="1006" insertionLength="6" int_docASTNodeCount="6296" int_docActiveCodeLength="36323" int_docExpressionCount="4221" int_docLength="36378" length="4" offset="34549" startLine="1006" starttimestamp="1612813070441" timestamp="4214959">
    <deletedText><![CDATA[toke]]></deletedText>
    <insertedText><![CDATA[tokens]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1994" _type="Insert" date="Mon Feb 08 15:48:06 EST 2021" docASTNodeCount="6299" docActiveCodeLength="36331" docExpressionCount="4222" docLength="36386" length="2" offset="34555" starttimestamp="1612813070441" timestamp="4215666">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="1996" _type="Delete" date="Mon Feb 08 15:48:09 EST 2021" docASTNodeCount="6293" docActiveCodeLength="36290" docExpressionCount="4220" docLength="36345" endLine="1009" length="41" offset="34539" repeat="3" startLine="1006" starttimestamp="1612813070441" timestamp="4219121" timestamp2="4219695">
    <text><![CDATA[						if (tokens[]) {
							
						}
]]></text>
  </DocumentChange>
  <DocumentChange __id="2010" _type="Insert" date="Mon Feb 08 15:48:28 EST 2021" docASTNodeCount="6294" docActiveCodeLength="36300" docExpressionCount="4219" docLength="36355" length="10" offset="34628" repeat="3" starttimestamp="1612813070441" timestamp="4237884" timestamp2="4238786">
    <text><![CDATA[
						if]]></text>
  </DocumentChange>
  <DocumentChange __id="2018" _type="Replace" date="Mon Feb 08 15:48:29 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36345" docExpressionCount="4221" docLength="36400" endLine="1009" insertionLength="47" int_docASTNodeCount="6293" int_docActiveCodeLength="36298" int_docExpressionCount="4220" int_docLength="36353" length="2" offset="34636" startLine="1009" starttimestamp="1612813070441" timestamp="4238873">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
							
						}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2020" _type="Replace" date="Mon Feb 08 15:48:30 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36324" docExpressionCount="4221" docLength="36379" endLine="1009" insertionLength="1" int_docASTNodeCount="6296" int_docActiveCodeLength="36323" int_docExpressionCount="4221" int_docLength="36378" length="22" offset="34640" startLine="1009" starttimestamp="1612813070441" timestamp="4239627">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[k]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2023" _type="Insert" date="Mon Feb 08 15:48:30 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36327" docExpressionCount="4221" docLength="36382" length="3" offset="34641" repeat="3" starttimestamp="1612813070441" timestamp="4239857" timestamp2="4240101">
    <text><![CDATA[eyw]]></text>
  </DocumentChange>
  <DocumentChange __id="2027" _type="Replace" date="Mon Feb 08 15:48:30 EST 2021" docASTNodeCount="6296" docActiveCodeLength="36330" docExpressionCount="4221" docLength="36385" endLine="1009" insertionLength="7" int_docASTNodeCount="6296" int_docActiveCodeLength="36323" int_docExpressionCount="4221" int_docLength="36378" length="4" offset="34640" startLine="1009" starttimestamp="1612813070441" timestamp="4240299">
    <deletedText><![CDATA[keyw]]></deletedText>
    <insertedText><![CDATA[keyword]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2029" _type="Insert" date="Mon Feb 08 15:48:30 EST 2021" docASTNodeCount="6298" docActiveCodeLength="36333" docExpressionCount="4223" docLength="36388" length="3" offset="34647" repeat="3" starttimestamp="1612813070441" timestamp="4240531" timestamp2="4240789">
    <text><![CDATA[.eq]]></text>
  </DocumentChange>
  <DocumentChange __id="2035" _type="Replace" date="Mon Feb 08 15:48:31 EST 2021" docASTNodeCount="6299" docActiveCodeLength="36347" docExpressionCount="4224" docLength="36402" endLine="1009" insertionLength="16" int_docASTNodeCount="6298" int_docActiveCodeLength="36331" int_docExpressionCount="4222" int_docLength="36386" length="2" offset="34648" startLine="1009" starttimestamp="1612813070441" timestamp="4240879">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[equals(anObject)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2037" _type="Replace" date="Mon Feb 08 15:48:31 EST 2021" docASTNodeCount="6299" docActiveCodeLength="36340" docExpressionCount="4224" docLength="36395" endLine="1009" insertionLength="1" int_docASTNodeCount="6298" int_docActiveCodeLength="36339" int_docExpressionCount="4223" int_docLength="36394" length="8" offset="34655" startLine="1009" starttimestamp="1612813070441" timestamp="4241240">
    <deletedText><![CDATA[anObject]]></deletedText>
    <insertedText><![CDATA[u]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2039" _type="Insert" date="Mon Feb 08 15:48:31 EST 2021" docASTNodeCount="6299" docActiveCodeLength="36342" docExpressionCount="4224" docLength="36397" length="2" offset="34656" repeat="2" starttimestamp="1612813070441" timestamp="4241338" timestamp2="4241508">
    <text><![CDATA[rl]]></text>
  </DocumentChange>
  <Command __id="2046" _type="PauseCommand" date="Mon Feb 08 15:48:33 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4243482">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1870]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2045" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 15:48:33 EST 2021" starttimestamp="1612813070441" timestamp="4243482" />
  <DocumentChange __id="2047" _type="Insert" date="Mon Feb 08 15:48:34 EST 2021" docASTNodeCount="6301" docActiveCodeLength="36345" docExpressionCount="4225" docLength="36400" length="3" offset="34671" repeat="3" starttimestamp="1612813070441" timestamp="4243983" timestamp2="4244286">
    <text><![CDATA[bre]]></text>
  </DocumentChange>
  <Command __id="2048" _type="InsertStringCommand" date="Mon Feb 08 15:48:34 EST 2021" starttimestamp="1612813070441" timestamp="4243995" timestamp2="4243995">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="2049" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:34 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4244029" />
  <Command __id="2052" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:34 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4244393" />
  <DocumentChange __id="2053" _type="Replace" date="Mon Feb 08 15:48:34 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36347" docExpressionCount="4224" docLength="36402" endLine="1010" insertionLength="5" int_docASTNodeCount="6299" int_docActiveCodeLength="36342" int_docExpressionCount="4224" int_docLength="36397" length="3" offset="34671" startLine="1010" starttimestamp="1612813070441" timestamp="4244402">
    <deletedText><![CDATA[bre]]></deletedText>
    <insertedText><![CDATA[break]]></insertedText>
  </DocumentChange>
  <Command __id="2054" _type="InsertStringCommand" date="Mon Feb 08 15:48:34 EST 2021" starttimestamp="1612813070441" timestamp="4244409" timestamp2="4244409">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2055" _type="Delete" date="Mon Feb 08 15:48:35 EST 2021" docASTNodeCount="6299" docActiveCodeLength="36342" docExpressionCount="4224" docLength="36397" endLine="1010" length="5" offset="34671" startLine="1010" starttimestamp="1612813070441" timestamp="4244983">
    <text><![CDATA[break]]></text>
  </DocumentChange>
  <Command __id="2056" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 15:48:35 EST 2021" starttimestamp="1612813070441" timestamp="4244986" />
  <DocumentChange __id="2057" _type="Insert" date="Mon Feb 08 15:48:36 EST 2021" docASTNodeCount="6301" docActiveCodeLength="36346" docExpressionCount="4225" docLength="36401" length="4" offset="34671" repeat="4" starttimestamp="1612813070441" timestamp="4245690" timestamp2="4246007">
    <text><![CDATA[cont]]></text>
  </DocumentChange>
  <Command __id="2058" _type="InsertStringCommand" date="Mon Feb 08 15:48:36 EST 2021" starttimestamp="1612813070441" timestamp="4245694" timestamp2="4245694">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2059" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 15:48:36 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="4245736" />
  <Command __id="2063" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 15:48:36 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="4246083" />
  <DocumentChange __id="2064" _type="Replace" date="Mon Feb 08 15:48:36 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36350" docExpressionCount="4224" docLength="36405" endLine="1010" insertionLength="8" int_docASTNodeCount="6299" int_docActiveCodeLength="36342" int_docExpressionCount="4224" int_docLength="36397" length="4" offset="34671" startLine="1010" starttimestamp="1612813070441" timestamp="4246090">
    <deletedText><![CDATA[cont]]></deletedText>
    <insertedText><![CDATA[continue]]></insertedText>
  </DocumentChange>
  <Command __id="2065" _type="InsertStringCommand" date="Mon Feb 08 15:48:36 EST 2021" starttimestamp="1612813070441" timestamp="4246097" timestamp2="4246097">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2067" _type="InsertStringCommand" date="Mon Feb 08 15:48:36 EST 2021" starttimestamp="1612813070441" timestamp="4246245" timestamp2="4246245">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2069" _type="PauseCommand" date="Mon Feb 08 15:48:47 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="4257133">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[10888]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2068" _type="ShellCommand" date="Mon Feb 08 15:48:47 EST 2021" starttimestamp="1612813070441" timestamp="4257133" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2071" _type="PauseCommand" date="Mon Feb 08 15:50:33 EST 2021" range="1m-2m" starttimestamp="1612813070441" timestamp="4362612">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[105479]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2070" _type="ShellCommand" date="Mon Feb 08 15:50:33 EST 2021" starttimestamp="1612813070441" timestamp="4362612" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2072" _type="MoveCaretCommand" caretOffset="4592" date="Mon Feb 08 15:50:33 EST 2021" docOffset="35108" starttimestamp="1612813070441" timestamp="4362673" />
  <Command __id="2074" _type="PauseCommand" date="Mon Feb 08 15:51:06 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="4395658">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[32985]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2073" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 15:51:06 EST 2021" starttimestamp="1612813070441" timestamp="4395658" />
  <Command __id="2075" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:51:06 EST 2021" starttimestamp="1612813070441" timestamp="4395746" />
  <Command __id="2076" _type="EclipseCommand" commandID="" date="Mon Feb 08 15:51:06 EST 2021" starttimestamp="1612813070441" timestamp="4395876" />
  <Command __id="2078" _type="PauseCommand" date="Mon Feb 08 15:51:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="4397178">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1302]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2079" _type="MoveCaretCommand" caretOffset="2195" date="Mon Feb 08 15:51:07 EST 2021" docOffset="3718" starttimestamp="1612813070441" timestamp="4397334" />
  <Command __id="2081" _type="PauseCommand" date="Mon Feb 08 15:51:11 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4401139">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3805]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2080" _type="SelectTextCommand" caretOffset="2389" date="Mon Feb 08 15:51:11 EST 2021" end="2976" start="2389" starttimestamp="1612813070441" timestamp="4401139" />
  <Command __id="2082" _type="MoveCaretCommand" caretOffset="2447" date="Mon Feb 08 15:51:11 EST 2021" docOffset="3970" starttimestamp="1612813070441" timestamp="4401417" />
  <Command __id="2084" _type="PauseCommand" date="Mon Feb 08 15:51:16 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4405634">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4217]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2083" _type="MoveCaretCommand" caretOffset="3715" date="Mon Feb 08 15:51:16 EST 2021" docOffset="5238" starttimestamp="1612813070441" timestamp="4405634" />
  <Command __id="2086" _type="PauseCommand" date="Mon Feb 08 15:51:18 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="4407889">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2255]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2087" _type="MoveCaretCommand" caretOffset="4592" date="Mon Feb 08 15:51:18 EST 2021" docOffset="35108" starttimestamp="1612813070441" timestamp="4408055" />
  <Command __id="2089" _type="PauseCommand" date="Mon Feb 08 15:58:50 EST 2021" range="5m-10m" starttimestamp="1612813070441" timestamp="4860359">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[452304]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2088" _type="ShellCommand" date="Mon Feb 08 15:58:50 EST 2021" starttimestamp="1612813070441" timestamp="4860359" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2091" _type="PauseCommand" date="Mon Feb 08 16:05:11 EST 2021" range="5m-10m" starttimestamp="1612813070441" timestamp="5241403">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[381044]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2090" _type="ShellCommand" date="Mon Feb 08 16:05:11 EST 2021" starttimestamp="1612813070441" timestamp="5241403" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2093" _type="PauseCommand" date="Mon Feb 08 16:05:15 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5244959">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3556]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2092" _type="ShellCommand" date="Mon Feb 08 16:05:15 EST 2021" starttimestamp="1612813070441" timestamp="5244959" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2095" _type="PauseCommand" date="Mon Feb 08 16:07:39 EST 2021" range="2m-5m" starttimestamp="1612813070441" timestamp="5389005">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[144046]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2094" _type="ShellCommand" date="Mon Feb 08 16:07:39 EST 2021" starttimestamp="1612813070441" timestamp="5389005" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2096" _type="ShellCommand" date="Mon Feb 08 16:07:40 EST 2021" starttimestamp="1612813070441" timestamp="5389815" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2098" _type="PauseCommand" date="Mon Feb 08 16:07:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5391145">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1330]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2097" _type="ShellCommand" date="Mon Feb 08 16:07:41 EST 2021" starttimestamp="1612813070441" timestamp="5391145" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2099" _type="MoveCaretCommand" caretOffset="3941" date="Mon Feb 08 16:07:41 EST 2021" docOffset="34457" starttimestamp="1612813070441" timestamp="5391205" />
  <Command __id="2101" _type="MoveCaretCommand" caretOffset="3715" date="Mon Feb 08 16:07:42 EST 2021" docOffset="5238" starttimestamp="1612813070441" timestamp="5392074" />
  <Command __id="2103" _type="PauseCommand" date="Mon Feb 08 16:07:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5393855">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1781]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2104" _type="MoveCaretCommand" caretOffset="3941" date="Mon Feb 08 16:07:44 EST 2021" docOffset="34457" starttimestamp="1612813070441" timestamp="5394003" />
  <Command __id="2106" _type="MoveCaretCommand" caretOffset="709" date="Mon Feb 08 16:07:44 EST 2021" docOffset="736" starttimestamp="1612813070441" timestamp="5394531" />
  <Command __id="2108" _type="PauseCommand" date="Mon Feb 08 16:07:46 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5396421">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1889]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2107" _type="MoveCaretCommand" caretOffset="752" date="Mon Feb 08 16:07:46 EST 2021" docOffset="779" starttimestamp="1612813070441" timestamp="5396420" />
  <Command __id="2110" _type="PauseCommand" date="Mon Feb 08 16:07:49 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5398848">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2428]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2109" _type="MoveCaretCommand" caretOffset="829" date="Mon Feb 08 16:07:49 EST 2021" docOffset="856" starttimestamp="1612813070441" timestamp="5398848" />
  <Command __id="2112" _type="PauseCommand" date="Mon Feb 08 16:07:51 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5400642">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1794]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2113" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:07:51 EST 2021" starttimestamp="1612813070441" timestamp="5400657" />
  <Command __id="2114" _type="MoveCaretCommand" caretOffset="758" date="Mon Feb 08 16:07:52 EST 2021" docOffset="785" starttimestamp="1612813070441" timestamp="5401636" />
  <Command __id="2116" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:07:52 EST 2021" starttimestamp="1612813070441" timestamp="5401858" />
  <Command __id="2118" _type="PauseCommand" date="Mon Feb 08 16:07:53 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5403416">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1558]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2119" _type="SelectTextCommand" caretOffset="1944" date="Mon Feb 08 16:07:54 EST 2021" end="1944" start="1931" starttimestamp="1612813070441" timestamp="5403658" />
  <Command __id="2121" _type="PauseCommand" date="Mon Feb 08 16:08:00 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5410041">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6383]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2122" _type="MoveCaretCommand" caretOffset="3715" date="Mon Feb 08 16:08:00 EST 2021" docOffset="5238" starttimestamp="1612813070441" timestamp="5410236" />
  <Command __id="2124" _type="PauseCommand" date="Mon Feb 08 16:08:08 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5417637">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7401]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2123" _type="SelectTextCommand" caretOffset="1065" date="Mon Feb 08 16:08:08 EST 2021" end="1065" start="910" starttimestamp="1612813070441" timestamp="5417637" />
  <Command __id="2126" _type="PauseCommand" date="Mon Feb 08 16:08:09 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5419264">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1627]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2130" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:08:09 EST 2021" starttimestamp="1612813070441" timestamp="5419299" />
  <Command __id="2131" _type="MoveCaretCommand" caretOffset="1060" date="Mon Feb 08 16:08:10 EST 2021" docOffset="7701" starttimestamp="1612813070441" timestamp="5419677" />
  <Command __id="2132" _type="MoveCaretCommand" caretOffset="890" date="Mon Feb 08 16:08:10 EST 2021" docOffset="7531" starttimestamp="1612813070441" timestamp="5420415" />
  <Command __id="2134" _type="PauseCommand" date="Mon Feb 08 16:08:15 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5424879">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4464]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2135" _type="MoveCaretCommand" caretOffset="823" date="Mon Feb 08 16:08:15 EST 2021" docOffset="850" starttimestamp="1612813070441" timestamp="5425023" />
  <Command __id="2160" _type="RunCommand" date="Mon Feb 08 16:08:21 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5430945" type="Run" />
  <Command __id="2161" _type="RunCommand" date="Mon Feb 08 16:08:21 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5430946" type="Run" />
  <Command __id="2163" _type="PauseCommand" date="Mon Feb 08 16:08:23 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5433471">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2525]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2162" _type="ShellCommand" date="Mon Feb 08 16:08:23 EST 2021" starttimestamp="1612813070441" timestamp="5433471" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2164" _type="ShellCommand" date="Mon Feb 08 16:08:24 EST 2021" starttimestamp="1612813070441" timestamp="5434106" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2165" _type="ShellCommand" date="Mon Feb 08 16:08:24 EST 2021" starttimestamp="1612813070441" timestamp="5434425" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2167" _type="PauseCommand" date="Mon Feb 08 16:09:08 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="5478120">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[43695]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2166" _type="ShellCommand" date="Mon Feb 08 16:09:08 EST 2021" starttimestamp="1612813070441" timestamp="5478120" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2169" _type="PauseCommand" date="Mon Feb 08 16:09:09 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5479498">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1378]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2168" _type="ShellCommand" date="Mon Feb 08 16:09:09 EST 2021" starttimestamp="1612813070441" timestamp="5479498" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2171" _type="PauseCommand" date="Mon Feb 08 16:09:59 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="5528818">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[49320]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2170" _type="ShellCommand" date="Mon Feb 08 16:09:59 EST 2021" starttimestamp="1612813070441" timestamp="5528818" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2172" _type="MoveCaretCommand" caretOffset="844" date="Mon Feb 08 16:09:59 EST 2021" docOffset="871" starttimestamp="1612813070441" timestamp="5528964" />
  <Command __id="2174" _type="PauseCommand" date="Mon Feb 08 16:10:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5530531">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1567]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2175" _type="SelectTextCommand" caretOffset="1944" date="Mon Feb 08 16:10:01 EST 2021" end="1944" start="1931" starttimestamp="1612813070441" timestamp="5530688" />
  <Command __id="2177" _type="PauseCommand" date="Mon Feb 08 16:10:11 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5540600">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9912]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2176" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Feb 08 16:10:11 EST 2021" starttimestamp="1612813070441" timestamp="5540600" />
  <Command __id="2178" _type="BreakPointCommand" date="Mon Feb 08 16:10:11 EST 2021" lineNumber="1010" starttimestamp="1612813070441" timestamp="5540603" type="BreakPointAdded" />
  <Command __id="2180" _type="PauseCommand" date="Mon Feb 08 16:10:13 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5542599">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1996]]></rest>
    <prev><![CDATA[BreakPointCommand]]></prev>
    <next><![CDATA[BreakPointCommand]]></next>
  </Command>
  <Command __id="2179" _type="BreakPointCommand" date="Mon Feb 08 16:10:13 EST 2021" lineNumber="1010" starttimestamp="1612813070441" timestamp="5542599" type="BreakPointRemoved" />
  <Command __id="2181" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Feb 08 16:10:13 EST 2021" starttimestamp="1612813070441" timestamp="5542669" />
  <Command __id="2183" _type="PauseCommand" date="Mon Feb 08 16:10:14 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5544357">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1688]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2182" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Mon Feb 08 16:10:14 EST 2021" starttimestamp="1612813070441" timestamp="5544357" />
  <Command __id="2184" _type="BreakPointCommand" date="Mon Feb 08 16:10:14 EST 2021" lineNumber="1011" starttimestamp="1612813070441" timestamp="5544358" type="BreakPointAdded" />
  <Command __id="2186" _type="PauseCommand" date="Mon Feb 08 16:10:17 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5546657">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2299]]></rest>
    <prev><![CDATA[BreakPointCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2187" _type="MoveCaretCommand" caretOffset="844" date="Mon Feb 08 16:10:17 EST 2021" docOffset="871" starttimestamp="1612813070441" timestamp="5546797" />
  <Command __id="2188" _type="MoveCaretCommand" caretOffset="757" date="Mon Feb 08 16:10:18 EST 2021" docOffset="784" starttimestamp="1612813070441" timestamp="5547744" />
  <Command __id="2190" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:10:18 EST 2021" starttimestamp="1612813070441" timestamp="5548478" />
  <Command __id="2191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:10:19 EST 2021" starttimestamp="1612813070441" timestamp="5549272" />
  <Command __id="2193" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:10:20 EST 2021" starttimestamp="1612813070441" timestamp="5549653" />
  <Command __id="2195" _type="PauseCommand" date="Mon Feb 08 16:10:22 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5552184">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2531]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2196" _type="MoveCaretCommand" caretOffset="5183" date="Mon Feb 08 16:10:22 EST 2021" docOffset="34664" starttimestamp="1612813070441" timestamp="5552304" />
  <Command __id="2198" _type="PauseCommand" date="Mon Feb 08 16:10:24 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5553918">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1613]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2197" _type="ShellCommand" date="Mon Feb 08 16:10:24 EST 2021" starttimestamp="1612813070441" timestamp="5553917" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2200" _type="PauseCommand" date="Mon Feb 08 16:10:25 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5555166">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1249]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2199" _type="ShellCommand" date="Mon Feb 08 16:10:25 EST 2021" starttimestamp="1612813070441" timestamp="5555166" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2201" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:10:25 EST 2021" starttimestamp="1612813070441" timestamp="5555231" />
  <Command __id="2202" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:10:25 EST 2021" starttimestamp="1612813070441" timestamp="5555315" />
  <Command __id="2203" _type="RunCommand" date="Mon Feb 08 16:10:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5555391" type="Run" />
  <Command __id="2204" _type="RunCommand" date="Mon Feb 08 16:10:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5555391" type="Run" />
  <Command __id="2205" _type="RunCommand" date="Mon Feb 08 16:10:26 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="5555638" type="Run" />
  <Command __id="2206" _type="RunCommand" date="Mon Feb 08 16:10:26 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="5555794" type="Run" />
  <Command __id="2207" _type="RunCommand" date="Mon Feb 08 16:10:26 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="5555997" type="Run" />
  <Command __id="2208" _type="RunCommand" date="Mon Feb 08 16:10:27 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="5556663" type="Run" />
  <Command __id="2209" _type="ConsoleOutput" date="Mon Feb 08 16:10:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="5556931" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"written Experiment student 29to ExperimentNextPauseDistribution.csv¶Writing Experiment student 19 to ExperimentNextPauseDistribution.csv¶written Experiment student 19to ExperimentNextPauseDistribution.csv¶Writing Experiment student pd1 to ExperimentNextPauseDistribution.csv¶written Experiment student pd1to ExperimentNextPauseDistribution.csv¶Writing Experiment student 30 to ExperimentNextPauseDistribution.csv¶written Experiment student 30to ExperimentNextPauseDistribution.csv¶Writing Experiment student 20 to ExperimentNextPauseDistribution.csv¶written Experiment student 20to ExperimentNextPauseDistribution.csv¶Writing Experiment student 31 to ExperimentNextPauseDistribution.csv¶written Experiment student 31to ExperimentNextPauseDistribution.csv¶Writing Experiment student 21 to ExperimentNextPauseDistribution.csv¶written Experiment student 21to ExperimentNextPauseDistribution.csv¶Writing Experiment student 32 to ExperimentNextPauseDistribution.csv¶written Experiment student 32to ExperimentNextPauseDistribution.csv¶Writing Exp"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student pd2 to Exp"), Diff(INSERT,"s\git\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"ntNextPauseDistribution.csv¶written Exp"), Diff(INSERT,"s\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student pd2to ExperimentNextPauseDistribution.csv¶Writing Experiment student 22 to ExperimentWebStats.csv¶Writing Experiment student 33 to ExperimentWebStats.csv¶Writing Experiment student 23 to ExperimentWebStats.csv¶Writing Experiment student 24 to ExperimentWebStats.csv¶Writing Experiment student 26 to ExperimentWebStats.csv¶Writing Experiment student 16 to Exp"), Diff(INSERT,"s\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"ntWebStats.csv¶Writing Experiment student 27 to Exp"), Diff(INSERT,"s\git\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"ntWebStats.csv¶Writing Exp"), Diff(INSERT,"s\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student 17 to ExperimentWebStats.csv¶Writing Experiment student 28 to ExperimentWebStats.csv¶Writing Experiment student 18 to ExperimentWebStats.csv¶Writing Experiment student 29 to ExperimentWebStats.csv¶Writing Experiment student 19 to ExperimentWebStats.csv¶Writing Experiment student pd1 to ExperimentWebStats.csv¶Writing Experiment student 30 to Exp"), Diff(INSERT,"s\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"ntWebStats.csv¶Writing Experiment student 20 to Exp"), Diff(INSERT,"s\git\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"ntWebStats.csv¶Writing Exp"), Diff(INSERT,"s\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student 31 to ExperimentWebStats.csv¶Writing Experiment student 21 to ExperimentWebStats.csv¶Writing Experiment student 32 to ExperimentWebStats.csv¶Writing Experiment student pd2 to ExperimentWebStats.csv"), Diff(INSERT,"s\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2211" _type="PauseCommand" date="Mon Feb 08 16:10:36 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5566545">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9614]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2210" _type="ConsoleOutput" date="Mon Feb 08 16:10:36 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="5566545" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(INSERT,"0-0"), Diff(EQUAL,"5-"), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL,"8-"), Diff(DELETE,"06-069.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml¶Reading"), Diff(INSERT,"718.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-16-10-05-18-718.xml¶")]]]></diff>
  </Command>
  <Command __id="2212" _type="ConsoleOutput" date="Mon Feb 08 16:10:37 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="5566820" type="ConsoleOutput">
    <outputString><![CDATA[Reading 24
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml"), Diff(INSERT,"Reading 24"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2214" _type="PauseCommand" date="Mon Feb 08 16:10:41 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5570675">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3855]]></rest>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2213" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Feb 08 16:10:41 EST 2021" starttimestamp="1612813070441" timestamp="5570675" />
  <Command __id="2215" _type="RunCommand" date="Mon Feb 08 16:10:41 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="5570926" type="Debug" />
  <Command __id="2216" _type="RunCommand" date="Mon Feb 08 16:10:41 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="5570926" type="Debug" />
  <Command __id="2217" _type="RunCommand" date="Mon Feb 08 16:10:41 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5570926" type="Run" />
  <Command __id="2219" _type="PauseCommand" date="Mon Feb 08 16:10:47 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5576659">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5733]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2220" _type="MoveCaretCommand" caretOffset="890" date="Mon Feb 08 16:10:47 EST 2021" docOffset="7531" starttimestamp="1612813070441" timestamp="5576839" />
  <Command __id="2222" _type="PauseCommand" date="Mon Feb 08 16:11:02 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="5591720">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[14881]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2221" _type="MoveCaretCommand" caretOffset="2128" date="Mon Feb 08 16:11:02 EST 2021" docOffset="26639" starttimestamp="1612813070441" timestamp="5591720" />
  <Command __id="2224" _type="PauseCommand" date="Mon Feb 08 16:11:05 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5594706">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2986]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2223" _type="SelectTextCommand" caretOffset="2123" date="Mon Feb 08 16:11:05 EST 2021" end="2123" start="1838" starttimestamp="1612813070441" timestamp="5594706" />
  <DocumentChange __id="2066" _type="Insert" date="Mon Feb 08 15:48:36 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" length="1" offset="34679" starttimestamp="1612813070441" timestamp="4246240">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="2077" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:51:07 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26716" docExpressionCount="3168" docLength="27806" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="4397178">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp ="), Diff(INSERT," 0;¶							if (webCommand != null) {¶								timestamp ="), Diff(EQUAL," webCommand.getTimestamp() - startTimestamp;¶							"), Diff(INSERT,"}¶							"), Diff(EQUAL,"for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		boolean added = false;¶		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶			maybeAddPauseCommand(newCommands, last, cur);¶			return webCommand;¶		}¶//		newCommands.add(webCommand);¶//		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return null;¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
		boolean added = false;
		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			maybeAddPauseCommand(newCommands, last,	webCommand);
			added = true;
			if (webCommandIterator.hasNext()) {
				last = webCommand;
				webCommand = webCommandIterator.next();
				timestamp = webCommand.getStartTimestamp() - startTimestamp;
			} else {
				break;
			}
		}
		if (added) {
			maybeAddPauseCommand(newCommands, last, cur);
			return webCommand;
		}
//		newCommands.add(webCommand);
//		maybeAddPauseCommand(newCommands, webCommand, cur);
		return null;
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
}
]]></snapshot>
  </Command>
  <Command __id="2085" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 15:51:18 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="4407889">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						"), Diff(INSERT,"if (keyword.equals(url)) {¶							continue;¶						}¶						"), Diff(EQUAL,"webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	protected static final String REST_INSESSION = "Rest(In Session)";
	protected static final String REST_ENDSESSION = "Rest(End Session)";
	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	protected static final String XML_START1 = "<Events startTimestamp=\"";
	protected static final String XML_START2 = "\" logVersion=\"";
	protected static final String XML_VERSION = "1.0.0.202008151525";
	protected static final String XML_START3 = "\">\r\n";
	protected static final String XML_FILE_ENDING = "\r\n</Events>"; 
	protected static final long ONE_SECOND = 1000;
	protected static final long ONE_MIN = 60*1000;
	protected static final long TEN_MIN = 10*ONE_MIN;
	protected static final long FIVE_MIN = 5*ONE_MIN;
	protected static final long HALF_MIN = ONE_MIN/2;
	protected static final long TWO_MIN = 2*ONE_MIN;
	protected static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	protected int threadCount = 0;
	protected CountDownLatch latch;
	protected Analyzer analyzer;
	private static final int THREAD_LIM = 3;
	private int count = 0;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};

	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	protected String getEventType(EHICommand command) {
		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	protected boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			int k = 0;
			for(; k < commands.size(); k++) {
				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {
					break;
				}
			}
			for(; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						if (keyword.equals(url)) {
							continue;
						}
						webCommand = new WebCommand(keyword, url);
						webCommand.setTimestamp(date.getTime());
						retVal.add(0, webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
	
	protected long getLogFileCreationTime(File file) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
		try {
			return df.parse(file.getName().substring(3, 27)).getTime();
		} catch (ParseException e) {
			e.printStackTrace();
			return 0;
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="2100" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:07:42 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26716" docExpressionCount="3168" docLength="27806" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5391927">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		boolean added = false;¶		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶			maybeAddPauseCommand(newCommands, last, cur);¶			return webCommand;¶		}¶//		newCommands.add(webCommand);¶//		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return null;¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2102" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:07:44 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5393855">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2105" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:07:44 EST 2021" docASTNodeCount="78" docActiveCodeLength="698" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5394401">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
	}
}

















]]></snapshot>
  </Command>
  <DocumentChange __id="2111" _type="Delete" date="Mon Feb 08 16:07:51 EST 2021" docASTNodeCount="83" docActiveCodeLength="752" docExpressionCount="42" docLength="932" endLine="20" length="2" offset="835" startLine="20" starttimestamp="1612813070441" timestamp="5400642">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2115" _type="Insert" date="Mon Feb 08 16:07:52 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" length="2" offset="770" starttimestamp="1612813070441" timestamp="5401838">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2117" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:07:53 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5403416">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2120" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:08:00 EST 2021" docASTNodeCount="4607" docActiveCodeLength="26716" docExpressionCount="3168" docLength="27806" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5410041">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		boolean added = false;¶		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶			maybeAddPauseCommand(newCommands, last, cur);¶			return webCommand;¶		}¶//		newCommands.add(webCommand);¶//		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return null;¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2125" _type="Delete" date="Mon Feb 08 16:08:09 EST 2021" docASTNodeCount="4612" docActiveCodeLength="26757" docExpressionCount="3172" docLength="27804" endLine="228" length="2" offset="7533" startLine="228" starttimestamp="1612813070441" timestamp="5419264">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2127" _type="Delete" date="Mon Feb 08 16:08:09 EST 2021" docASTNodeCount="4617" docActiveCodeLength="26804" docExpressionCount="3176" docLength="27802" endLine="229" length="2" offset="7576" startLine="229" starttimestamp="1612813070441" timestamp="5419269">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2128" _type="Delete" date="Mon Feb 08 16:08:09 EST 2021" docASTNodeCount="4622" docActiveCodeLength="26856" docExpressionCount="3180" docLength="27800" endLine="230" length="2" offset="7625" startLine="230" starttimestamp="1612813070441" timestamp="5419271">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2129" _type="Delete" date="Mon Feb 08 16:08:09 EST 2021" docASTNodeCount="4627" docActiveCodeLength="26908" docExpressionCount="3184" docLength="27798" endLine="231" length="2" offset="7679" startLine="231" starttimestamp="1612813070441" timestamp="5419274">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2133" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:08:15 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5424879">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶"), Diff(INSERT,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
		replayer.analyzeFolder(experimentalClassFolderPath);
	}
}

















]]></snapshot>
  </Command>
  <Command __id="2173" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:10:00 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5530531">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2185" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:10:17 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5546657">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="2189" _type="Delete" date="Mon Feb 08 16:10:18 EST 2021" docASTNodeCount="83" docActiveCodeLength="752" docExpressionCount="42" docLength="932" endLine="19" length="2" offset="770" startLine="19" starttimestamp="1612813070441" timestamp="5548464">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2192" _type="Insert" date="Mon Feb 08 16:10:20 EST 2021" docASTNodeCount="78" docActiveCodeLength="698" docExpressionCount="38" docLength="934" length="2" offset="835" starttimestamp="1612813070441" timestamp="5549641">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2194" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:10:22 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5552184">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2218" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:10:47 EST 2021" docASTNodeCount="4627" docActiveCodeLength="26908" docExpressionCount="3184" docLength="27798" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5576659">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.NoSuchElementException;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶"), Diff(DELETE,"//"), Diff(EQUAL,"		createAssignData("Experiment", folder);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		createDistributionData("Experiment", folder);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		createPrevPauseDistribution("Experiment", folder);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶		boolean added = false;¶		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			maybeAddPauseCommand(newCommands, last,	webCommand);¶			added = true;¶			if (webCommandIterator.hasNext()) {¶				last = webCommand;¶				webCommand = webCommandIterator.next();¶				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶			} else {¶				break;¶			}¶		}¶		if (added) {¶			maybeAddPauseCommand(newCommands, last, cur);¶			return webCommand;¶		}¶//		newCommands.add(webCommand);¶//		maybeAddPauseCommand(newCommands, webCommand, cur);¶		return null;¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
		boolean added = false;
		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			maybeAddPauseCommand(newCommands, last,	webCommand);
			added = true;
			if (webCommandIterator.hasNext()) {
				last = webCommand;
				webCommand = webCommandIterator.next();
				timestamp = webCommand.getStartTimestamp() - startTimestamp;
			} else {
				break;
			}
		}
		if (added) {
			maybeAddPauseCommand(newCommands, last, cur);
			return webCommand;
		}
//		newCommands.add(webCommand);
//		maybeAddPauseCommand(newCommands, webCommand, cur);
		return null;
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="2227" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4576" docActiveCodeLength="26720" docExpressionCount="3152" docLength="27800" length="2" offset="26347" starttimestamp="1612813070441" timestamp="5597357">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2228" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4567" docActiveCodeLength="26653" docExpressionCount="3146" docLength="27802" length="2" offset="26539" starttimestamp="1612813070441" timestamp="5597363">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2229" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4562" docActiveCodeLength="26629" docExpressionCount="3144" docLength="27804" length="2" offset="26610" starttimestamp="1612813070441" timestamp="5597367">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2226" _type="PauseCommand" date="Mon Feb 08 16:11:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5596592">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1886]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2225" _type="SelectTextCommand" caretOffset="2790" date="Mon Feb 08 16:11:07 EST 2021" end="2790" start="1837" starttimestamp="1612813070441" timestamp="5596592" />
  <Command __id="2251" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:11:07 EST 2021" starttimestamp="1612813070441" timestamp="5597492" />
  <Command __id="2253" _type="PauseCommand" date="Mon Feb 08 16:11:09 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5598823">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1331]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2252" _type="MoveCaretCommand" caretOffset="2841" date="Mon Feb 08 16:11:09 EST 2021" docOffset="27352" starttimestamp="1612813070441" timestamp="5598823" />
  <Command __id="2255" _type="PauseCommand" date="Mon Feb 08 16:11:16 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5606364">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7541]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2254" _type="MoveCaretCommand" caretOffset="481" date="Mon Feb 08 16:11:16 EST 2021" docOffset="481" starttimestamp="1612813070441" timestamp="5606364" />
  <Command __id="2257" _type="PauseCommand" date="Mon Feb 08 16:11:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5608119">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1755]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2258" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 16:11:18 EST 2021" starttimestamp="1612813070441" timestamp="5608123" />
  <Command __id="2260" _type="PauseCommand" date="Mon Feb 08 16:11:21 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5611177">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3054]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2259" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 16:11:21 EST 2021" starttimestamp="1612813070441" timestamp="5611177" />
  <Command __id="2261" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:11:21 EST 2021" starttimestamp="1612813070441" timestamp="5611264" />
  <Command __id="2262" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:11:21 EST 2021" starttimestamp="1612813070441" timestamp="5611393" />
  <Command __id="2264" _type="PauseCommand" date="Mon Feb 08 16:11:27 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5616728">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5335]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2263" _type="MoveCaretCommand" caretOffset="85" date="Mon Feb 08 16:11:27 EST 2021" docOffset="1246" starttimestamp="1612813070441" timestamp="5616728" />
  <Command __id="2266" _type="MoveCaretCommand" caretOffset="822" date="Mon Feb 08 16:11:28 EST 2021" docOffset="849" starttimestamp="1612813070441" timestamp="5617613" />
  <Command __id="2268" _type="PauseCommand" date="Mon Feb 08 16:11:29 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5619175">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1562]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2269" _type="MoveCaretCommand" caretOffset="5183" date="Mon Feb 08 16:11:29 EST 2021" docOffset="34664" starttimestamp="1612813070441" timestamp="5619307" />
  <DocumentChange __id="2230" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4525" docActiveCodeLength="26528" docExpressionCount="3114" docLength="27806" length="2" offset="26638" starttimestamp="1612813070441" timestamp="5597373">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2231" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4525" docActiveCodeLength="26493" docExpressionCount="3114" docLength="27808" length="2" offset="26743" starttimestamp="1612813070441" timestamp="5597380">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2232" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4525" docActiveCodeLength="26455" docExpressionCount="3114" docLength="27810" length="2" offset="26782" starttimestamp="1612813070441" timestamp="5597394">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2233" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4528" docActiveCodeLength="26400" docExpressionCount="3119" docLength="27812" length="2" offset="26824" starttimestamp="1612813070441" timestamp="5597398">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2234" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4528" docActiveCodeLength="26384" docExpressionCount="3119" docLength="27814" length="2" offset="26883" starttimestamp="1612813070441" timestamp="5597403">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2235" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26346" docExpressionCount="3104" docLength="27816" length="2" offset="26903" starttimestamp="1612813070441" timestamp="5597408">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2236" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26324" docExpressionCount="3104" docLength="27818" length="2" offset="26945" starttimestamp="1612813070441" timestamp="5597412">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2237" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26281" docExpressionCount="3104" docLength="27820" length="2" offset="26971" starttimestamp="1612813070441" timestamp="5597417">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2238" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26217" docExpressionCount="3104" docLength="27822" length="2" offset="27018" starttimestamp="1612813070441" timestamp="5597421">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2239" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26206" docExpressionCount="3104" docLength="27824" length="2" offset="27086" starttimestamp="1612813070441" timestamp="5597426">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2240" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26196" docExpressionCount="3104" docLength="27826" length="2" offset="27101" starttimestamp="1612813070441" timestamp="5597429">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2241" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26192" docExpressionCount="3104" docLength="27828" length="2" offset="27115" starttimestamp="1612813070441" timestamp="5597433">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2242" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4515" docActiveCodeLength="26189" docExpressionCount="3110" docLength="27830" length="2" offset="27123" starttimestamp="1612813070441" timestamp="5597438">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2243" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4515" docActiveCodeLength="26175" docExpressionCount="3108" docLength="27832" length="2" offset="27130" starttimestamp="1612813070441" timestamp="5597443">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2244" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26127" docExpressionCount="3104" docLength="27834" length="2" offset="27148" starttimestamp="1612813070441" timestamp="5597447">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2245" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26106" docExpressionCount="3104" docLength="27836" length="2" offset="27200" starttimestamp="1612813070441" timestamp="5597451">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2246" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26103" docExpressionCount="3104" docLength="27838" length="2" offset="27225" starttimestamp="1612813070441" timestamp="5597456">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2247" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26103" docExpressionCount="3104" docLength="27840" length="2" offset="27232" starttimestamp="1612813070441" timestamp="5597461">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2248" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26103" docExpressionCount="3104" docLength="27842" length="2" offset="27268" starttimestamp="1612813070441" timestamp="5597466">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2249" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4505" docActiveCodeLength="26089" docExpressionCount="3104" docLength="27844" length="2" offset="27327" starttimestamp="1612813070441" timestamp="5597469">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2250" _type="Insert" date="Mon Feb 08 16:11:07 EST 2021" docASTNodeCount="4503" docActiveCodeLength="26087" docExpressionCount="3104" docLength="27846" length="2" offset="27345" starttimestamp="1612813070441" timestamp="5597471">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2256" _type="Delete" date="Mon Feb 08 16:11:18 EST 2021" docASTNodeCount="4497" docActiveCodeLength="26045" docExpressionCount="3099" docLength="27804" endLine="18" length="42" offset="447" startLine="17" starttimestamp="1612813070441" timestamp="5608119">
    <text><![CDATA[import java.util.NoSuchElementException;
]]></text>
  </DocumentChange>
  <Command __id="2265" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:11:27 EST 2021" docASTNodeCount="78" docActiveCodeLength="698" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5617492">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
	}
}

















]]></snapshot>
  </Command>
  <Command __id="2267" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:11:29 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5619175">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2271" _type="PauseCommand" date="Mon Feb 08 16:11:32 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5622053">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2746]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2272" _type="MoveCaretCommand" caretOffset="85" date="Mon Feb 08 16:11:32 EST 2021" docOffset="1246" starttimestamp="1612813070441" timestamp="5622202" />
  <Command __id="2274" _type="PauseCommand" date="Mon Feb 08 16:11:39 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5628871">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6669]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2273" _type="MoveCaretCommand" caretOffset="2564" date="Mon Feb 08 16:11:39 EST 2021" docOffset="27802" starttimestamp="1612813070441" timestamp="5628871" />
  <Command __id="2275" _type="MoveCaretCommand" caretOffset="2561" date="Mon Feb 08 16:11:39 EST 2021" docOffset="27799" starttimestamp="1612813070441" timestamp="5629421" />
  <Command __id="2277" _type="InsertStringCommand" date="Mon Feb 08 16:11:40 EST 2021" starttimestamp="1612813070441" timestamp="5630362" timestamp2="5630362">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2279" _type="InsertStringCommand" date="Mon Feb 08 16:11:40 EST 2021" starttimestamp="1612813070441" timestamp="5630476" timestamp2="5630476">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2281" _type="InsertStringCommand" date="Mon Feb 08 16:11:41 EST 2021" starttimestamp="1612813070441" timestamp="5630762" timestamp2="5630762">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2283" _type="InsertStringCommand" date="Mon Feb 08 16:11:41 EST 2021" starttimestamp="1612813070441" timestamp="5630808" timestamp2="5630808">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2284" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:41 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5630850" />
  <Command __id="2290" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:41 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5631489" />
  <Command __id="2292" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:11:42 EST 2021" starttimestamp="1612813070441" timestamp="5631968" />
  <Command __id="2294" _type="InsertStringCommand" date="Mon Feb 08 16:11:42 EST 2021" starttimestamp="1612813070441" timestamp="5632147" timestamp2="5632147">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2295" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5632190" />
  <Command __id="2303" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5632775" />
  <Command __id="2305" _type="InsertStringCommand" date="Mon Feb 08 16:11:44 EST 2021" starttimestamp="1612813070441" timestamp="5633674" timestamp2="5633674">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="2307" _type="InsertStringCommand" date="Mon Feb 08 16:11:44 EST 2021" starttimestamp="1612813070441" timestamp="5633689" timestamp2="5633689">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2308" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5633732" />
  <Command __id="2312" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:44 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5633956" />
  <Command __id="2314" _type="PauseCommand" date="Mon Feb 08 16:11:45 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5635079">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1123]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2315" _type="InsertStringCommand" date="Mon Feb 08 16:11:45 EST 2021" starttimestamp="1612813070441" timestamp="5635084" timestamp2="5635084">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2316" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:45 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5635126" />
  <Command __id="2317" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5635151" />
  <Command __id="2319" _type="InsertStringCommand" date="Mon Feb 08 16:11:45 EST 2021" starttimestamp="1612813070441" timestamp="5635267" timestamp2="5635267">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2321" _type="InsertStringCommand" date="Mon Feb 08 16:11:45 EST 2021" starttimestamp="1612813070441" timestamp="5635349" timestamp2="5635349">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2322" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:45 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5635441" />
  <Command __id="2323" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5635469" />
  <Command __id="2325" _type="InsertStringCommand" date="Mon Feb 08 16:11:45 EST 2021" starttimestamp="1612813070441" timestamp="5635485" timestamp2="5635485">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2327" _type="InsertStringCommand" date="Mon Feb 08 16:11:46 EST 2021" starttimestamp="1612813070441" timestamp="5635568" timestamp2="5635568">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2328" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:46 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5635661" />
  <Command __id="2329" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5635683" />
  <Command __id="2331" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:11:46 EST 2021" starttimestamp="1612813070441" timestamp="5636246" />
  <Command __id="2333" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:11:46 EST 2021" starttimestamp="1612813070441" timestamp="5636371" />
  <Command __id="2335" _type="InsertStringCommand" date="Mon Feb 08 16:11:46 EST 2021" starttimestamp="1612813070441" timestamp="5636503" timestamp2="5636503">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2336" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5636596" />
  <Command __id="2337" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5636627" />
  <Command __id="2339" _type="InsertStringCommand" date="Mon Feb 08 16:11:47 EST 2021" starttimestamp="1612813070441" timestamp="5636684" timestamp2="5636684">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2341" _type="InsertStringCommand" date="Mon Feb 08 16:11:47 EST 2021" starttimestamp="1612813070441" timestamp="5636745" timestamp2="5636745">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2342" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5636786" />
  <Command __id="2343" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5636809" />
  <Command __id="2345" _type="PauseCommand" date="Mon Feb 08 16:11:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5638722">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1913]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2346" _type="InsertStringCommand" date="Mon Feb 08 16:11:49 EST 2021" starttimestamp="1612813070441" timestamp="5638729" timestamp2="5638729">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2348" _type="InsertStringCommand" date="Mon Feb 08 16:11:49 EST 2021" starttimestamp="1612813070441" timestamp="5639013" timestamp2="5639013">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2349" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5639105" />
  <Command __id="2350" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5639130" />
  <Command __id="2352" _type="InsertStringCommand" date="Mon Feb 08 16:11:49 EST 2021" starttimestamp="1612813070441" timestamp="5639197" timestamp2="5639197">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2354" _type="InsertStringCommand" date="Mon Feb 08 16:11:49 EST 2021" starttimestamp="1612813070441" timestamp="5639269" timestamp2="5639269">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2355" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5639311" />
  <Command __id="2356" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5639334" />
  <Command __id="2358" _type="PauseCommand" date="Mon Feb 08 16:11:50 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5640412">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1078]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2359" _type="InsertStringCommand" date="Mon Feb 08 16:11:50 EST 2021" starttimestamp="1612813070441" timestamp="5640418" timestamp2="5640418">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2361" _type="InsertStringCommand" date="Mon Feb 08 16:11:51 EST 2021" starttimestamp="1612813070441" timestamp="5640739" timestamp2="5640739">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2362" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5640834" />
  <Command __id="2363" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5640858" />
  <Command __id="2365" _type="InsertStringCommand" date="Mon Feb 08 16:11:51 EST 2021" starttimestamp="1612813070441" timestamp="5640873" timestamp2="5640873">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2367" _type="InsertStringCommand" date="Mon Feb 08 16:11:51 EST 2021" starttimestamp="1612813070441" timestamp="5640931" timestamp2="5640931">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2368" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5640973" />
  <Command __id="2369" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5640997" />
  <Command __id="2371" _type="InsertStringCommand" date="Mon Feb 08 16:11:51 EST 2021" starttimestamp="1612813070441" timestamp="5641233" timestamp2="5641233">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2373" _type="InsertStringCommand" date="Mon Feb 08 16:11:51 EST 2021" starttimestamp="1612813070441" timestamp="5641317" timestamp2="5641317">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2374" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5641409" />
  <Command __id="2375" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5641434" />
  <Command __id="2377" _type="InsertStringCommand" date="Mon Feb 08 16:11:52 EST 2021" starttimestamp="1612813070441" timestamp="5641942" timestamp2="5641942">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="2379" _type="InsertStringCommand" date="Mon Feb 08 16:11:52 EST 2021" starttimestamp="1612813070441" timestamp="5642441" timestamp2="5642441">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2380" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:52 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5642534" />
  <Command __id="2381" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5642558" />
  <Command __id="2383" _type="InsertStringCommand" date="Mon Feb 08 16:11:53 EST 2021" starttimestamp="1612813070441" timestamp="5642599" timestamp2="5642599">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2385" _type="InsertStringCommand" date="Mon Feb 08 16:11:53 EST 2021" starttimestamp="1612813070441" timestamp="5642662" timestamp2="5642662">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2386" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:53 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5642704" />
  <Command __id="2387" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:53 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5642726" />
  <Command __id="2389" _type="InsertStringCommand" date="Mon Feb 08 16:11:53 EST 2021" starttimestamp="1612813070441" timestamp="5642763" timestamp2="5642763">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2390" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:53 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5642855" />
  <Command __id="2391" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:53 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5642879" />
  <Command __id="2393" _type="InsertStringCommand" date="Mon Feb 08 16:11:53 EST 2021" starttimestamp="1612813070441" timestamp="5642890" timestamp2="5642890">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2395" _type="InsertStringCommand" date="Mon Feb 08 16:11:53 EST 2021" starttimestamp="1612813070441" timestamp="5642917" timestamp2="5642917">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2397" _type="InsertStringCommand" date="Mon Feb 08 16:11:53 EST 2021" starttimestamp="1612813070441" timestamp="5642957" timestamp2="5642957">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2398" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:11:53 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5643049" />
  <Command __id="2399" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:11:53 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5643072" />
  <Command __id="2401" _type="InsertStringCommand" date="Mon Feb 08 16:11:53 EST 2021" starttimestamp="1612813070441" timestamp="5643558" timestamp2="5643558">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2403" _type="InsertStringCommand" date="Mon Feb 08 16:11:54 EST 2021" starttimestamp="1612813070441" timestamp="5644522" timestamp2="5644522">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2405" _type="InsertStringCommand" date="Mon Feb 08 16:11:55 EST 2021" starttimestamp="1612813070441" timestamp="5644752" timestamp2="5644752">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2407" _type="PauseCommand" date="Mon Feb 08 16:12:06 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="5656218">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[11466]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2406" _type="MoveCaretCommand" caretOffset="662" date="Mon Feb 08 16:12:06 EST 2021" docOffset="20604" starttimestamp="1612813070441" timestamp="5656218" />
  <Command __id="2408" _type="MoveCaretCommand" caretOffset="739" date="Mon Feb 08 16:12:07 EST 2021" docOffset="20681" starttimestamp="1612813070441" timestamp="5656671" />
  <Command __id="2410" _type="PauseCommand" date="Mon Feb 08 16:12:14 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5663771">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7100]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2409" _type="SelectTextCommand" caretOffset="2073" date="Mon Feb 08 16:12:14 EST 2021" end="2073" start="662" starttimestamp="1612813070441" timestamp="5663771" />
  <Command __id="2411" _type="CopyCommand" date="Mon Feb 08 16:12:14 EST 2021" starttimestamp="1612813070441" timestamp="5664439" />
  <Command __id="2413" _type="PauseCommand" date="Mon Feb 08 16:12:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5666086">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1647]]></rest>
    <prev><![CDATA[CopyCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2412" _type="MoveCaretCommand" caretOffset="4031" date="Mon Feb 08 16:12:16 EST 2021" docOffset="27850" starttimestamp="1612813070441" timestamp="5666086" />
  <Command __id="2415" _type="PasteCommand" date="Mon Feb 08 16:12:16 EST 2021" starttimestamp="1612813070441" timestamp="5666313" />
  <Command __id="2417" _type="PauseCommand" date="Mon Feb 08 16:12:19 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5668998">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2685]]></rest>
    <prev><![CDATA[PasteCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2416" _type="MoveCaretCommand" caretOffset="4024" date="Mon Feb 08 16:12:19 EST 2021" docOffset="27843" starttimestamp="1612813070441" timestamp="5668998" />
  <Command __id="2419" _type="InsertStringCommand" date="Mon Feb 08 16:12:19 EST 2021" starttimestamp="1612813070441" timestamp="5669549" timestamp2="5669549">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2421" _type="InsertStringCommand" date="Mon Feb 08 16:12:20 EST 2021" starttimestamp="1612813070441" timestamp="5669809" timestamp2="5669809">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2423" _type="InsertStringCommand" date="Mon Feb 08 16:12:20 EST 2021" starttimestamp="1612813070441" timestamp="5669891" timestamp2="5669891">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2425" _type="InsertStringCommand" date="Mon Feb 08 16:12:20 EST 2021" starttimestamp="1612813070441" timestamp="5669937" timestamp2="5669937">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2427" _type="InsertStringCommand" date="Mon Feb 08 16:12:20 EST 2021" starttimestamp="1612813070441" timestamp="5669998" timestamp2="5669998">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2428" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5670040" />
  <Command __id="2430" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5670211" />
  <Command __id="2432" _type="InsertStringCommand" date="Mon Feb 08 16:12:20 EST 2021" starttimestamp="1612813070441" timestamp="5670227" timestamp2="5670227">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2434" _type="InsertStringCommand" date="Mon Feb 08 16:12:20 EST 2021" starttimestamp="1612813070441" timestamp="5670552" timestamp2="5670552">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2435" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5670595" />
  <Command __id="2440" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5671297" />
  <Command __id="2442" _type="InsertStringCommand" date="Mon Feb 08 16:12:21 EST 2021" starttimestamp="1612813070441" timestamp="5671312" timestamp2="5671312">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2444" _type="InsertStringCommand" date="Mon Feb 08 16:12:21 EST 2021" starttimestamp="1612813070441" timestamp="5671500" timestamp2="5671500">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2446" _type="InsertStringCommand" date="Mon Feb 08 16:12:22 EST 2021" starttimestamp="1612813070441" timestamp="5671595" timestamp2="5671595">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2448" _type="PauseCommand" date="Mon Feb 08 16:12:24 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5674521">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2926]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2449" _type="InsertStringCommand" date="Mon Feb 08 16:12:24 EST 2021" starttimestamp="1612813070441" timestamp="5674527" timestamp2="5674527">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="2451" _type="PauseCommand" date="Mon Feb 08 16:12:25 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5675537">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1010]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2452" _type="InsertStringCommand" date="Mon Feb 08 16:12:25 EST 2021" starttimestamp="1612813070441" timestamp="5675544" timestamp2="5675544">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2453" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:26 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5675584" />
  <Command __id="2456" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:26 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5675876" />
  <Command __id="2458" _type="InsertStringCommand" date="Mon Feb 08 16:12:26 EST 2021" starttimestamp="1612813070441" timestamp="5675894" timestamp2="5675894">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2460" _type="InsertStringCommand" date="Mon Feb 08 16:12:26 EST 2021" starttimestamp="1612813070441" timestamp="5676455" timestamp2="5676455">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2461" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:26 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5676497" />
  <Command __id="2465" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:27 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5677092" />
  <Command __id="2467" _type="InsertStringCommand" date="Mon Feb 08 16:12:27 EST 2021" starttimestamp="1612813070441" timestamp="5677108" timestamp2="5677108">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2469" _type="PauseCommand" date="Mon Feb 08 16:12:29 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5678917">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1809]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2468" _type="MoveCaretCommand" caretOffset="4134" date="Mon Feb 08 16:12:29 EST 2021" docOffset="27953" starttimestamp="1612813070441" timestamp="5678917" />
  <Command __id="2471" _type="PauseCommand" date="Mon Feb 08 16:12:36 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5686043">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7126]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2470" _type="ShellCommand" date="Mon Feb 08 16:12:36 EST 2021" starttimestamp="1612813070441" timestamp="5686043" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2473" _type="PauseCommand" date="Mon Feb 08 16:12:39 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5688697">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2654]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2472" _type="ShellCommand" date="Mon Feb 08 16:12:39 EST 2021" starttimestamp="1612813070441" timestamp="5688697" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2474" _type="MoveCaretCommand" caretOffset="4134" date="Mon Feb 08 16:12:39 EST 2021" docOffset="27953" starttimestamp="1612813070441" timestamp="5689283" />
  <Command __id="2476" _type="PauseCommand" date="Mon Feb 08 16:12:54 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="5703812">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[14529]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2475" _type="SelectTextCommand" caretOffset="4023" date="Mon Feb 08 16:12:54 EST 2021" end="4023" start="4005" starttimestamp="1612813070441" timestamp="5703812" />
  <Command __id="2478" _type="PauseCommand" date="Mon Feb 08 16:12:55 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5705295">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1483]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2479" _type="InsertStringCommand" date="Mon Feb 08 16:12:55 EST 2021" starttimestamp="1612813070441" timestamp="5705304" timestamp2="5705304">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2481" _type="InsertStringCommand" date="Mon Feb 08 16:12:55 EST 2021" starttimestamp="1612813070441" timestamp="5705465" timestamp2="5705465">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2482" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:55 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5705504" />
  <Command __id="2483" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:55 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5705520" />
  <Command __id="2485" _type="InsertStringCommand" date="Mon Feb 08 16:12:56 EST 2021" starttimestamp="1612813070441" timestamp="5705606" timestamp2="5705606">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2486" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5705696" />
  <Command __id="2487" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5705711" />
  <Command __id="2489" _type="InsertStringCommand" date="Mon Feb 08 16:12:56 EST 2021" starttimestamp="1612813070441" timestamp="5705782" timestamp2="5705782">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2490" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5705872" />
  <Command __id="2491" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5705889" />
  <Command __id="2493" _type="InsertStringCommand" date="Mon Feb 08 16:12:56 EST 2021" starttimestamp="1612813070441" timestamp="5706110" timestamp2="5706110">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2495" _type="InsertStringCommand" date="Mon Feb 08 16:12:56 EST 2021" starttimestamp="1612813070441" timestamp="5706211" timestamp2="5706211">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2496" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5706302" />
  <Command __id="2497" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5706320" />
  <Command __id="2499" _type="InsertStringCommand" date="Mon Feb 08 16:12:56 EST 2021" starttimestamp="1612813070441" timestamp="5706462" timestamp2="5706462">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2500" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5706550" />
  <Command __id="2501" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5706566" />
  <Command __id="2503" _type="InsertStringCommand" date="Mon Feb 08 16:12:57 EST 2021" starttimestamp="1612813070441" timestamp="5706632" timestamp2="5706632">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2504" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5706722" />
  <Command __id="2505" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5706744" />
  <Command __id="2507" _type="InsertStringCommand" date="Mon Feb 08 16:12:57 EST 2021" starttimestamp="1612813070441" timestamp="5707195" timestamp2="5707195">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2509" _type="InsertStringCommand" date="Mon Feb 08 16:12:57 EST 2021" starttimestamp="1612813070441" timestamp="5707366" timestamp2="5707366">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2510" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5707456" />
  <Command __id="2511" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5707472" />
  <Command __id="2513" _type="InsertStringCommand" date="Mon Feb 08 16:12:58 EST 2021" starttimestamp="1612813070441" timestamp="5707807" timestamp2="5707807">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2515" _type="InsertStringCommand" date="Mon Feb 08 16:12:58 EST 2021" starttimestamp="1612813070441" timestamp="5708008" timestamp2="5708008">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2517" _type="InsertStringCommand" date="Mon Feb 08 16:12:58 EST 2021" starttimestamp="1612813070441" timestamp="5708081" timestamp2="5708081">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2518" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:58 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5708120" />
  <Command __id="2519" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:58 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5708135" />
  <Command __id="2521" _type="InsertStringCommand" date="Mon Feb 08 16:12:58 EST 2021" starttimestamp="1612813070441" timestamp="5708149" timestamp2="5708149">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2522" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:58 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5708238" />
  <Command __id="2523" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:58 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5708254" />
  <Command __id="2525" _type="InsertStringCommand" date="Mon Feb 08 16:12:58 EST 2021" starttimestamp="1612813070441" timestamp="5708364" timestamp2="5708364">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2526" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:58 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5708453" />
  <Command __id="2527" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:58 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5708469" />
  <Command __id="2529" _type="InsertStringCommand" date="Mon Feb 08 16:12:58 EST 2021" starttimestamp="1612813070441" timestamp="5708483" timestamp2="5708483">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2530" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:12:59 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5708571" />
  <Command __id="2531" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:12:59 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5708587" />
  <Command __id="2533" _type="PauseCommand" date="Mon Feb 08 16:13:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5710516">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1929]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2532" _type="MoveCaretCommand" caretOffset="4096" date="Mon Feb 08 16:13:00 EST 2021" docOffset="27915" starttimestamp="1612813070441" timestamp="5710516" />
  <Command __id="2534" _type="SelectTextCommand" caretOffset="4098" date="Mon Feb 08 16:13:01 EST 2021" end="4098" start="4090" starttimestamp="1612813070441" timestamp="5710665" />
  <Command __id="2270" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:11:32 EST 2021" docASTNodeCount="4497" docActiveCodeLength="26045" docExpressionCount="3099" docLength="27804" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="5622053">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶"), Diff(DELETE,"import java.util.NoSuchElementException;¶"), Diff(EQUAL,"import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶"), Diff(INSERT,"//"), Diff(EQUAL,"	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶"), Diff(INSERT,"//"), Diff(EQUAL,"		boolean added = false;¶"), Diff(INSERT,"//"), Diff(EQUAL,"		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"			webCommand.setStartTimestamp(0);¶"), Diff(INSERT,"//"), Diff(EQUAL,"			webCommand.setTimestamp(timestamp);¶"), Diff(INSERT,"//"), Diff(EQUAL,"			maybeAddPauseCommand(newCommands, last,	webCommand);¶"), Diff(INSERT,"//"), Diff(EQUAL,"			added = true;¶"), Diff(INSERT,"//"), Diff(EQUAL,"			if (webCommandIterator.hasNext()) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"				last = webCommand;¶"), Diff(INSERT,"//"), Diff(EQUAL,"				webCommand = webCommandIterator.next();¶"), Diff(INSERT,"//"), Diff(EQUAL,"				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶"), Diff(INSERT,"//"), Diff(EQUAL,"			} else {¶"), Diff(INSERT,"//"), Diff(EQUAL,"				break;¶"), Diff(INSERT,"//"), Diff(EQUAL,"			}¶"), Diff(INSERT,"//"), Diff(EQUAL,"		}¶"), Diff(INSERT,"//"), Diff(EQUAL,"		if (added) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"			maybeAddPauseCommand(newCommands, last, cur);¶"), Diff(INSERT,"//"), Diff(EQUAL,"			return webCommand;¶"), Diff(INSERT,"//"), Diff(EQUAL,"		}¶//"), Diff(INSERT,"//"), Diff(EQUAL,"		newCommands.add(webCommand);¶//"), Diff(INSERT,"//"), Diff(EQUAL,"		maybeAddPauseCommand(newCommands, webCommand, cur);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		return null;¶"), Diff(INSERT,"//"), Diff(EQUAL,"	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="2276" _type="Insert" date="Mon Feb 08 16:11:40 EST 2021" docASTNodeCount="4497" docActiveCodeLength="26058" docExpressionCount="3099" docLength="27817" length="13" offset="27799" repeat="9" starttimestamp="1612813070441" timestamp="5630352" timestamp2="5631480">
    <text><![CDATA[
	
	public ]]></text>
  </DocumentChange>
  <DocumentChange __id="2291" _type="Delete" date="Mon Feb 08 16:11:42 EST 2021" docASTNodeCount="4497" docActiveCodeLength="26051" docExpressionCount="3099" docLength="27810" endLine="798" length="7" offset="27805" startLine="798" starttimestamp="1612813070441" timestamp="5631964">
    <text><![CDATA[public ]]></text>
  </DocumentChange>
  <DocumentChange __id="2293" _type="Insert" date="Mon Feb 08 16:11:42 EST 2021" docASTNodeCount="4502" docActiveCodeLength="26069" docExpressionCount="3100" docLength="27828" length="18" offset="27805" repeat="18" starttimestamp="1612813070441" timestamp="5632143" timestamp2="5635564">
    <text><![CDATA[private void crete]]></text>
  </DocumentChange>
  <DocumentChange __id="2330" _type="Delete" date="Mon Feb 08 16:11:46 EST 2021" docASTNodeCount="4502" docActiveCodeLength="26067" docExpressionCount="3100" docLength="27826" endLine="798" length="2" offset="27821" repeat="2" startLine="798" starttimestamp="1612813070441" timestamp="5636244" timestamp2="5636367">
    <text><![CDATA[te]]></text>
  </DocumentChange>
  <DocumentChange __id="2334" _type="Insert" date="Mon Feb 08 16:11:46 EST 2021" docASTNodeCount="4502" docActiveCodeLength="26100" docExpressionCount="3100" docLength="27859" length="33" offset="27821" repeat="24" starttimestamp="1612813070441" timestamp="5636499" timestamp2="5644734">
    <text><![CDATA[atePageSearchRelation() {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="2414" _type="Replace" date="Mon Feb 08 16:12:16 EST 2021" docASTNodeCount="4760" docActiveCodeLength="27511" docExpressionCount="3264" docLength="29270" endLine="799" insertionLength="1413" int_docASTNodeCount="4502" int_docActiveCodeLength="26098" int_docExpressionCount="3100" int_docLength="27857" length="2" offset="27848" startLine="799" starttimestamp="1612813070441" timestamp="5666295">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2418" _type="Insert" date="Mon Feb 08 16:12:19 EST 2021" docASTNodeCount="4502" docActiveCodeLength="27517" docExpressionCount="3100" docLength="29276" length="6" offset="27843" repeat="6" starttimestamp="1612813070441" timestamp="5669541" timestamp2="5670200">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <DocumentChange __id="2431" _type="Replace" date="Mon Feb 08 16:12:20 EST 2021" docASTNodeCount="4502" docActiveCodeLength="27518" docExpressionCount="3100" docLength="29277" endLine="798" insertionLength="7" int_docASTNodeCount="4760" int_docActiveCodeLength="27511" int_docExpressionCount="3264" int_docLength="29270" length="6" offset="27843" startLine="798" starttimestamp="1612813070441" timestamp="5670219">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2433" _type="Insert" date="Mon Feb 08 16:12:20 EST 2021" docASTNodeCount="4764" docActiveCodeLength="27523" docExpressionCount="3266" docLength="29282" length="5" offset="27850" repeat="5" starttimestamp="1612813070441" timestamp="5670547" timestamp2="5671083">
    <text><![CDATA[assig]]></text>
  </DocumentChange>
  <DocumentChange __id="2441" _type="Replace" date="Mon Feb 08 16:12:21 EST 2021" docASTNodeCount="4764" docActiveCodeLength="27524" docExpressionCount="3266" docLength="29283" endLine="798" insertionLength="6" int_docASTNodeCount="4502" int_docActiveCodeLength="27518" int_docExpressionCount="3100" int_docLength="29277" length="5" offset="27850" startLine="798" starttimestamp="1612813070441" timestamp="5671305">
    <deletedText><![CDATA[assig]]></deletedText>
    <insertedText><![CDATA[assign]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2443" _type="Insert" date="Mon Feb 08 16:12:21 EST 2021" docASTNodeCount="4506" docActiveCodeLength="27526" docExpressionCount="3102" docLength="29285" length="2" offset="27856" repeat="2" starttimestamp="1612813070441" timestamp="5671495" timestamp2="5671590">
    <text><![CDATA[, ]]></text>
  </DocumentChange>
  <DocumentChange __id="2447" _type="Insert" date="Mon Feb 08 16:12:24 EST 2021" docASTNodeCount="4506" docActiveCodeLength="27530" docExpressionCount="3102" docLength="29289" length="4" offset="27858" repeat="4" starttimestamp="1612813070441" timestamp="5674521" timestamp2="5675795">
    <text><![CDATA[File]]></text>
  </DocumentChange>
  <DocumentChange __id="2457" _type="Replace" date="Mon Feb 08 16:12:26 EST 2021" docASTNodeCount="4506" docActiveCodeLength="27531" docExpressionCount="3102" docLength="29290" endLine="798" insertionLength="5" int_docASTNodeCount="4506" int_docActiveCodeLength="27526" int_docExpressionCount="3102" int_docLength="29285" length="4" offset="27858" startLine="798" starttimestamp="1612813070441" timestamp="5675887">
    <deletedText><![CDATA[File]]></deletedText>
    <insertedText><![CDATA[File ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2459" _type="Insert" date="Mon Feb 08 16:12:26 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27535" docExpressionCount="3268" docLength="29294" length="4" offset="27863" repeat="4" starttimestamp="1612813070441" timestamp="5676450" timestamp2="5676750">
    <text><![CDATA[fold]]></text>
  </DocumentChange>
  <DocumentChange __id="2466" _type="Replace" date="Mon Feb 08 16:12:27 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27537" docExpressionCount="3268" docLength="29296" endLine="798" insertionLength="6" int_docASTNodeCount="4506" int_docActiveCodeLength="27531" int_docExpressionCount="3102" int_docLength="29290" length="4" offset="27863" startLine="798" starttimestamp="1612813070441" timestamp="5677100">
    <deletedText><![CDATA[fold]]></deletedText>
    <insertedText><![CDATA[folder]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2477" _type="Replace" date="Mon Feb 08 16:12:55 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27520" docExpressionCount="3268" docLength="29279" endLine="798" insertionLength="1" int_docASTNodeCount="4768" int_docActiveCodeLength="27519" int_docExpressionCount="3268" int_docLength="29278" length="18" offset="27824" startLine="798" starttimestamp="1612813070441" timestamp="5705295">
    <deletedText><![CDATA[PageSearchRelation]]></deletedText>
    <insertedText><![CDATA[L]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2480" _type="Insert" date="Mon Feb 08 16:12:55 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27535" docExpressionCount="3268" docLength="29294" length="15" offset="27825" repeat="15" starttimestamp="1612813070441" timestamp="5705456" timestamp2="5708473">
    <text><![CDATA[astPageOfSearch]]></text>
  </DocumentChange>
  <DocumentChange __id="2535" _type="Replace" date="Mon Feb 08 16:13:03 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27528" docExpressionCount="3268" docLength="29287" endLine="799" insertionLength="1" int_docASTNodeCount="4768" int_docActiveCodeLength="27527" int_docExpressionCount="3268" int_docLength="29286" length="8" offset="27909" startLine="799" starttimestamp="1612813070441" timestamp="5712768">
    <deletedText><![CDATA[WebStats]]></deletedText>
    <insertedText><![CDATA[L]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2538" _type="Insert" date="Mon Feb 08 16:13:03 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27535" docExpressionCount="3268" docLength="29294" length="7" offset="27910" repeat="7" starttimestamp="1612813070441" timestamp="5712921" timestamp2="5714187">
    <text><![CDATA[astpage]]></text>
  </DocumentChange>
  <DocumentChange __id="2552" _type="Delete" date="Mon Feb 08 16:13:04 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27532" docExpressionCount="3268" docLength="29291" endLine="799" length="3" offset="27914" repeat="3" startLine="799" starttimestamp="1612813070441" timestamp="5714474" timestamp2="5714717">
    <text><![CDATA[age]]></text>
  </DocumentChange>
  <DocumentChange __id="2558" _type="Insert" date="Mon Feb 08 16:13:05 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27533" docExpressionCount="3268" docLength="29292" length="1" offset="27914" starttimestamp="1612813070441" timestamp="5714993">
    <text><![CDATA[P]]></text>
  </DocumentChange>
  <DocumentChange __id="2560" _type="Delete" date="Mon Feb 08 16:13:05 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27531" docExpressionCount="3268" docLength="29290" endLine="799" length="2" offset="27913" repeat="2" startLine="799" starttimestamp="1612813070441" timestamp="5715235" timestamp2="5715725">
    <text><![CDATA[pP]]></text>
  </DocumentChange>
  <DocumentChange __id="2564" _type="Insert" date="Mon Feb 08 16:13:06 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27536" docExpressionCount="3268" docLength="29295" length="5" offset="27913" repeat="5" starttimestamp="1612813070441" timestamp="5715958" timestamp2="5716602">
    <text><![CDATA[Page ]]></text>
  </DocumentChange>
  <Command __id="2536" _type="PauseCommand" date="Mon Feb 08 16:13:03 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5712768">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2103]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2537" _type="InsertStringCommand" date="Mon Feb 08 16:13:03 EST 2021" starttimestamp="1612813070441" timestamp="5712774" timestamp2="5712774">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2539" _type="InsertStringCommand" date="Mon Feb 08 16:13:03 EST 2021" starttimestamp="1612813070441" timestamp="5712926" timestamp2="5712926">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2541" _type="InsertStringCommand" date="Mon Feb 08 16:13:03 EST 2021" starttimestamp="1612813070441" timestamp="5713000" timestamp2="5713000">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2543" _type="InsertStringCommand" date="Mon Feb 08 16:13:03 EST 2021" starttimestamp="1612813070441" timestamp="5713088" timestamp2="5713088">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2545" _type="InsertStringCommand" date="Mon Feb 08 16:13:04 EST 2021" starttimestamp="1612813070441" timestamp="5713765" timestamp2="5713765">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2547" _type="InsertStringCommand" date="Mon Feb 08 16:13:04 EST 2021" starttimestamp="1612813070441" timestamp="5713880" timestamp2="5713880">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2549" _type="InsertStringCommand" date="Mon Feb 08 16:13:04 EST 2021" starttimestamp="1612813070441" timestamp="5714083" timestamp2="5714083">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2551" _type="InsertStringCommand" date="Mon Feb 08 16:13:04 EST 2021" starttimestamp="1612813070441" timestamp="5714192" timestamp2="5714192">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:04 EST 2021" starttimestamp="1612813070441" timestamp="5714476" />
  <Command __id="2555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:05 EST 2021" starttimestamp="1612813070441" timestamp="5714596" />
  <Command __id="2557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:05 EST 2021" starttimestamp="1612813070441" timestamp="5714720" />
  <Command __id="2559" _type="InsertStringCommand" date="Mon Feb 08 16:13:05 EST 2021" starttimestamp="1612813070441" timestamp="5714998" timestamp2="5714998">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:05 EST 2021" starttimestamp="1612813070441" timestamp="5715238" />
  <Command __id="2563" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:06 EST 2021" starttimestamp="1612813070441" timestamp="5715727" />
  <Command __id="2565" _type="InsertStringCommand" date="Mon Feb 08 16:13:06 EST 2021" starttimestamp="1612813070441" timestamp="5715963" timestamp2="5715963">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2567" _type="InsertStringCommand" date="Mon Feb 08 16:13:06 EST 2021" starttimestamp="1612813070441" timestamp="5716154" timestamp2="5716154">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2569" _type="InsertStringCommand" date="Mon Feb 08 16:13:06 EST 2021" starttimestamp="1612813070441" timestamp="5716334" timestamp2="5716334">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2571" _type="InsertStringCommand" date="Mon Feb 08 16:13:06 EST 2021" starttimestamp="1612813070441" timestamp="5716426" timestamp2="5716426">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2573" _type="InsertStringCommand" date="Mon Feb 08 16:13:07 EST 2021" starttimestamp="1612813070441" timestamp="5716607" timestamp2="5716607">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2575" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:07 EST 2021" starttimestamp="1612813070441" timestamp="5716938" />
  <Command __id="2577" _type="InsertStringCommand" date="Mon Feb 08 16:13:07 EST 2021" starttimestamp="1612813070441" timestamp="5717131" timestamp2="5717131">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2579" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:08 EST 2021" starttimestamp="1612813070441" timestamp="5717663" />
  <Command __id="2581" _type="InsertStringCommand" date="Mon Feb 08 16:13:08 EST 2021" starttimestamp="1612813070441" timestamp="5717933" timestamp2="5717933">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2583" _type="InsertStringCommand" date="Mon Feb 08 16:13:08 EST 2021" starttimestamp="1612813070441" timestamp="5718066" timestamp2="5718066">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2585" _type="InsertStringCommand" date="Mon Feb 08 16:13:08 EST 2021" starttimestamp="1612813070441" timestamp="5718457" timestamp2="5718457">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2587" _type="InsertStringCommand" date="Mon Feb 08 16:13:09 EST 2021" starttimestamp="1612813070441" timestamp="5718661" timestamp2="5718661">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2589" _type="InsertStringCommand" date="Mon Feb 08 16:13:09 EST 2021" starttimestamp="1612813070441" timestamp="5718743" timestamp2="5718743">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2591" _type="InsertStringCommand" date="Mon Feb 08 16:13:09 EST 2021" starttimestamp="1612813070441" timestamp="5718757" timestamp2="5718757">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2593" _type="InsertStringCommand" date="Mon Feb 08 16:13:09 EST 2021" starttimestamp="1612813070441" timestamp="5718997" timestamp2="5718997">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2595" _type="InsertStringCommand" date="Mon Feb 08 16:13:09 EST 2021" starttimestamp="1612813070441" timestamp="5719105" timestamp2="5719105">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2597" _type="PauseCommand" date="Mon Feb 08 16:13:11 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5720693">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1588]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2596" _type="MoveCaretCommand" caretOffset="4214" date="Mon Feb 08 16:13:11 EST 2021" docOffset="28033" starttimestamp="1612813070441" timestamp="5720693" />
  <Command __id="2598" _type="MoveCaretCommand" caretOffset="4189" date="Mon Feb 08 16:13:11 EST 2021" docOffset="28008" starttimestamp="1612813070441" timestamp="5721199" />
  <Command __id="2599" _type="MoveCaretCommand" caretOffset="4214" date="Mon Feb 08 16:13:12 EST 2021" docOffset="28033" starttimestamp="1612813070441" timestamp="5721578" />
  <Command __id="2601" _type="PauseCommand" date="Mon Feb 08 16:13:23 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="5733442">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[11864]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2600" _type="MoveCaretCommand" caretOffset="4367" date="Mon Feb 08 16:13:23 EST 2021" docOffset="28186" starttimestamp="1612813070441" timestamp="5733442" />
  <Command __id="2603" _type="PauseCommand" date="Mon Feb 08 16:13:52 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="5761677">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[28235]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2602" _type="MoveCaretCommand" caretOffset="905" date="Mon Feb 08 16:13:52 EST 2021" docOffset="20847" starttimestamp="1612813070441" timestamp="5761677" />
  <Command __id="2605" _type="InsertStringCommand" date="Mon Feb 08 16:13:52 EST 2021" starttimestamp="1612813070441" timestamp="5762373" timestamp2="5762373">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2607" _type="InsertStringCommand" date="Mon Feb 08 16:13:53 EST 2021" starttimestamp="1612813070441" timestamp="5763165" timestamp2="5763165">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2609" _type="InsertStringCommand" date="Mon Feb 08 16:13:53 EST 2021" starttimestamp="1612813070441" timestamp="5763390" timestamp2="5763390">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2611" _type="InsertStringCommand" date="Mon Feb 08 16:13:54 EST 2021" starttimestamp="1612813070441" timestamp="5763692" timestamp2="5763692">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2613" _type="InsertStringCommand" date="Mon Feb 08 16:13:54 EST 2021" starttimestamp="1612813070441" timestamp="5763808" timestamp2="5763808">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2615" _type="InsertStringCommand" date="Mon Feb 08 16:13:54 EST 2021" starttimestamp="1612813070441" timestamp="5763893" timestamp2="5763893">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2617" _type="InsertStringCommand" date="Mon Feb 08 16:13:54 EST 2021" starttimestamp="1612813070441" timestamp="5764260" timestamp2="5764260">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2619" _type="InsertStringCommand" date="Mon Feb 08 16:13:54 EST 2021" starttimestamp="1612813070441" timestamp="5764488" timestamp2="5764488">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2621" _type="InsertStringCommand" date="Mon Feb 08 16:13:55 EST 2021" starttimestamp="1612813070441" timestamp="5764583" timestamp2="5764583">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2623" _type="PauseCommand" date="Mon Feb 08 16:13:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5766348">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1765]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2622" _type="MoveCaretCommand" caretOffset="907" date="Mon Feb 08 16:13:56 EST 2021" docOffset="20849" starttimestamp="1612813070441" timestamp="5766348" />
  <Command __id="2625" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:13:57 EST 2021" starttimestamp="1612813070441" timestamp="5766878" />
  <Command __id="2627" _type="InsertStringCommand" date="Mon Feb 08 16:13:57 EST 2021" starttimestamp="1612813070441" timestamp="5767033" timestamp2="5767033">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2629" _type="PauseCommand" date="Mon Feb 08 16:14:15 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="5785369">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[18336]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2628" _type="SelectTextCommand" caretOffset="1429" date="Mon Feb 08 16:14:15 EST 2021" end="1429" start="1396" starttimestamp="1612813070441" timestamp="5785369" />
  <Command __id="2630" _type="MoveCaretCommand" caretOffset="1425" date="Mon Feb 08 16:14:16 EST 2021" docOffset="21367" starttimestamp="1612813070441" timestamp="5785676" />
  <Command __id="2632" _type="PauseCommand" date="Mon Feb 08 16:14:17 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5786749">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1073]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2631" _type="MoveCaretCommand" caretOffset="1454" date="Mon Feb 08 16:14:17 EST 2021" docOffset="21396" starttimestamp="1612813070441" timestamp="5786749" />
  <Command __id="2634" _type="PauseCommand" date="Mon Feb 08 16:14:25 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5794736">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7987]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2633" _type="MoveCaretCommand" caretOffset="975" date="Mon Feb 08 16:14:25 EST 2021" docOffset="20917" starttimestamp="1612813070441" timestamp="5794736" />
  <Command __id="2636" _type="PauseCommand" date="Mon Feb 08 16:14:40 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="5810217">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[15481]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2635" _type="MoveCaretCommand" caretOffset="1029" date="Mon Feb 08 16:14:40 EST 2021" docOffset="20971" starttimestamp="1612813070441" timestamp="5810217" />
  <Command __id="2637" _type="SelectTextCommand" caretOffset="1037" date="Mon Feb 08 16:14:40 EST 2021" end="1037" start="1029" starttimestamp="1612813070441" timestamp="5810304" />
  <Command __id="2638" _type="MoveCaretCommand" caretOffset="1029" date="Mon Feb 08 16:14:41 EST 2021" docOffset="20971" starttimestamp="1612813070441" timestamp="5811160" />
  <Command __id="2640" _type="InsertStringCommand" date="Mon Feb 08 16:14:42 EST 2021" starttimestamp="1612813070441" timestamp="5811783" timestamp2="5811783">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2642" _type="InsertStringCommand" date="Mon Feb 08 16:14:42 EST 2021" starttimestamp="1612813070441" timestamp="5812207" timestamp2="5812207">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2644" _type="InsertStringCommand" date="Mon Feb 08 16:14:42 EST 2021" starttimestamp="1612813070441" timestamp="5812312" timestamp2="5812312">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2645" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5812346" />
  <Command __id="2647" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5812873" />
  <Command __id="2649" _type="InsertStringCommand" date="Mon Feb 08 16:14:43 EST 2021" starttimestamp="1612813070441" timestamp="5812914" timestamp2="5812914">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2651" _type="InsertStringCommand" date="Mon Feb 08 16:14:43 EST 2021" starttimestamp="1612813070441" timestamp="5813458" timestamp2="5813458">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2652" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5813554" />
  <Command __id="2655" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:44 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5813780" />
  <Command __id="2657" _type="InsertStringCommand" date="Mon Feb 08 16:14:44 EST 2021" starttimestamp="1612813070441" timestamp="5813797" timestamp2="5813797">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2658" _type="InsertStringCommand" date="Mon Feb 08 16:14:44 EST 2021" starttimestamp="1612813070441" timestamp="5813949" timestamp2="5813949">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="2660" _type="InsertStringCommand" date="Mon Feb 08 16:14:44 EST 2021" starttimestamp="1612813070441" timestamp="5814355" timestamp2="5814355">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2661" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5814441" />
  <Command __id="2664" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5814657" />
  <Command __id="2666" _type="InsertStringCommand" date="Mon Feb 08 16:14:45 EST 2021" starttimestamp="1612813070441" timestamp="5814672" timestamp2="5814672">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2667" _type="InsertStringCommand" date="Mon Feb 08 16:14:45 EST 2021" starttimestamp="1612813070441" timestamp="5815089" timestamp2="5815089">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="2669" _type="InsertStringCommand" date="Mon Feb 08 16:14:46 EST 2021" starttimestamp="1612813070441" timestamp="5815630" timestamp2="5815630">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2671" _type="InsertStringCommand" date="Mon Feb 08 16:14:46 EST 2021" starttimestamp="1612813070441" timestamp="5816105" timestamp2="5816105">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2673" _type="InsertStringCommand" date="Mon Feb 08 16:14:46 EST 2021" starttimestamp="1612813070441" timestamp="5816188" timestamp2="5816188">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2675" _type="InsertStringCommand" date="Mon Feb 08 16:14:46 EST 2021" starttimestamp="1612813070441" timestamp="5816270" timestamp2="5816270">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2676" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:46 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5816313" />
  <Command __id="2677" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5816349" />
  <Command __id="2679" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:14:47 EST 2021" starttimestamp="1612813070441" timestamp="5816916" />
  <Command __id="2681" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:14:47 EST 2021" starttimestamp="1612813070441" timestamp="5817046" />
  <Command __id="2683" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:14:47 EST 2021" starttimestamp="1612813070441" timestamp="5817164" />
  <Command __id="2685" _type="InsertStringCommand" date="Mon Feb 08 16:14:47 EST 2021" starttimestamp="1612813070441" timestamp="5817394" timestamp2="5817394">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2687" _type="InsertStringCommand" date="Mon Feb 08 16:14:47 EST 2021" starttimestamp="1612813070441" timestamp="5817443" timestamp2="5817443">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2688" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5817485" />
  <Command __id="2690" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:48 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5817617" />
  <Command __id="2692" _type="InsertStringCommand" date="Mon Feb 08 16:14:48 EST 2021" starttimestamp="1612813070441" timestamp="5817692" timestamp2="5817692">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2693" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:48 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5817795" />
  <Command __id="2694" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:48 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5817813" />
  <Command __id="2696" _type="InsertStringCommand" date="Mon Feb 08 16:14:48 EST 2021" starttimestamp="1612813070441" timestamp="5818119" timestamp2="5818119">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2697" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:48 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5818212" />
  <Command __id="2698" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:48 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5818231" />
  <Command __id="2700" _type="InsertStringCommand" date="Mon Feb 08 16:14:49 EST 2021" starttimestamp="1612813070441" timestamp="5818889" timestamp2="5818889">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2701" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5818982" />
  <Command __id="2702" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5818999" />
  <Command __id="2704" _type="InsertStringCommand" date="Mon Feb 08 16:14:49 EST 2021" starttimestamp="1612813070441" timestamp="5819240" timestamp2="5819240">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2706" _type="InsertStringCommand" date="Mon Feb 08 16:14:49 EST 2021" starttimestamp="1612813070441" timestamp="5819254" timestamp2="5819254">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2708" _type="InsertStringCommand" date="Mon Feb 08 16:14:49 EST 2021" starttimestamp="1612813070441" timestamp="5819426" timestamp2="5819426">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2710" _type="InsertStringCommand" date="Mon Feb 08 16:14:50 EST 2021" starttimestamp="1612813070441" timestamp="5819701" timestamp2="5819701">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2712" _type="InsertStringCommand" date="Mon Feb 08 16:14:50 EST 2021" starttimestamp="1612813070441" timestamp="5819781" timestamp2="5819781">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2714" _type="InsertStringCommand" date="Mon Feb 08 16:14:50 EST 2021" starttimestamp="1612813070441" timestamp="5819841" timestamp2="5819841">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="2715" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:50 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5819934" />
  <Command __id="2717" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:50 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5820140" />
  <Command __id="2719" _type="InsertStringCommand" date="Mon Feb 08 16:14:50 EST 2021" starttimestamp="1612813070441" timestamp="5820266" timestamp2="5820266">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2721" _type="InsertStringCommand" date="Mon Feb 08 16:14:50 EST 2021" starttimestamp="1612813070441" timestamp="5820313" timestamp2="5820313">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2722" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:14:50 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5820356" />
  <Command __id="2725" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5820763" />
  <Command __id="2728" _type="InsertStringCommand" date="Mon Feb 08 16:14:51 EST 2021" starttimestamp="1612813070441" timestamp="5820802" timestamp2="5820802">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2730" _type="InsertStringCommand" date="Mon Feb 08 16:14:51 EST 2021" starttimestamp="1612813070441" timestamp="5821238" timestamp2="5821238">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2732" _type="PauseCommand" date="Mon Feb 08 16:14:52 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5822469">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1231]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2731" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:14:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5822469" />
  <Command __id="2734" _type="PauseCommand" date="Mon Feb 08 16:14:56 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5826298">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3829]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2733" _type="MoveCaretCommand" caretOffset="1425" date="Mon Feb 08 16:14:56 EST 2021" docOffset="21367" starttimestamp="1612813070441" timestamp="5826298" />
  <Command __id="2735" _type="MoveCaretCommand" caretOffset="1495" date="Mon Feb 08 16:14:57 EST 2021" docOffset="21437" starttimestamp="1612813070441" timestamp="5826646" />
  <Command __id="2737" _type="InsertStringCommand" date="Mon Feb 08 16:14:57 EST 2021" starttimestamp="1612813070441" timestamp="5827415" timestamp2="5827415">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2574" _type="Delete" date="Mon Feb 08 16:13:07 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27535" docExpressionCount="3268" docLength="29294" endLine="799" length="1" offset="27917" startLine="799" starttimestamp="1612813070441" timestamp="5716935">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2576" _type="Insert" date="Mon Feb 08 16:13:07 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27536" docExpressionCount="3268" docLength="29295" length="1" offset="27917" starttimestamp="1612813070441" timestamp="5717125">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2578" _type="Delete" date="Mon Feb 08 16:13:08 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27535" docExpressionCount="3268" docLength="29294" endLine="799" length="1" offset="27917" startLine="799" starttimestamp="1612813070441" timestamp="5717661">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="2580" _type="Insert" date="Mon Feb 08 16:13:08 EST 2021" docASTNodeCount="4768" docActiveCodeLength="27543" docExpressionCount="3268" docLength="29302" length="8" offset="27917" repeat="8" starttimestamp="1612813070441" timestamp="5717927" timestamp2="5719099">
    <text><![CDATA[OfSearch]]></text>
  </DocumentChange>
  <DocumentChange __id="2604" _type="Insert" date="Mon Feb 08 16:13:52 EST 2021" docASTNodeCount="4769" docActiveCodeLength="27552" docExpressionCount="3269" docLength="29311" length="9" offset="20847" repeat="9" starttimestamp="1612813070441" timestamp="5762365" timestamp2="5764578">
    <text><![CDATA["title", ]]></text>
  </DocumentChange>
  <DocumentChange __id="2624" _type="Delete" date="Mon Feb 08 16:13:57 EST 2021" docASTNodeCount="4769" docActiveCodeLength="27551" docExpressionCount="3269" docLength="29310" endLine="589" length="1" offset="20848" startLine="589" starttimestamp="1612813070441" timestamp="5766876">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2626" _type="Insert" date="Mon Feb 08 16:13:57 EST 2021" docASTNodeCount="4769" docActiveCodeLength="27552" docExpressionCount="3269" docLength="29311" length="1" offset="20848" starttimestamp="1612813070441" timestamp="5767027">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="2639" _type="Insert" date="Mon Feb 08 16:14:42 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27560" docExpressionCount="3205" docLength="29319" length="8" offset="20971" repeat="4" starttimestamp="1612813070441" timestamp="5811775" timestamp2="5812495">
    <text><![CDATA[
			map]]></text>
  </DocumentChange>
  <DocumentChange __id="2648" _type="Replace" date="Mon Feb 08 16:14:43 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27566" docExpressionCount="3205" docLength="29325" endLine="593" insertionLength="9" int_docASTNodeCount="4769" int_docActiveCodeLength="27557" int_docExpressionCount="3269" int_docLength="29316" length="3" offset="20976" startLine="593" starttimestamp="1612813070441" timestamp="5812880">
    <deletedText><![CDATA[map]]></deletedText>
    <insertedText><![CDATA[Map<K, V>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2650" _type="Replace" date="Mon Feb 08 16:14:43 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27566" docExpressionCount="3205" docLength="29325" endLine="593" insertionLength="1" int_docASTNodeCount="4676" int_docActiveCodeLength="27565" int_docExpressionCount="3205" int_docLength="29324" length="1" offset="20980" startLine="593" starttimestamp="1612813070441" timestamp="5813453">
    <deletedText><![CDATA[K]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2653" _type="Insert" date="Mon Feb 08 16:14:44 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27568" docExpressionCount="3205" docLength="29327" length="2" offset="20981" repeat="2" starttimestamp="1612813070441" timestamp="5813752" timestamp2="5813768">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="2656" _type="Replace" date="Mon Feb 08 16:14:44 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27571" docExpressionCount="3205" docLength="29330" endLine="593" insertionLength="6" int_docASTNodeCount="4676" int_docActiveCodeLength="27565" int_docExpressionCount="3205" int_docLength="29324" length="3" offset="20980" startLine="593" starttimestamp="1612813070441" timestamp="5813788">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2659" _type="Replace" date="Mon Feb 08 16:14:44 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27571" docExpressionCount="3205" docLength="29330" endLine="593" insertionLength="1" int_docASTNodeCount="4674" int_docActiveCodeLength="27570" int_docExpressionCount="3204" int_docLength="29329" length="1" offset="20988" startLine="593" starttimestamp="1612813070441" timestamp="5814346">
    <deletedText><![CDATA[V]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2662" _type="Insert" date="Mon Feb 08 16:14:45 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27573" docExpressionCount="3205" docLength="29332" length="2" offset="20989" repeat="2" starttimestamp="1612813070441" timestamp="5814627" timestamp2="5814644">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="2665" _type="Replace" date="Mon Feb 08 16:14:45 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27576" docExpressionCount="3205" docLength="29335" endLine="593" insertionLength="6" int_docASTNodeCount="4674" int_docActiveCodeLength="27570" int_docExpressionCount="3204" int_docLength="29329" length="3" offset="20988" startLine="593" starttimestamp="1612813070441" timestamp="5814664">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2668" _type="Insert" date="Mon Feb 08 16:14:46 EST 2021" docASTNodeCount="4684" docActiveCodeLength="27580" docExpressionCount="3208" docLength="29339" length="4" offset="20995" repeat="4" starttimestamp="1612813070441" timestamp="5815622" timestamp2="5816266">
    <text><![CDATA[ url]]></text>
  </DocumentChange>
  <DocumentChange __id="2678" _type="Delete" date="Mon Feb 08 16:14:47 EST 2021" docASTNodeCount="4676" docActiveCodeLength="27577" docExpressionCount="3205" docLength="29336" endLine="593" length="3" offset="20996" repeat="3" startLine="593" starttimestamp="1612813070441" timestamp="5816914" timestamp2="5817161">
    <text><![CDATA[url]]></text>
  </DocumentChange>
  <DocumentChange __id="2684" _type="Insert" date="Mon Feb 08 16:14:47 EST 2021" docASTNodeCount="4687" docActiveCodeLength="27594" docExpressionCount="3210" docLength="29353" length="17" offset="20996" repeat="17" starttimestamp="1612813070441" timestamp="5817390" timestamp2="5820662">
    <text><![CDATA[titles = new hash]]></text>
  </DocumentChange>
  <DocumentChange __id="2726" _type="Replace" date="Mon Feb 08 16:14:51 EST 2021" docASTNodeCount="4600" docActiveCodeLength="27601" docExpressionCount="3156" docLength="29360" endLine="593" insertionLength="9" int_docASTNodeCount="4687" int_docActiveCodeLength="27592" int_docExpressionCount="3210" int_docLength="29351" length="2" offset="21009" startLine="593" starttimestamp="1612813070441" timestamp="5820782">
    <deletedText><![CDATA[ha]]></deletedText>
    <insertedText><![CDATA[HashMap<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2727" _type="Replace" date="Mon Feb 08 16:14:51 EST 2021" docASTNodeCount="4688" docActiveCodeLength="27601" docExpressionCount="3210" docLength="29360" endLine="593" insertionLength="2" int_docASTNodeCount="4688" int_docActiveCodeLength="27599" int_docExpressionCount="3210" int_docLength="29358" length="2" offset="21018" startLine="593" starttimestamp="1612813070441" timestamp="5820793">
    <deletedText><![CDATA[sh]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2729" _type="Insert" date="Mon Feb 08 16:14:51 EST 2021" docASTNodeCount="4783" docActiveCodeLength="27602" docExpressionCount="3275" docLength="29361" length="1" offset="21020" starttimestamp="1612813070441" timestamp="5821231">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2736" _type="Insert" date="Mon Feb 08 16:14:57 EST 2021" docASTNodeCount="4783" docActiveCodeLength="27611" docExpressionCount="3275" docLength="29370" length="9" offset="21437" starttimestamp="1612813070441" timestamp="5827405">
    <text><![CDATA[
							]]></text>
  </DocumentChange>
  <DocumentChange __id="2738" _type="Insert" date="Mon Feb 08 16:15:02 EST 2021" docASTNodeCount="4690" docActiveCodeLength="27614" docExpressionCount="3211" docLength="29373" length="3" offset="21446" repeat="3" starttimestamp="1612813070441" timestamp="5831977" timestamp2="5832248">
    <text><![CDATA[url]]></text>
  </DocumentChange>
  <DocumentChange __id="2744" _type="Delete" date="Mon Feb 08 16:15:03 EST 2021" docASTNodeCount="4783" docActiveCodeLength="27611" docExpressionCount="3275" docLength="29370" endLine="601" length="3" offset="21446" repeat="3" startLine="601" starttimestamp="1612813070441" timestamp="5832993" timestamp2="5833257">
    <text><![CDATA[url]]></text>
  </DocumentChange>
  <Command __id="2739" _type="PauseCommand" date="Mon Feb 08 16:15:02 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5831977">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4562]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2740" _type="InsertStringCommand" date="Mon Feb 08 16:15:02 EST 2021" starttimestamp="1612813070441" timestamp="5831983" timestamp2="5831983">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5832025" />
  <Command __id="2753" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5834625" />
  <Command __id="2755" _type="InsertStringCommand" date="Mon Feb 08 16:15:05 EST 2021" starttimestamp="1612813070441" timestamp="5834639" timestamp2="5834639">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2757" _type="InsertStringCommand" date="Mon Feb 08 16:15:05 EST 2021" starttimestamp="1612813070441" timestamp="5834863" timestamp2="5834863">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2758" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:05 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5834906" />
  <Command __id="2761" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5835483" />
  <Command __id="2763" _type="InsertStringCommand" date="Mon Feb 08 16:15:06 EST 2021" starttimestamp="1612813070441" timestamp="5835632" timestamp2="5835632">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2765" _type="PauseCommand" date="Mon Feb 08 16:15:08 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5837720">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2088]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2766" _type="InsertStringCommand" date="Mon Feb 08 16:15:08 EST 2021" starttimestamp="1612813070441" timestamp="5837726" timestamp2="5837726">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2767" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:08 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5837813" />
  <Command __id="2771" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:08 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5838293" />
  <Command __id="2773" _type="InsertStringCommand" date="Mon Feb 08 16:15:08 EST 2021" starttimestamp="1612813070441" timestamp="5838310" timestamp2="5838310">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2775" _type="InsertStringCommand" date="Mon Feb 08 16:15:08 EST 2021" starttimestamp="1612813070441" timestamp="5838525" timestamp2="5838525">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2776" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:09 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5838618" />
  <Command __id="2782" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:09 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5839466" />
  <Command __id="2784" _type="InsertStringCommand" date="Mon Feb 08 16:15:09 EST 2021" starttimestamp="1612813070441" timestamp="5839484" timestamp2="5839484">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2786" _type="InsertStringCommand" date="Mon Feb 08 16:15:10 EST 2021" starttimestamp="1612813070441" timestamp="5839803" timestamp2="5839803">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2787" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:10 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5839893" />
  <Command __id="2791" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5840769" />
  <Command __id="2793" _type="InsertStringCommand" date="Mon Feb 08 16:15:11 EST 2021" starttimestamp="1612813070441" timestamp="5840903" timestamp2="5840903">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2795" _type="InsertStringCommand" date="Mon Feb 08 16:15:11 EST 2021" starttimestamp="1612813070441" timestamp="5841178" timestamp2="5841178">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2797" _type="InsertStringCommand" date="Mon Feb 08 16:15:12 EST 2021" starttimestamp="1612813070441" timestamp="5842015" timestamp2="5842015">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="2799" _type="InsertStringCommand" date="Mon Feb 08 16:15:12 EST 2021" starttimestamp="1612813070441" timestamp="5842152" timestamp2="5842152">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="2801" _type="InsertStringCommand" date="Mon Feb 08 16:15:12 EST 2021" starttimestamp="1612813070441" timestamp="5842255" timestamp2="5842255">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2803" _type="PauseCommand" date="Mon Feb 08 16:15:13 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5843471">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1216]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2804" _type="InsertStringCommand" date="Mon Feb 08 16:15:13 EST 2021" starttimestamp="1612813070441" timestamp="5843482" timestamp2="5843482">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2805" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:15:14 EST 2021" starttimestamp="1612813070441" timestamp="5844012" />
  <Command __id="2806" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:15:15 EST 2021" starttimestamp="1612813070441" timestamp="5844811" />
  <Command __id="2807" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:15:15 EST 2021" starttimestamp="1612813070441" timestamp="5845000" />
  <Command __id="2808" _type="InsertStringCommand" date="Mon Feb 08 16:15:16 EST 2021" starttimestamp="1612813070441" timestamp="5845578" timestamp2="5845578">
    <data><![CDATA[	]]></data>
  </Command>
  <DocumentChange __id="2747" _type="Insert" date="Mon Feb 08 16:15:03 EST 2021" docASTNodeCount="4690" docActiveCodeLength="27614" docExpressionCount="3211" docLength="29373" length="3" offset="21446" repeat="3" starttimestamp="1612813070441" timestamp="5833422" timestamp2="5833643">
    <text><![CDATA[tie]]></text>
  </DocumentChange>
  <DocumentChange __id="2750" _type="Delete" date="Mon Feb 08 16:15:04 EST 2021" docASTNodeCount="4690" docActiveCodeLength="27613" docExpressionCount="3211" docLength="29372" endLine="601" length="1" offset="21448" startLine="601" starttimestamp="1612813070441" timestamp="5834133">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2751" _type="Insert" date="Mon Feb 08 16:15:04 EST 2021" docASTNodeCount="4690" docActiveCodeLength="27615" docExpressionCount="3211" docLength="29374" length="2" offset="21448" repeat="2" starttimestamp="1612813070441" timestamp="5834342" timestamp2="5834394">
    <text><![CDATA[le]]></text>
  </DocumentChange>
  <DocumentChange __id="2754" _type="Replace" date="Mon Feb 08 16:15:05 EST 2021" docASTNodeCount="4690" docActiveCodeLength="27617" docExpressionCount="3211" docLength="29376" endLine="601" insertionLength="6" int_docASTNodeCount="4783" int_docActiveCodeLength="27611" int_docExpressionCount="3275" int_docLength="29370" length="4" offset="21446" startLine="601" starttimestamp="1612813070441" timestamp="5834631">
    <deletedText><![CDATA[tile]]></deletedText>
    <insertedText><![CDATA[titles]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2756" _type="Insert" date="Mon Feb 08 16:15:05 EST 2021" docASTNodeCount="4692" docActiveCodeLength="27620" docExpressionCount="3213" docLength="29379" length="3" offset="21452" repeat="3" starttimestamp="1612813070441" timestamp="5834859" timestamp2="5835286">
    <text><![CDATA[.pu]]></text>
  </DocumentChange>
  <DocumentChange __id="2762" _type="Replace" date="Mon Feb 08 16:15:05 EST 2021" docASTNodeCount="4694" docActiveCodeLength="27633" docExpressionCount="3215" docLength="29392" endLine="601" insertionLength="15" int_docASTNodeCount="4688" int_docActiveCodeLength="27618" int_docExpressionCount="3210" int_docLength="29377" length="2" offset="21453" startLine="601" starttimestamp="1612813070441" timestamp="5835498">
    <deletedText><![CDATA[pu]]></deletedText>
    <insertedText><![CDATA[put(key, value)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2764" _type="Replace" date="Mon Feb 08 16:15:08 EST 2021" docASTNodeCount="4694" docActiveCodeLength="27631" docExpressionCount="3215" docLength="29390" endLine="601" insertionLength="1" int_docASTNodeCount="4693" int_docActiveCodeLength="27630" int_docExpressionCount="3214" int_docLength="29389" length="3" offset="21457" startLine="601" starttimestamp="1612813070441" timestamp="5837720">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2768" _type="Insert" date="Mon Feb 08 16:15:08 EST 2021" docASTNodeCount="4694" docActiveCodeLength="27634" docExpressionCount="3215" docLength="29393" length="3" offset="21458" repeat="3" starttimestamp="1612813070441" timestamp="5838015" timestamp2="5838130">
    <text><![CDATA[omm]]></text>
  </DocumentChange>
  <DocumentChange __id="2772" _type="Replace" date="Mon Feb 08 16:15:08 EST 2021" docASTNodeCount="4694" docActiveCodeLength="27637" docExpressionCount="3215" docLength="29396" endLine="601" insertionLength="7" int_docASTNodeCount="4693" int_docActiveCodeLength="27630" int_docExpressionCount="3214" int_docLength="29389" length="4" offset="21457" startLine="601" starttimestamp="1612813070441" timestamp="5838301">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2774" _type="Insert" date="Mon Feb 08 16:15:08 EST 2021" docASTNodeCount="4696" docActiveCodeLength="27643" docExpressionCount="3217" docLength="29402" length="6" offset="21464" repeat="6" starttimestamp="1612813070441" timestamp="5838522" timestamp2="5839251">
    <text><![CDATA[.getda]]></text>
  </DocumentChange>
  <DocumentChange __id="2783" _type="Replace" date="Mon Feb 08 16:15:09 EST 2021" docASTNodeCount="4696" docActiveCodeLength="27650" docExpressionCount="3217" docLength="29409" endLine="601" insertionLength="12" int_docASTNodeCount="4695" int_docActiveCodeLength="27638" int_docExpressionCount="3216" int_docLength="29397" length="5" offset="21465" startLine="601" starttimestamp="1612813070441" timestamp="5839474">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2785" _type="Insert" date="Mon Feb 08 16:15:10 EST 2021" docASTNodeCount="4698" docActiveCodeLength="27654" docExpressionCount="3219" docLength="29413" length="4" offset="21477" repeat="4" starttimestamp="1612813070441" timestamp="5839800" timestamp2="5840289">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2792" _type="Replace" date="Mon Feb 08 16:15:11 EST 2021" docASTNodeCount="4699" docActiveCodeLength="27659" docExpressionCount="3220" docLength="29418" endLine="601" insertionLength="8" int_docASTNodeCount="4697" int_docActiveCodeLength="27651" int_docExpressionCount="3218" int_docLength="29410" length="3" offset="21478" startLine="601" starttimestamp="1612813070441" timestamp="5840776">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2794" _type="Replace" date="Mon Feb 08 16:15:11 EST 2021" docASTNodeCount="4510" docActiveCodeLength="27657" docExpressionCount="3104" docLength="29416" endLine="601" insertionLength="1" int_docASTNodeCount="4698" int_docActiveCodeLength="27656" int_docExpressionCount="3219" int_docLength="29415" length="3" offset="21482" startLine="601" starttimestamp="1612813070441" timestamp="5841167">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2796" _type="Insert" date="Mon Feb 08 16:15:12 EST 2021" docASTNodeCount="4699" docActiveCodeLength="27661" docExpressionCount="3220" docLength="29420" length="4" offset="21483" repeat="4" starttimestamp="1612813070441" timestamp="5842014" timestamp2="5843471">
    <text><![CDATA[URL"]]></text>
  </DocumentChange>
  <DocumentChange __id="2809" _type="Replace" date="Mon Feb 08 16:15:18 EST 2021" docASTNodeCount="4699" docActiveCodeLength="27657" docExpressionCount="3220" docLength="29416" endLine="601" insertionLength="1" int_docASTNodeCount="4688" int_docActiveCodeLength="27656" int_docExpressionCount="3210" int_docLength="29415" length="5" offset="21490" startLine="601" starttimestamp="1612813070441" timestamp="5847948">
    <deletedText><![CDATA[value]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2813" _type="Insert" date="Mon Feb 08 16:15:18 EST 2021" docASTNodeCount="4699" docActiveCodeLength="27660" docExpressionCount="3220" docLength="29419" length="3" offset="21491" repeat="3" starttimestamp="1612813070441" timestamp="5848235" timestamp2="5848390">
    <text><![CDATA[omm]]></text>
  </DocumentChange>
  <DocumentChange __id="2817" _type="Replace" date="Mon Feb 08 16:15:18 EST 2021" docASTNodeCount="4699" docActiveCodeLength="27663" docExpressionCount="3220" docLength="29422" endLine="601" insertionLength="7" int_docASTNodeCount="4688" int_docActiveCodeLength="27656" int_docExpressionCount="3210" int_docLength="29415" length="4" offset="21490" startLine="601" starttimestamp="1612813070441" timestamp="5848552">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2819" _type="Insert" date="Mon Feb 08 16:15:19 EST 2021" docASTNodeCount="4701" docActiveCodeLength="27669" docExpressionCount="3222" docLength="29428" length="6" offset="21497" repeat="6" starttimestamp="1612813070441" timestamp="5848790" timestamp2="5849508">
    <text><![CDATA[.getda]]></text>
  </DocumentChange>
  <DocumentChange __id="2828" _type="Replace" date="Mon Feb 08 16:15:20 EST 2021" docASTNodeCount="4701" docActiveCodeLength="27676" docExpressionCount="3222" docLength="29435" endLine="601" insertionLength="12" int_docASTNodeCount="4665" int_docActiveCodeLength="27664" int_docExpressionCount="3209" int_docLength="29423" length="5" offset="21498" startLine="601" starttimestamp="1612813070441" timestamp="5849747">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2830" _type="Insert" date="Mon Feb 08 16:15:20 EST 2021" docASTNodeCount="4703" docActiveCodeLength="27680" docExpressionCount="3224" docLength="29439" length="4" offset="21510" repeat="4" starttimestamp="1612813070441" timestamp="5849994" timestamp2="5850454">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2837" _type="Replace" date="Mon Feb 08 16:15:21 EST 2021" docASTNodeCount="4704" docActiveCodeLength="27685" docExpressionCount="3225" docLength="29444" endLine="601" insertionLength="8" int_docASTNodeCount="4667" int_docActiveCodeLength="27677" int_docExpressionCount="3211" int_docLength="29436" length="3" offset="21511" startLine="601" starttimestamp="1612813070441" timestamp="5850754">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2839" _type="Replace" date="Mon Feb 08 16:15:21 EST 2021" docASTNodeCount="4510" docActiveCodeLength="27683" docExpressionCount="3104" docLength="29442" endLine="601" insertionLength="1" int_docASTNodeCount="4703" int_docActiveCodeLength="27682" int_docExpressionCount="3224" int_docLength="29441" length="3" offset="21515" startLine="601" starttimestamp="1612813070441" timestamp="5851282">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2841" _type="Insert" date="Mon Feb 08 16:15:22 EST 2021" docASTNodeCount="4704" docActiveCodeLength="27691" docExpressionCount="3225" docLength="29450" length="8" offset="21516" repeat="8" starttimestamp="1612813070441" timestamp="5851673" timestamp2="5852839">
    <text><![CDATA[keyword"]]></text>
  </DocumentChange>
  <Command __id="2810" _type="PauseCommand" date="Mon Feb 08 16:15:18 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5847948">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2370]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2811" _type="InsertStringCommand" date="Mon Feb 08 16:15:18 EST 2021" starttimestamp="1612813070441" timestamp="5847956" timestamp2="5847956">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2812" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5848042" />
  <Command __id="2816" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5848544" />
  <Command __id="2818" _type="InsertStringCommand" date="Mon Feb 08 16:15:19 EST 2021" starttimestamp="1612813070441" timestamp="5848560" timestamp2="5848560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2820" _type="InsertStringCommand" date="Mon Feb 08 16:15:19 EST 2021" starttimestamp="1612813070441" timestamp="5848792" timestamp2="5848792">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2821" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5848884" />
  <Command __id="2827" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5849739" />
  <Command __id="2829" _type="InsertStringCommand" date="Mon Feb 08 16:15:20 EST 2021" starttimestamp="1612813070441" timestamp="5849755" timestamp2="5849755">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2831" _type="InsertStringCommand" date="Mon Feb 08 16:15:20 EST 2021" starttimestamp="1612813070441" timestamp="5849997" timestamp2="5849997">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2832" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5850089" />
  <Command __id="2836" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5850746" />
  <Command __id="2838" _type="InsertStringCommand" date="Mon Feb 08 16:15:21 EST 2021" starttimestamp="1612813070441" timestamp="5850872" timestamp2="5850872">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2840" _type="InsertStringCommand" date="Mon Feb 08 16:15:21 EST 2021" starttimestamp="1612813070441" timestamp="5851294" timestamp2="5851294">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2842" _type="InsertStringCommand" date="Mon Feb 08 16:15:22 EST 2021" starttimestamp="1612813070441" timestamp="5851675" timestamp2="5851675">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2844" _type="InsertStringCommand" date="Mon Feb 08 16:15:22 EST 2021" starttimestamp="1612813070441" timestamp="5851719" timestamp2="5851719">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2846" _type="InsertStringCommand" date="Mon Feb 08 16:15:22 EST 2021" starttimestamp="1612813070441" timestamp="5851896" timestamp2="5851896">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2848" _type="InsertStringCommand" date="Mon Feb 08 16:15:22 EST 2021" starttimestamp="1612813070441" timestamp="5852166" timestamp2="5852166">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="2850" _type="InsertStringCommand" date="Mon Feb 08 16:15:22 EST 2021" starttimestamp="1612813070441" timestamp="5852258" timestamp2="5852258">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2852" _type="InsertStringCommand" date="Mon Feb 08 16:15:22 EST 2021" starttimestamp="1612813070441" timestamp="5852345" timestamp2="5852345">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2854" _type="InsertStringCommand" date="Mon Feb 08 16:15:22 EST 2021" starttimestamp="1612813070441" timestamp="5852484" timestamp2="5852484">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2856" _type="InsertStringCommand" date="Mon Feb 08 16:15:23 EST 2021" starttimestamp="1612813070441" timestamp="5852849" timestamp2="5852849">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2857" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:15:24 EST 2021" starttimestamp="1612813070441" timestamp="5853769" />
  <Command __id="2859" _type="InsertStringCommand" date="Mon Feb 08 16:15:24 EST 2021" starttimestamp="1612813070441" timestamp="5854360" timestamp2="5854360">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2861" _type="PauseCommand" date="Mon Feb 08 16:15:31 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5861410">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[7050]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2860" _type="MoveCaretCommand" caretOffset="2081" date="Mon Feb 08 16:15:31 EST 2021" docOffset="22023" starttimestamp="1612813070441" timestamp="5861410" />
  <Command __id="2863" _type="PauseCommand" date="Mon Feb 08 16:15:33 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5863005">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1595]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2862" _type="MoveCaretCommand" caretOffset="2082" date="Mon Feb 08 16:15:33 EST 2021" docOffset="22024" starttimestamp="1612813070441" timestamp="5863005" />
  <Command __id="2865" _type="PauseCommand" date="Mon Feb 08 16:15:35 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5865254">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2249]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2864" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:35 EST 2021" starttimestamp="1612813070441" timestamp="5865254" />
  <Command __id="2866" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:35 EST 2021" starttimestamp="1612813070441" timestamp="5865396" />
  <Command __id="2867" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:35 EST 2021" starttimestamp="1612813070441" timestamp="5865541" />
  <Command __id="2868" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:36 EST 2021" starttimestamp="1612813070441" timestamp="5865695" />
  <Command __id="2869" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:36 EST 2021" starttimestamp="1612813070441" timestamp="5865853" />
  <Command __id="2870" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:36 EST 2021" starttimestamp="1612813070441" timestamp="5866017" />
  <Command __id="2871" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:36 EST 2021" starttimestamp="1612813070441" timestamp="5866197" />
  <Command __id="2872" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:36 EST 2021" starttimestamp="1612813070441" timestamp="5866403" />
  <Command __id="2873" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:15:37 EST 2021" starttimestamp="1612813070441" timestamp="5866788" />
  <Command __id="2875" _type="InsertStringCommand" date="Mon Feb 08 16:15:37 EST 2021" starttimestamp="1612813070441" timestamp="5867447" timestamp2="5867447">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2876" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5867486" />
  <Command __id="2881" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:38 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5868388" />
  <Command __id="2883" _type="InsertStringCommand" date="Mon Feb 08 16:15:38 EST 2021" starttimestamp="1612813070441" timestamp="5868403" timestamp2="5868403">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2885" _type="PauseCommand" date="Mon Feb 08 16:15:40 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5870513">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2110]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2886" _type="InsertStringCommand" date="Mon Feb 08 16:15:40 EST 2021" starttimestamp="1612813070441" timestamp="5870519" timestamp2="5870519">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2887" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:41 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5870561" />
  <Command __id="2891" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:41 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5871244" />
  <Command __id="2893" _type="InsertStringCommand" date="Mon Feb 08 16:15:41 EST 2021" starttimestamp="1612813070441" timestamp="5871387" timestamp2="5871387">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2895" _type="InsertStringCommand" date="Mon Feb 08 16:15:42 EST 2021" starttimestamp="1612813070441" timestamp="5872023" timestamp2="5872023">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2896" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:15:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="5872108" />
  <Command __id="2897" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:15:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="5872693" />
  <Command __id="2898" _type="InsertStringCommand" date="Mon Feb 08 16:15:43 EST 2021" starttimestamp="1612813070441" timestamp="5872698" timestamp2="5872698">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:15:43 EST 2021" starttimestamp="1612813070441" timestamp="5873266" />
  <Command __id="2901" _type="InsertStringCommand" date="Mon Feb 08 16:15:44 EST 2021" starttimestamp="1612813070441" timestamp="5873850" timestamp2="5873850">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2903" _type="InsertStringCommand" date="Mon Feb 08 16:15:44 EST 2021" starttimestamp="1612813070441" timestamp="5873886" timestamp2="5873886">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2905" _type="PauseCommand" date="Mon Feb 08 16:15:45 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5875498">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1612]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2904" _type="MoveCaretCommand" caretOffset="2139" date="Mon Feb 08 16:15:45 EST 2021" docOffset="22081" starttimestamp="1612813070441" timestamp="5875498" />
  <Command __id="2907" _type="PauseCommand" date="Mon Feb 08 16:15:47 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5877046">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1548]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2906" _type="MoveCaretCommand" caretOffset="2016" date="Mon Feb 08 16:15:47 EST 2021" docOffset="21958" starttimestamp="1612813070441" timestamp="5877046" />
  <Command __id="2909" _type="PauseCommand" date="Mon Feb 08 16:15:52 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5881948">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4902]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2908" _type="MoveCaretCommand" caretOffset="2031" date="Mon Feb 08 16:15:52 EST 2021" docOffset="21973" starttimestamp="1612813070441" timestamp="5881948" />
  <Command __id="2910" _type="MoveCaretCommand" caretOffset="2067" date="Mon Feb 08 16:15:53 EST 2021" docOffset="22009" starttimestamp="1612813070441" timestamp="5882735" />
  <Command __id="2911" _type="MoveCaretCommand" caretOffset="2031" date="Mon Feb 08 16:15:53 EST 2021" docOffset="21973" starttimestamp="1612813070441" timestamp="5883031" />
  <Command __id="2912" _type="MoveCaretCommand" caretOffset="2139" date="Mon Feb 08 16:15:53 EST 2021" docOffset="22081" starttimestamp="1612813070441" timestamp="5883390" />
  <Command __id="2913" _type="MoveCaretCommand" caretOffset="2073" date="Mon Feb 08 16:15:54 EST 2021" docOffset="22015" starttimestamp="1612813070441" timestamp="5883770" />
  <Command __id="2914" _type="MoveCaretCommand" caretOffset="2139" date="Mon Feb 08 16:15:54 EST 2021" docOffset="22081" starttimestamp="1612813070441" timestamp="5884333" />
  <Command __id="2916" _type="PauseCommand" date="Mon Feb 08 16:16:22 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="5912130">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[27797]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2915" _type="MoveCaretCommand" caretOffset="4304" date="Mon Feb 08 16:16:22 EST 2021" docOffset="28123" starttimestamp="1612813070441" timestamp="5912130" />
  <Command __id="2917" _type="MoveCaretCommand" caretOffset="4295" date="Mon Feb 08 16:16:22 EST 2021" docOffset="28114" starttimestamp="1612813070441" timestamp="5912527" />
  <Command __id="2919" _type="PauseCommand" date="Mon Feb 08 16:16:40 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="5929963">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[17436]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2918" _type="SelectTextCommand" caretOffset="4279" date="Mon Feb 08 16:16:40 EST 2021" end="5638" start="4279" starttimestamp="1612813070441" timestamp="5929963" />
  <Command __id="2920" _type="MoveCaretCommand" caretOffset="4304" date="Mon Feb 08 16:16:40 EST 2021" docOffset="28123" starttimestamp="1612813070441" timestamp="5930259" />
  <Command __id="2922" _type="PauseCommand" date="Mon Feb 08 16:16:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5931393">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1134]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2921" _type="MoveCaretCommand" caretOffset="4175" date="Mon Feb 08 16:16:41 EST 2021" docOffset="27994" starttimestamp="1612813070441" timestamp="5931393" />
  <Command __id="2924" _type="PauseCommand" date="Mon Feb 08 16:16:44 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5934155">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2762]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2923" _type="MoveCaretCommand" caretOffset="4295" date="Mon Feb 08 16:16:44 EST 2021" docOffset="28114" starttimestamp="1612813070441" timestamp="5934155" />
  <Command __id="2926" _type="PauseCommand" date="Mon Feb 08 16:16:50 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5940223">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6068]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2925" _type="MoveCaretCommand" caretOffset="881" date="Mon Feb 08 16:16:50 EST 2021" docOffset="20823" starttimestamp="1612813070441" timestamp="5940223" />
  <Command __id="2927" _type="MoveCaretCommand" caretOffset="947" date="Mon Feb 08 16:16:51 EST 2021" docOffset="20889" starttimestamp="1612813070441" timestamp="5940620" />
  <Command __id="2929" _type="PauseCommand" date="Mon Feb 08 16:16:59 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="5948806">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8186]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2930" _type="InsertStringCommand" date="Mon Feb 08 16:16:59 EST 2021" starttimestamp="1612813070441" timestamp="5948812" timestamp2="5948812">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2932" _type="InsertStringCommand" date="Mon Feb 08 16:16:59 EST 2021" starttimestamp="1612813070441" timestamp="5948840" timestamp2="5948840">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2934" _type="InsertStringCommand" date="Mon Feb 08 16:17:00 EST 2021" starttimestamp="1612813070441" timestamp="5949808" timestamp2="5949808">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2936" _type="InsertStringCommand" date="Mon Feb 08 16:17:01 EST 2021" starttimestamp="1612813070441" timestamp="5950573" timestamp2="5950573">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2938" _type="InsertStringCommand" date="Mon Feb 08 16:17:01 EST 2021" starttimestamp="1612813070441" timestamp="5950775" timestamp2="5950775">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2940" _type="InsertStringCommand" date="Mon Feb 08 16:17:01 EST 2021" starttimestamp="1612813070441" timestamp="5950841" timestamp2="5950841">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2942" _type="InsertStringCommand" date="Mon Feb 08 16:17:01 EST 2021" starttimestamp="1612813070441" timestamp="5950952" timestamp2="5950952">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2944" _type="PauseCommand" date="Mon Feb 08 16:17:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5952808">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1856]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2945" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5952811" timestamp2="5952811">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2947" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5953033" timestamp2="5953033">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2949" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5953102" timestamp2="5953102">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2951" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5953149" timestamp2="5953149">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2953" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5953312" timestamp2="5953312">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2955" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5953337" timestamp2="5953337">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2957" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5953409" timestamp2="5953409">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2959" _type="InsertStringCommand" date="Mon Feb 08 16:17:03 EST 2021" starttimestamp="1612813070441" timestamp="5953454" timestamp2="5953454">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2961" _type="PauseCommand" date="Mon Feb 08 16:17:05 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5954629">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1175]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2962" _type="InsertStringCommand" date="Mon Feb 08 16:17:05 EST 2021" starttimestamp="1612813070441" timestamp="5954631" timestamp2="5954631">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2964" _type="InsertStringCommand" date="Mon Feb 08 16:17:05 EST 2021" starttimestamp="1612813070441" timestamp="5955102" timestamp2="5955102">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2966" _type="InsertStringCommand" date="Mon Feb 08 16:17:05 EST 2021" starttimestamp="1612813070441" timestamp="5955219" timestamp2="5955219">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2968" _type="InsertStringCommand" date="Mon Feb 08 16:17:05 EST 2021" starttimestamp="1612813070441" timestamp="5955253" timestamp2="5955253">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2970" _type="InsertStringCommand" date="Mon Feb 08 16:17:05 EST 2021" starttimestamp="1612813070441" timestamp="5955484" timestamp2="5955484">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2972" _type="InsertStringCommand" date="Mon Feb 08 16:17:06 EST 2021" starttimestamp="1612813070441" timestamp="5955566" timestamp2="5955566">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2974" _type="PauseCommand" date="Mon Feb 08 16:17:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5956578">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1012]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2973" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:17:07 EST 2021" starttimestamp="1612813070441" timestamp="5956578" />
  <Command __id="2976" _type="PauseCommand" date="Mon Feb 08 16:17:10 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="5960469">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3891]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2977" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:17:10 EST 2021" starttimestamp="1612813070441" timestamp="5960476" />
  <Command __id="2979" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:17:11 EST 2021" starttimestamp="1612813070441" timestamp="5960581" />
  <Command __id="2981" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:17:11 EST 2021" starttimestamp="1612813070441" timestamp="5960720" />
  <Command __id="2983" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:17:11 EST 2021" starttimestamp="1612813070441" timestamp="5960864" />
  <Command __id="2985" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:17:11 EST 2021" starttimestamp="1612813070441" timestamp="5961009" />
  <Command __id="2987" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:17:11 EST 2021" starttimestamp="1612813070441" timestamp="5961409" />
  <Command __id="2989" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:17:12 EST 2021" starttimestamp="1612813070441" timestamp="5961644" />
  <Command __id="2991" _type="InsertStringCommand" date="Mon Feb 08 16:17:13 EST 2021" starttimestamp="1612813070441" timestamp="5962577" timestamp2="5962577">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2993" _type="PauseCommand" date="Mon Feb 08 16:17:14 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="5963836">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1259]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2992" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:17:14 EST 2021" starttimestamp="1612813070441" timestamp="5963836" />
  <Command __id="2995" _type="InsertStringCommand" date="Mon Feb 08 16:17:14 EST 2021" starttimestamp="1612813070441" timestamp="5964470" timestamp2="5964470">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="2997" _type="PauseCommand" date="Mon Feb 08 16:18:00 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="6010373">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[45903]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2996" _type="MoveCaretCommand" caretOffset="5018" date="Mon Feb 08 16:18:00 EST 2021" docOffset="28837" starttimestamp="1612813070441" timestamp="6010373" />
  <Command __id="2999" _type="PauseCommand" date="Mon Feb 08 16:18:02 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6012404">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2031]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2998" _type="MoveCaretCommand" caretOffset="5010" date="Mon Feb 08 16:18:02 EST 2021" docOffset="28829" starttimestamp="1612813070441" timestamp="6012404" />
  <Command __id="3001" _type="PauseCommand" date="Mon Feb 08 16:18:10 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6019872">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7468]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3002" _type="MoveCaretCommand" caretOffset="5183" date="Mon Feb 08 16:18:10 EST 2021" docOffset="34664" starttimestamp="1612813070441" timestamp="6020012" />
  <Command __id="3004" _type="PauseCommand" date="Mon Feb 08 16:18:13 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6023288">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3276]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3005" _type="MoveCaretCommand" caretOffset="5010" date="Mon Feb 08 16:18:13 EST 2021" docOffset="28829" starttimestamp="1612813070441" timestamp="6023448" />
  <Command __id="3011" _type="PauseCommand" date="Mon Feb 08 16:18:20 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6030450">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1110]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3010" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Mon Feb 08 16:18:20 EST 2021" starttimestamp="1612813070441" timestamp="6030450" />
  <Command __id="3013" _type="PauseCommand" date="Mon Feb 08 16:18:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6032372">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1922]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3012" _type="MoveCaretCommand" caretOffset="4445" date="Mon Feb 08 16:18:22 EST 2021" docOffset="33862" starttimestamp="1612813070441" timestamp="6032372" />
  <Command __id="3015" _type="MoveCaretCommand" caretOffset="5010" date="Mon Feb 08 16:18:23 EST 2021" docOffset="28829" starttimestamp="1612813070441" timestamp="6032881" />
  <Command __id="3017" _type="PauseCommand" date="Mon Feb 08 16:18:47 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="6057219">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[24338]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3016" _type="MoveCaretCommand" caretOffset="1079" date="Mon Feb 08 16:18:47 EST 2021" docOffset="21021" starttimestamp="1612813070441" timestamp="6057219" />
  <Command __id="3019" _type="PauseCommand" date="Mon Feb 08 16:18:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6059143">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1924]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3020" _type="InsertStringCommand" date="Mon Feb 08 16:18:49 EST 2021" starttimestamp="1612813070441" timestamp="6059153" timestamp2="6059153">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3022" _type="PauseCommand" date="Mon Feb 08 16:18:56 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6066537">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[7384]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3023" _type="InsertStringCommand" date="Mon Feb 08 16:18:56 EST 2021" starttimestamp="1612813070441" timestamp="6066542" timestamp2="6066542">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3024" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:18:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6066583" />
  <Command __id="3037" _type="PauseCommand" date="Mon Feb 08 16:19:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6069765">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1144]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3044" _type="PauseCommand" date="Mon Feb 08 16:19:02 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6072072">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1733]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3045" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:19:02 EST 2021" starttimestamp="1612813070441" timestamp="6072076" />
  <Command __id="3071" _type="PauseCommand" date="Mon Feb 08 16:19:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6077456">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1010]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3070" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:07 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6077456" />
  <Command __id="3073" _type="InsertStringCommand" date="Mon Feb 08 16:19:08 EST 2021" starttimestamp="1612813070441" timestamp="6077792" timestamp2="6077792">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3075" _type="PauseCommand" date="Mon Feb 08 16:19:10 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6080487">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2695]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3076" _type="InsertStringCommand" date="Mon Feb 08 16:19:10 EST 2021" starttimestamp="1612813070441" timestamp="6080491" timestamp2="6080491">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3078" _type="InsertStringCommand" date="Mon Feb 08 16:19:10 EST 2021" starttimestamp="1612813070441" timestamp="6080543" timestamp2="6080543">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3079" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:10 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6080544" />
  <Command __id="3081" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6080700" />
  <Command __id="3083" _type="InsertStringCommand" date="Mon Feb 08 16:19:11 EST 2021" starttimestamp="1612813070441" timestamp="6080752" timestamp2="6080752">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3084" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6080846" />
  <Command __id="3085" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6080862" />
  <Command __id="3087" _type="InsertStringCommand" date="Mon Feb 08 16:19:11 EST 2021" starttimestamp="1612813070441" timestamp="6081085" timestamp2="6081085">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="3089" _type="InsertStringCommand" date="Mon Feb 08 16:19:11 EST 2021" starttimestamp="1612813070441" timestamp="6081353" timestamp2="6081353">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3091" _type="InsertStringCommand" date="Mon Feb 08 16:19:11 EST 2021" starttimestamp="1612813070441" timestamp="6081428" timestamp2="6081428">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3092" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6081471" />
  <Command __id="3093" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6081486" />
  <Command __id="3095" _type="InsertStringCommand" date="Mon Feb 08 16:19:11 EST 2021" starttimestamp="1612813070441" timestamp="6081502" timestamp2="6081502">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3096" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:12 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6081596" />
  <Command __id="3097" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6081620" />
  <Command __id="3099" _type="InsertStringCommand" date="Mon Feb 08 16:19:12 EST 2021" starttimestamp="1612813070441" timestamp="6081728" timestamp2="6081728">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3101" _type="InsertStringCommand" date="Mon Feb 08 16:19:12 EST 2021" starttimestamp="1612813070441" timestamp="6081811" timestamp2="6081811">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3103" _type="InsertStringCommand" date="Mon Feb 08 16:19:12 EST 2021" starttimestamp="1612813070441" timestamp="6081838" timestamp2="6081838">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3104" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:12 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6081862" />
  <Command __id="3105" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6081879" />
  <Command __id="3107" _type="InsertStringCommand" date="Mon Feb 08 16:19:12 EST 2021" starttimestamp="1612813070441" timestamp="6081984" timestamp2="6081984">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3109" _type="InsertStringCommand" date="Mon Feb 08 16:19:12 EST 2021" starttimestamp="1612813070441" timestamp="6082150" timestamp2="6082150">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3111" _type="InsertStringCommand" date="Mon Feb 08 16:19:12 EST 2021" starttimestamp="1612813070441" timestamp="6082253" timestamp2="6082253">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3113" _type="InsertStringCommand" date="Mon Feb 08 16:19:13 EST 2021" starttimestamp="1612813070441" timestamp="6083175" timestamp2="6083175">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3114" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6083269" />
  <Command __id="3118" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6083959" />
  <Command __id="3119" _type="InsertStringCommand" date="Mon Feb 08 16:19:14 EST 2021" starttimestamp="1612813070441" timestamp="6083965" timestamp2="6083965">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3121" _type="InsertStringCommand" date="Mon Feb 08 16:19:14 EST 2021" starttimestamp="1612813070441" timestamp="6084143" timestamp2="6084143">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3123" _type="PauseCommand" date="Mon Feb 08 16:19:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6085957">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1814]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3122" _type="MoveCaretCommand" caretOffset="1416" date="Mon Feb 08 16:19:16 EST 2021" docOffset="21358" starttimestamp="1612813070441" timestamp="6085957" />
  <Command __id="3125" _type="PauseCommand" date="Mon Feb 08 16:19:17 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6087275">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1318]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3124" _type="MoveCaretCommand" caretOffset="1460" date="Mon Feb 08 16:19:17 EST 2021" docOffset="21402" starttimestamp="1612813070441" timestamp="6087275" />
  <DocumentChange __id="2858" _type="Insert" date="Mon Feb 08 16:15:24 EST 2021" docASTNodeCount="4799" docActiveCodeLength="27692" docExpressionCount="3290" docLength="29451" length="1" offset="21526" starttimestamp="1612813070441" timestamp="5854348">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2874" _type="Insert" date="Mon Feb 08 16:15:37 EST 2021" docASTNodeCount="4799" docActiveCodeLength="27697" docExpressionCount="3290" docLength="29456" length="5" offset="22000" repeat="5" starttimestamp="1612813070441" timestamp="5867438" timestamp2="5867887">
    <text><![CDATA[title]]></text>
  </DocumentChange>
  <DocumentChange __id="2882" _type="Replace" date="Mon Feb 08 16:15:38 EST 2021" docASTNodeCount="4799" docActiveCodeLength="27698" docExpressionCount="3290" docLength="29457" endLine="616" insertionLength="6" int_docASTNodeCount="4799" int_docActiveCodeLength="27692" int_docExpressionCount="3290" int_docLength="29451" length="5" offset="22000" startLine="616" starttimestamp="1612813070441" timestamp="5868393">
    <deletedText><![CDATA[title]]></deletedText>
    <insertedText><![CDATA[titles]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2884" _type="Insert" date="Mon Feb 08 16:15:40 EST 2021" docASTNodeCount="4801" docActiveCodeLength="27702" docExpressionCount="3292" docLength="29461" length="4" offset="22006" repeat="4" starttimestamp="1612813070441" timestamp="5870513" timestamp2="5870944">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2892" _type="Replace" date="Mon Feb 08 16:15:41 EST 2021" docASTNodeCount="4704" docActiveCodeLength="27707" docExpressionCount="3225" docLength="29466" endLine="616" insertionLength="8" int_docASTNodeCount="4801" int_docActiveCodeLength="27699" int_docExpressionCount="3292" int_docLength="29458" length="3" offset="22007" startLine="616" starttimestamp="1612813070441" timestamp="5871250">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2894" _type="Replace" date="Mon Feb 08 16:15:42 EST 2021" docASTNodeCount="4704" docActiveCodeLength="27705" docExpressionCount="3225" docLength="29464" endLine="616" insertionLength="1" int_docASTNodeCount="4704" int_docActiveCodeLength="27704" int_docExpressionCount="3225" int_docLength="29463" length="3" offset="22011" startLine="616" starttimestamp="1612813070441" timestamp="5872013">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2900" _type="Insert" date="Mon Feb 08 16:15:44 EST 2021" docASTNodeCount="4803" docActiveCodeLength="27707" docExpressionCount="3294" docLength="29466" length="2" offset="22013" repeat="2" starttimestamp="1612813070441" timestamp="5873838" timestamp2="5873878">
    <text><![CDATA[, ]]></text>
  </DocumentChange>
  <DocumentChange __id="2928" _type="Insert" date="Mon Feb 08 16:16:59 EST 2021" docASTNodeCount="4804" docActiveCodeLength="27729" docExpressionCount="3295" docLength="29488" length="22" offset="20889" repeat="21" starttimestamp="1612813070441" timestamp="5948806" timestamp2="5955564">
    <text><![CDATA[, "Last of the Search"]]></text>
  </DocumentChange>
  <DocumentChange __id="2975" _type="Delete" date="Mon Feb 08 16:17:10 EST 2021" docASTNodeCount="4510" docActiveCodeLength="27705" docExpressionCount="3104" docLength="29464" endLine="589" length="24" offset="20887" repeat="7" startLine="589" starttimestamp="1612813070441" timestamp="5960469" timestamp2="5961637">
    <text><![CDATA[?", "Last of the Search"]]></text>
  </DocumentChange>
  <DocumentChange __id="2990" _type="Insert" date="Mon Feb 08 16:17:13 EST 2021" docASTNodeCount="4803" docActiveCodeLength="27707" docExpressionCount="3294" docLength="29466" length="2" offset="20887" repeat="2" starttimestamp="1612813070441" timestamp="5962564" timestamp2="5964465">
    <text><![CDATA[?"]]></text>
  </DocumentChange>
  <Command __id="3000" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:18:10 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6019872">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3003" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:18:13 EST 2021" docASTNodeCount="4803" docActiveCodeLength="27707" docExpressionCount="3294" docLength="29466" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6023288">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"), Diff(INSERT,""Title", "), Diff(EQUAL,""URL", "# of Visits", "Provided?"};¶"), Diff(DELETE,""), Diff(EQUAL,"			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			"), Diff(INSERT,"Map<String, String> titles = new HashMap<>();¶			"), Diff(EQUAL,"for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						"), Diff(INSERT,"	titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						"), Diff(EQUAL,"}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶"), Diff(DELETE,""), Diff(EQUAL,"				String[] nextLine = {"), Diff(INSERT,"titles.get(s), "), Diff(EQUAL,"s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶"), Diff(INSERT,"	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
]]></snapshot>
  </Command>
  <Command __id="3006" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:18:18 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6028430">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3014" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:18:23 EST 2021" docASTNodeCount="4803" docActiveCodeLength="27707" docExpressionCount="3294" docLength="29466" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6032742">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3018" _type="Insert" date="Mon Feb 08 16:18:49 EST 2021" docASTNodeCount="4803" docActiveCodeLength="27712" docExpressionCount="3294" docLength="29471" length="5" offset="21021" starttimestamp="1612813070441" timestamp="6059143">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="3021" _type="Insert" date="Mon Feb 08 16:18:56 EST 2021" docASTNodeCount="4706" docActiveCodeLength="27716" docExpressionCount="3226" docLength="29475" length="4" offset="21026" repeat="4" starttimestamp="1612813070441" timestamp="6066537" timestamp2="6066962">
    <text><![CDATA[comm]]></text>
  </DocumentChange>
  <DocumentChange __id="3028" _type="Delete" date="Mon Feb 08 16:18:57 EST 2021" docASTNodeCount="4803" docActiveCodeLength="27712" docExpressionCount="3294" docLength="29471" endLine="594" length="4" offset="21026" repeat="4" startLine="594" starttimestamp="1612813070441" timestamp="6067243" timestamp2="6067916">
    <text><![CDATA[comm]]></text>
  </DocumentChange>
  <DocumentChange __id="3032" _type="Insert" date="Mon Feb 08 16:18:58 EST 2021" docASTNodeCount="4706" docActiveCodeLength="27722" docExpressionCount="3226" docLength="29481" length="10" offset="21026" repeat="10" starttimestamp="1612813070441" timestamp="6068022" timestamp2="6070339">
    <text><![CDATA[webcommand]]></text>
  </DocumentChange>
  <DocumentChange __id="3043" _type="Delete" date="Mon Feb 08 16:19:02 EST 2021" docASTNodeCount="4803" docActiveCodeLength="27712" docExpressionCount="3294" docLength="29471" endLine="594" length="10" offset="21026" startLine="594" starttimestamp="1612813070441" timestamp="6072072">
    <text><![CDATA[webcommand]]></text>
  </DocumentChange>
  <DocumentChange __id="3046" _type="Insert" date="Mon Feb 08 16:19:02 EST 2021" docASTNodeCount="4706" docActiveCodeLength="27722" docExpressionCount="3226" docLength="29481" length="10" offset="21026" repeat="10" starttimestamp="1612813070441" timestamp="6072478" timestamp2="6073933">
    <text><![CDATA[Webcommand]]></text>
  </DocumentChange>
  <DocumentChange __id="3056" _type="Delete" date="Mon Feb 08 16:19:04 EST 2021" docASTNodeCount="4706" docActiveCodeLength="27715" docExpressionCount="3226" docLength="29474" endLine="594" length="7" offset="21029" repeat="7" startLine="594" starttimestamp="1612813070441" timestamp="6074500" timestamp2="6075471">
    <text><![CDATA[command]]></text>
  </DocumentChange>
  <DocumentChange __id="3063" _type="Insert" date="Mon Feb 08 16:19:06 EST 2021" docASTNodeCount="4706" docActiveCodeLength="27723" docExpressionCount="3226" docLength="29482" length="8" offset="21029" repeat="8" starttimestamp="1612813070441" timestamp="6075728" timestamp2="6077786">
    <text><![CDATA[Command ]]></text>
  </DocumentChange>
  <DocumentChange __id="3074" _type="Insert" date="Mon Feb 08 16:19:10 EST 2021" docASTNodeCount="4809" docActiveCodeLength="27742" docExpressionCount="3297" docLength="29501" length="19" offset="21037" repeat="19" starttimestamp="1612813070441" timestamp="6080487" timestamp2="6084139">
    <text><![CDATA[lastSearcch = null;]]></text>
  </DocumentChange>
  <DocumentChange __id="3126" _type="Insert" date="Mon Feb 08 16:19:20 EST 2021" docASTNodeCount="4710" docActiveCodeLength="27753" docExpressionCount="3228" docLength="29512" length="11" offset="21402" repeat="3" starttimestamp="1612813070441" timestamp="6090358" timestamp2="6090805">
    <text><![CDATA[
							if]]></text>
  </DocumentChange>
  <Command __id="3127" _type="PauseCommand" date="Mon Feb 08 16:19:20 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6090358">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3083]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3128" _type="InsertStringCommand" date="Mon Feb 08 16:19:20 EST 2021" starttimestamp="1612813070441" timestamp="6090372" timestamp2="6090372">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3130" _type="InsertStringCommand" date="Mon Feb 08 16:19:21 EST 2021" starttimestamp="1612813070441" timestamp="6090611" timestamp2="6090611">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3131" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6090654" />
  <Command __id="3133" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6090818" />
  <Command __id="3135" _type="InsertStringCommand" date="Mon Feb 08 16:19:21 EST 2021" starttimestamp="1612813070441" timestamp="6090976" timestamp2="6090976">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3137" _type="InsertStringCommand" date="Mon Feb 08 16:19:22 EST 2021" starttimestamp="1612813070441" timestamp="6091692" timestamp2="6091692">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3139" _type="InsertStringCommand" date="Mon Feb 08 16:19:22 EST 2021" starttimestamp="1612813070441" timestamp="6091716" timestamp2="6091716">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3140" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:22 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6091759" />
  <Command __id="3144" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:19:23 EST 2021" starttimestamp="1612813070441" timestamp="6093235" />
  <Command __id="3149" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:25 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6094823" />
  <Command __id="3151" _type="InsertStringCommand" date="Mon Feb 08 16:19:25 EST 2021" starttimestamp="1612813070441" timestamp="6094837" timestamp2="6094837">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3153" _type="InsertStringCommand" date="Mon Feb 08 16:19:25 EST 2021" starttimestamp="1612813070441" timestamp="6095029" timestamp2="6095029">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3154" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:25 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6095071" />
  <Command __id="3164" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:27 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6097537" />
  <Command __id="3166" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:19:28 EST 2021" starttimestamp="1612813070441" timestamp="6098022" />
  <Command __id="3168" _type="InsertStringCommand" date="Mon Feb 08 16:19:28 EST 2021" starttimestamp="1612813070441" timestamp="6098181" timestamp2="6098181">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3169" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:28 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6098223" />
  <Command __id="3170" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6098820" />
  <Command __id="3172" _type="InsertStringCommand" date="Mon Feb 08 16:19:29 EST 2021" starttimestamp="1612813070441" timestamp="6098839" timestamp2="6098839">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3174" _type="InsertStringCommand" date="Mon Feb 08 16:19:29 EST 2021" starttimestamp="1612813070441" timestamp="6099162" timestamp2="6099162">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3175" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:19:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6099204" />
  <Command __id="3179" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:19:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6100193" />
  <Command __id="3181" _type="InsertStringCommand" date="Mon Feb 08 16:19:30 EST 2021" starttimestamp="1612813070441" timestamp="6100344" timestamp2="6100344">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3268" _type="MoveCaretCommand" caretOffset="4943" date="Mon Feb 08 16:20:47 EST 2021" docOffset="5181" starttimestamp="1612813070441" timestamp="6176859" />
  <Command __id="3270" _type="SelectTextCommand" caretOffset="1527" date="Mon Feb 08 16:20:47 EST 2021" end="1527" start="1519" starttimestamp="1612813070441" timestamp="6177337" />
  <Command __id="3272" _type="PauseCommand" date="Mon Feb 08 16:20:50 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6179663">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2326]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3273" _type="InsertStringCommand" date="Mon Feb 08 16:20:50 EST 2021" starttimestamp="1612813070441" timestamp="6179673" timestamp2="6179673">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3275" _type="PauseCommand" date="Mon Feb 08 16:20:51 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6181069">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1396]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3276" _type="InsertStringCommand" date="Mon Feb 08 16:20:51 EST 2021" starttimestamp="1612813070441" timestamp="6181071" timestamp2="6181071">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3278" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:20:51 EST 2021" starttimestamp="1612813070441" timestamp="6181557" />
  <Command __id="3322" _type="PauseCommand" date="Mon Feb 08 16:21:01 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6190892">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2627]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3323" _type="MoveCaretCommand" caretOffset="32254" date="Mon Feb 08 16:21:01 EST 2021" docOffset="35137" starttimestamp="1612813070441" timestamp="6191047" />
  <Command __id="3325" _type="MoveCaretCommand" caretOffset="1971" date="Mon Feb 08 16:21:01 EST 2021" docOffset="1971" starttimestamp="1612813070441" timestamp="6191362" />
  <Command __id="3327" _type="PauseCommand" date="Mon Feb 08 16:21:02 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6192511">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1149]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3328" _type="MoveCaretCommand" caretOffset="1526" date="Mon Feb 08 16:21:03 EST 2021" docOffset="21468" starttimestamp="1612813070441" timestamp="6192682" />
  <Command __id="3329" _type="MoveCaretCommand" caretOffset="1520" date="Mon Feb 08 16:21:04 EST 2021" docOffset="21462" starttimestamp="1612813070441" timestamp="6193616" />
  <Command __id="3331" _type="InsertStringCommand" date="Mon Feb 08 16:21:04 EST 2021" starttimestamp="1612813070441" timestamp="6194064" timestamp2="6194064">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3333" _type="InsertStringCommand" date="Mon Feb 08 16:21:04 EST 2021" starttimestamp="1612813070441" timestamp="6194309" timestamp2="6194309">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3335" _type="InsertStringCommand" date="Mon Feb 08 16:21:04 EST 2021" starttimestamp="1612813070441" timestamp="6194441" timestamp2="6194441">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3337" _type="InsertStringCommand" date="Mon Feb 08 16:21:04 EST 2021" starttimestamp="1612813070441" timestamp="6194524" timestamp2="6194524">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="3339" _type="InsertStringCommand" date="Mon Feb 08 16:21:05 EST 2021" starttimestamp="1612813070441" timestamp="6194622" timestamp2="6194622">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3341" _type="InsertStringCommand" date="Mon Feb 08 16:21:05 EST 2021" starttimestamp="1612813070441" timestamp="6194645" timestamp2="6194645">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3343" _type="InsertStringCommand" date="Mon Feb 08 16:21:05 EST 2021" starttimestamp="1612813070441" timestamp="6194749" timestamp2="6194749">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3345" _type="PauseCommand" date="Mon Feb 08 16:21:07 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6196805">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2056]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3344" _type="MoveCaretCommand" caretOffset="1548" date="Mon Feb 08 16:21:07 EST 2021" docOffset="21490" starttimestamp="1612813070441" timestamp="6196805" />
  <Command __id="3347" _type="PauseCommand" date="Mon Feb 08 16:21:13 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6202731">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5926]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3348" _type="InsertStringCommand" date="Mon Feb 08 16:21:13 EST 2021" starttimestamp="1612813070441" timestamp="6202735" timestamp2="6202735">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3349" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:21:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6202776" />
  <Command __id="3354" _type="PauseCommand" date="Mon Feb 08 16:21:21 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6210559">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[7200]]></rest>
    <prev><![CDATA[Delete]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3357" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:21:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6211422" />
  <Command __id="3359" _type="InsertStringCommand" date="Mon Feb 08 16:21:21 EST 2021" starttimestamp="1612813070441" timestamp="6211437" timestamp2="6211437">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3361" _type="InsertStringCommand" date="Mon Feb 08 16:21:22 EST 2021" starttimestamp="1612813070441" timestamp="6211619" timestamp2="6211619">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3363" _type="InsertStringCommand" date="Mon Feb 08 16:21:22 EST 2021" starttimestamp="1612813070441" timestamp="6211763" timestamp2="6211763">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3365" _type="InsertStringCommand" date="Mon Feb 08 16:21:22 EST 2021" starttimestamp="1612813070441" timestamp="6211827" timestamp2="6211827">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3367" _type="PauseCommand" date="Mon Feb 08 16:21:23 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6212842">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1015]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3368" _type="InsertStringCommand" date="Mon Feb 08 16:21:23 EST 2021" starttimestamp="1612813070441" timestamp="6212855" timestamp2="6212855">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3369" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:21:23 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6212890" />
  <Command __id="3373" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:21:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6213657" />
  <Command __id="3375" _type="InsertStringCommand" date="Mon Feb 08 16:21:24 EST 2021" starttimestamp="1612813070441" timestamp="6213672" timestamp2="6213672">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3377" _type="InsertStringCommand" date="Mon Feb 08 16:21:24 EST 2021" starttimestamp="1612813070441" timestamp="6213878" timestamp2="6213878">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3379" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:21:24 EST 2021" starttimestamp="1612813070441" timestamp="6214228" />
  <Command __id="3381" _type="InsertStringCommand" date="Mon Feb 08 16:21:25 EST 2021" starttimestamp="1612813070441" timestamp="6214596" timestamp2="6214596">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3383" _type="PauseCommand" date="Mon Feb 08 16:21:29 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6218951">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4355]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3382" _type="MoveCaretCommand" caretOffset="1088" date="Mon Feb 08 16:21:29 EST 2021" docOffset="21030" starttimestamp="1612813070441" timestamp="6218951" />
  <Command __id="3384" _type="SelectTextCommand" caretOffset="1094" date="Mon Feb 08 16:21:29 EST 2021" end="1094" start="1084" starttimestamp="1612813070441" timestamp="6219106" />
  <DocumentChange __id="3232" _type="Replace" date="Mon Feb 08 16:20:29 EST 2021" docASTNodeCount="452" docActiveCodeLength="3401" docExpressionCount="274" docLength="3575" endLine="51" insertionLength="13" int_docASTNodeCount="452" int_docActiveCodeLength="3388" int_docExpressionCount="274" int_docLength="3562" length="4" offset="1990" startLine="51" starttimestamp="1612813070441" timestamp="6158584">
    <deletedText><![CDATA[Link]]></deletedText>
    <insertedText><![CDATA[Search Result]]></insertedText>
  </DocumentChange>
  <Command __id="3267" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:20:47 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1612813070441" timestamp="6176612">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_PAUSE = "pause";¶	private static final String XML_PREV_TYPE = "prevType";¶	private static final String XML_NEXT_TYPE = "nextType";¶	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; ¶	private String prev, next, range, prevType, nextType;¶	private long pause;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {¶		this.prev = prev.getCommandType();¶		this.next = next.getCommandType();¶		this.pause = pause;¶		this.range = range;¶		prevType = getType(prev);¶		nextType = getType(next);¶	}¶	¶	private String getType(EHICommand command) {¶		if (command instanceof InsertStringCommand || command instanceof Insert ||¶				command instanceof CopyCommand ||¶				command instanceof Delete ||¶				command instanceof Replace || command instanceof PasteCommand ||¶				command instanceof AssistCommand) {¶			return TYPES[0];¶		}¶		if (command instanceof RunCommand && (command.getAttributesMap().get("type").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {¶			return TYPES[1];¶		}¶		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {¶			return TYPES[2];¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return TYPES[3];¶		}¶		if (command instanceof ExceptionCommand) {¶			return TYPES[4];¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return TYPES[5];¶		}¶		if (command instanceof WebCommand) {¶			return TYPES[6];¶		}¶		if (command instanceof EclipseCommand) {¶			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();¶			if (id.contains("delete")) {¶				return TYPES[0];¶			}¶			if (id.contains("save")) {¶				return TYPES[7];¶			}¶			if (id.contains("terminate")) {¶				return TYPES[10];¶			}¶			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {¶				return TYPES[12];¶			}¶		}¶		if (command instanceof ShellCommand) {¶			String type = command.getAttributesMap().get("type").toLowerCase();¶			if (type.contains("gained_focus")) {¶				return TYPES[8];¶			}¶			if (type.contains("lost_focus") || type.contains("minimized")) {¶				return TYPES[9];¶			}¶		}¶		if (command instanceof DifficultyCommand) {¶			return TYPES[11];¶		}¶		if (command instanceof MoveCaretCommand) {¶			return TYPES[12];¶		}¶		if (command instanceof FileOpenCommand) {¶			return TYPES[13];¶		}¶		if (command instanceof SelectTextCommand) {¶			return TYPES[14];¶		}¶		if (command instanceof CompilationCommand) {¶			return TYPES[15];¶		}¶		return TYPES[16];¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_PAUSE, pause+"");¶		dataMap.put(XML_PREV_TYPE, prevType);¶		dataMap.put(XML_NEXT_TYPE, nextType);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			pause = Long.parseLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prevType = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			nextType = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3269" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:20:47 EST 2021" docASTNodeCount="4820" docActiveCodeLength="27833" docExpressionCount="3306" docLength="29592" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6177182">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			"), Diff(INSERT,"WebCommand lastSearcch = null;¶			"), Diff(EQUAL,"for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							"), Diff(INSERT,"if (command.getAttributesMap().get("type").equals(anObject)) {¶								¶							}¶							"), Diff(EQUAL,"urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			WebCommand lastSearcch = null;
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							if (command.getAttributesMap().get("type").equals(anObject)) {
								
							}
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3271" _type="Replace" date="Mon Feb 08 16:20:50 EST 2021" docASTNodeCount="4523" docActiveCodeLength="27826" docExpressionCount="3109" docLength="29585" endLine="601" insertionLength="1" int_docASTNodeCount="4819" int_docActiveCodeLength="27825" int_docExpressionCount="3305" int_docLength="29584" length="8" offset="21461" startLine="601" starttimestamp="1612813070441" timestamp="6179663">
    <deletedText><![CDATA[anObject]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3274" _type="Insert" date="Mon Feb 08 16:20:51 EST 2021" docASTNodeCount="4523" docActiveCodeLength="27827" docExpressionCount="3109" docLength="29586" length="1" offset="21462" starttimestamp="1612813070441" timestamp="6181069">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="3277" _type="Delete" date="Mon Feb 08 16:20:51 EST 2021" docASTNodeCount="4523" docActiveCodeLength="27826" docExpressionCount="3109" docLength="29585" endLine="601" length="1" offset="21462" startLine="601" starttimestamp="1612813070441" timestamp="6181554">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="3279" _type="Insert" date="Mon Feb 08 16:20:53 EST 2021" docASTNodeCount="4510" docActiveCodeLength="27841" docExpressionCount="3104" docLength="29600" length="15" offset="21462" repeat="15" starttimestamp="1612813070441" timestamp="6183286" timestamp2="6185686">
    <text><![CDATA[Search Result"']]></text>
  </DocumentChange>
  <DocumentChange __id="3310" _type="Delete" date="Mon Feb 08 16:20:56 EST 2021" docASTNodeCount="4523" docActiveCodeLength="27832" docExpressionCount="3109" docLength="29591" endLine="601" length="9" offset="21468" repeat="4" startLine="601" starttimestamp="1612813070441" timestamp="6186104" timestamp2="6187161">
    <text><![CDATA[ Result"']]></text>
  </DocumentChange>
  <DocumentChange __id="3318" _type="Insert" date="Mon Feb 08 16:20:58 EST 2021" docASTNodeCount="4820" docActiveCodeLength="27833" docExpressionCount="3306" docLength="29592" length="1" offset="21468" starttimestamp="1612813070441" timestamp="6187798">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="3321" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:21:01 EST 2021" docASTNodeCount="5023" docActiveCodeLength="37241" docExpressionCount="3251" docLength="49353" projectName="Hermes" starttimestamp="1612813070441" timestamp="6190892">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\analyzer\AnAnalyzer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package analyzer;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;


import analyzer.extension.ACSVParser;
import analyzer.extension.AStuckInterval;
import analyzer.extension.AStuckPoint;
import analyzer.extension.ARatioFileGenerator;
import analyzer.extension.RatioFileGeneratorFactory;
import analyzer.extension.CSVParser;
import analyzer.extension.FileReplayAnalyzerProcessorFactory;
import analyzer.extension.StuckInterval;
import analyzer.extension.StuckPoint;
import analyzer.ui.graphics.RatioFileReader;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.attributes.AttributeNames;
//import bus.uigen..AFileSetterModel;
//import bus.uigen..FileSetterModel;
//import bus.uigen..ObjectEditor;
import bus.uigen.models.AFileSetterModel;
import bus.uigen.models.FileSetterModel;
import config.FactorySingletonInitializer;
import difficultyPrediction.ADifficultyPredictionPluginEventProcessor;
import difficultyPrediction.DifficultyPredictionPluginEventProcessor;
import difficultyPrediction.DifficultyPredictionSettings;
import difficultyPrediction.Mediator;
import difficultyPrediction.PredictionParametersSetterSelector;
import difficultyPrediction.eventAggregation.EventAggregator;
import difficultyPrediction.featureExtraction.RatioFeatures;
import fluorite.commands.DifficultyCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.PredictionCommand;
import fluorite.commands.PredictionType;
import fluorite.commands.Status;
import fluorite.commands.WebVisitCommand;
import fluorite.model.EHEventRecorder;
import fluorite.model.EHXMLFormatter;
import fluorite.util.EHLogReader;
import programmatically.AnEclipseProgrammaticController;
import util.annotations.LayoutName;
import util.annotations.Row;
import util.annotations.Visible;
import util.trace.recorder.LogFileCreated;
import util.trace.recorder.LogHandlerBound;

@LayoutName(AttributeNames.GRID_BAG_LAYOUT)
/**
 * Loads the experimental directory.
 * reads specified command logs
 * Combines all log files for an experiment into a nested command list.
 * Replays a flattenned version of the log.
 * Prints the replay
 * Each command is sent to a difficulty processor so that new predictions can be made and visualized
 * The difficulty pipe line will fire events
 * Fires events for  replay of stored events also.
 * The stored replay can be used to generate ratio files,
 * Also replays ratio files that can be then visualized.
 *
 * 
 * @author dewan
 *
 */
public class AnAnalyzer implements Analyzer {
//	private final static Logger ANALYZER_LOGGER = Logger.getLogger(Analyzer.class.getName());

//	public static final String PARTICIPANT_DIRECTORY = "data/";
	public static final String DEFAULT_PARTICIPANT_DIRECTORY = "data/";

	public static final String EXPERIMENTAL_DATA = "ExperimentalData/";
	public static final String OUTPUT_DATA = "OutputData/";

	public static final String ECLIPSE_FOLDER = "Eclipse/";
	public static final String BROWSER_FOLDER = "Browser/";
	public static final String REPLAYED_LOG_FOLDER = "ReplayedLogs/";
	public static final String REPLAYED_PROJECT_FOLDER = "ReplayedProjects/";
	public static final String PROJECT_NAME_PREFIX = "Project";




//	public static final String STUCKPOINT_FILE = "data/GroundTruth/Stuckpoints.csv";
	public   String stuckPointFile() {
		return Paths.get (getParticipantsFolderName(), "GroundTruth/Stuckpoints.csv").toString();
	}

//	public static final String STUCKINTERVAL_FILE = "data/GroundTruth/Stuck Intervals.csv";
	public   String stuckIntervalsFile() {
		return Paths.get (getParticipantsFolderName(), "GroundTruth/Stuck Intervals.csv").toString();
	}

//	public static final String PARTICIPANT_INFORMATION_DIRECTORY = "data/ExperimentalData/";
//	public static final String PARTICIPANT_OUTPUT_DIRECTORY = "data/OutputData/";

	public static final String PARTICIPANT_INFORMATION_FILE = "Participant_Info.csv";
	public static final String RATIOS_FILE_NAME = "ratios.csv";
	public static final int SEGMENT_LENGTH = 50;
	public static final String ALL_PARTICIPANTS = "All";
	public static final String IGNORE_KEYWORD = "IGNORE";
	 final Hashtable<String, String> participants = new Hashtable<String, String>();
	 protected String outPath;

	// do not make public, we only need to fill these maps once, must uphold
	// that they are unmodifiable via getter methods
	private  Map<String, Queue<StuckPoint>> stuckPoint = new HashMap<>();
	private  Map<String, Queue<StuckInterval>> stuckInterval = new HashMap<>();
	
	protected List<WebVisitCommand> sortedWebVisitQueue = new LinkedList<>();
	protected List<WebVisitCommand> sortedWebVisitCommands = new ArrayList();
	protected WebVisitCommand lastWebVisitCommandWithoutDuration;

	protected List<String> webVisitsInFile = new ArrayList();

	 boolean stuckFileLoaded = false;
	 RatioFileReader ratioFileReader;

	 long startTimestamp;
	 long experimentStartTimestamp;
	protected List<List<EHICommand>> nestedCommandsList;

	FileSetterModel participantsFolder, outputFolder, experimentalData;
	AnalyzerParameters parameters;
	EHLogReader reader;
	// protected Thread difficultyPredictionThread;
	// protected DifficultyPredictionRunnable difficultyPredictionRunnable;
	// protected BlockingQueue<ICommand> pendingPredictionCommands;
	DifficultyPredictionPluginEventProcessor difficultyEventProcessor;
	List<AnalyzerListener> listeners = new ArrayList<>();
	PropertyChangeSupport propertyChangeSupport;
	// int currentParticipant = -1;

	// subdirectory inside of OutputData to put outputs, note that it can be
	// different for each instance of analyzer
	private String outputSubdirectory = "";
	int lastPrediction;
	int lastCorrection;
	Mediator mediator;
//	protected long lastStartTimestamp;

	EventAggregator eventAggregator;
	protected Set<String> ignoreParticipants = new HashSet<String>(Arrays.asList(
			new String[]{"33"}));


	// random comment to make sure things can commit
	public AnAnalyzer() {
		propertyChangeSupport = new PropertyChangeSupport(this);
		// whoever invokes the analyzer should set the replay mode
		// DifficultyPredictionSettings.setReplayMode(true);
		DifficultyPredictionSettings.setSegmentLength(SEGMENT_LENGTH);

		reader = new EHLogReader();
		participantsFolder = new AFileSetterModel(JFileChooser.DIRECTORIES_ONLY);
//		participantsFolder.setText(DEFAULT_PARTICIPANT_DIRECTORY);
		participantsFolder.setText(defaultParticipantDirectory());
		parameters = new AnAnalyzerParameters(this);
		parameters.getParticipants().addChoice(ALL_PARTICIPANTS);
		parameters.getParticipants().setValue(ALL_PARTICIPANTS);
//		difficultyEventProcessor = ADifficultyPredictionPluginEventProcessor.getInstance();

		FactorySingletonInitializer.configure();


	}
	protected File getOrCreateLogLocation(String aParticipantId) {
		String aFileName = Paths.get(outPath, aParticipantId, REPLAYED_LOG_FOLDER,aParticipantId ).toString();
		File aFile = new File(aFileName);
		if (!aFile.exists()) {
			try {
				if (!aFile.getParentFile().exists()) {						
					aFile.getParentFile().mkdirs();
				}
				aFile.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return aFile;
	}
	public AnEclipseProgrammaticController programmaticController() {
		return AnEclipseProgrammaticController.getInstance();
	}
	public static void emptyDirectory (File aDirectory) {
		try {
			 Path aPath = Paths.get(aDirectory.getAbsolutePath());
			  Files.newDirectoryStream( aPath).forEach( aFile -> {
			    try { Files.delete( aFile ); }
			    catch ( IOException e ) { throw new UncheckedIOException(e); }
			  } );
			}
			catch ( IOException e ) {
			  e.printStackTrace();
			}
	}
	protected String projectName (String aParticipantId) {
		return PROJECT_NAME_PREFIX + "_" + aParticipantId;
	}
	protected File getOrCreateEmptyProjectLocation(String aParticipantId) {
		String aProjectLocation = Paths.get(outPath, aParticipantId, REPLAYED_PROJECT_FOLDER, projectName(aParticipantId) ).toString();
		File aProjectDir = new File(aProjectLocation);
		if (!aProjectDir.exists()) {
			try {
				if (!aProjectDir.exists()) {						
					aProjectDir.mkdirs();
					
				}
//				aFile.createNewFile();
			} catch (Exception e) {
				e.printStackTrace();
			}
		} 
		File anSrcFolder = Paths.get(aProjectDir.getAbsolutePath(), "src").toFile();
		if (!anSrcFolder.exists()) {
			anSrcFolder.mkdir();
		}		
		emptyDirectory(anSrcFolder);
		return aProjectDir;
		
	}
	protected Logger getLogger() {
		return Logger.getLogger(Analyzer.class.getName());
	}
	public void removeLogHandlers(String aParticipantId) {
		Handler[] aHandlers = getLogger().getHandlers();
		for (Handler aHandler:aHandlers) {
			FileHandler aFileHandler = (FileHandler) aHandler;
			getLogger().removeHandler(aHandler);
			aFileHandler.close();

		}
		

	}
	public void resetProject(String aParticipantId, long aStartTimestamp ) {
		File aProjectLocation = getOrCreateEmptyProjectLocation(aParticipantId);
		programmaticController().getOrCreateProject(projectName(aParticipantId), aProjectLocation.getAbsolutePath());
		
	}
	public void resetLogger(String aParticipantId, long aStartTimestamp ) {
//		Handler[] aHandlers = getLogger().getHandlers();
//		for (Handler aHandler:aHandlers) {
//			getLogger().removeHandler(aHandler);
//		}
		getLogger().setLevel(Level.FINE);

//		File outputFile = null;
		try {
			File aLogLocation = getOrCreateLogLocation(aParticipantId);
//			outputFile = new File(logLocation, EHEventRecorder.getUniqueMacroNameByTimestamp(getStartTimestamp(), false));
			LogFileCreated.newCase(aLogLocation.getName(), this);

			FileHandler handler = new FileHandler(aLogLocation.getPath());
			handler.setEncoding("UTF-8");
			handler.setFormatter(new EHXMLFormatter(aStartTimestamp)); 
			getLogger().addHandler(handler);
			LogHandlerBound.newCase(handler, this);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	protected void recordCommand (EHICommand aCommand) {
		getLogger().log(Level.FINE, null, aCommand);
	}
	
	protected String defaultParticipantDirectory() {
		return DEFAULT_PARTICIPANT_DIRECTORY;
	}
//	public String participantDirectoryName() {
//		return participantsFolder.getLabel().getText();
//	}

	void notifyPre() {
		propertyChangeSupport.firePropertyChange("this", null, this);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#getParticipantsFolder()
	 */
	@Override
	@Row(0)
	public FileSetterModel getParticipantsFolder() {
		return participantsFolder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#getParticipantsFolderName()
	 */
	@Override
	@Visible(false)
	public String getParticipantsFolderName() {
		return participantsFolder.getText();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#setParticipantsFolderName(java.lang.String)
	 */
	@Override
	@Visible(false)
	public void setParticipantsFolderName(String aName) {
		participantsFolder.setText(aName);
		notifyPre();
	}

	boolean directoryLoaded;

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#preLoadDirectory()
	 */
	@Override
	public boolean preLoadDirectory() {
		return !directoryLoaded;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#loadDirectory()
	 */
	@Override
	@Visible(false)
	public void loadDirectory() {
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(Paths.get(
					getParticipantsFolderName(),  EXPERIMENTAL_DATA
			// PARTICIPANT_INFORMATION_DIRECTORY
					, PARTICIPANT_INFORMATION_FILE).toString()));
			String word = null;
			while ((word = br.readLine()) != null) {
				String[] userInfo = word.split(",");
				participants.put(userInfo[0].trim(), userInfo[1].trim());
				parameters.getParticipants().addChoice(userInfo[0]);
			}
			br.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		directoryLoaded = true;
		notifyPre();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#preLoadLogs()
	 */
	@Override
	public boolean preLoadLogs() {
		return directoryLoaded;
		// && !logsLoaded;
	}

	boolean logsLoaded;

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#loadLogs()
	 */
	@Override
	@Visible(false)
	public void loadLogs(boolean createNewThread) {
		if (createNewThread) {
			final Runnable aRunnable = new Runnable() {
				public void run() {
					doLoadLogs();
					System.out.println("Logs loaded");
				}
			};
			Thread aThread = (new Thread(aRunnable));
			aThread.setName("Replay thread for:"
					+ parameters.getParticipants().getValue());

			aThread.start();

		} else
			doLoadLogs();
	}

	/**
	 * Loads stuck point from the stuckpoint.csv file into the hashmap.
	 * 
	 */
	@Visible(false)
	public void loadStuckPoint() {
		CSVParser parser = new ACSVParser();
		// try {
//		parser.start(STUCKPOINT_FILE);
		parser.start(stuckPointFile());

		// } catch (FileNotFoundException e1) {
		// // TODO Auto-generated catch block
		// e1.printStackTrace();
		// }

		parser.getNextLine();
		String line;
		while ((line = parser.getNextLine()) != null) {
			String[] split = line.split(",");

			if (split.length > 0 && !split[0].trim().equals("")) {
				StuckPoint p = new AStuckPoint();

				String id = getId(split[0]);

				try {
					p.setDate(new SimpleDateFormat("hh:mm a").parse(split[1]));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				p.setType(split[2]);

				if (stuckPoint.get(id) == null) {
					stuckPoint.put(id, new PriorityQueue<StuckPoint>());

				}

				// get priority queue and add the new stuckpoint
				stuckPoint.get(id).add((StuckPoint) p);

			}

		}

		parser.stop();
	}

	private String getId(String participantName) {
		for (String key : participants.keySet()) {
			if (participants.get(key).equals(participantName)) {
				return key;

			}

		}

		return null;

	}

	/**
	 * Loads stuck interval from the stuck interval csv into the hashmap
	 * 
	 * 
	 */
	@Visible(false)
	public synchronized void loadStuckInterval() {
		CSVParser parser = new ACSVParser();
		// try {
//		parser.start(STUCKINTERVAL_FILE);
		parser.start(stuckIntervalsFile());

		// } catch (FileNotFoundException e1) {
		// // TODO Auto-generated catch block
		// e1.printStackTrace();
		// return;
		// }

		parser.getNextLine();
		String line;
		while ((line = parser.getNextLine()) != null) {
			String[] split = line.split(",");

			if (split.length > 0 && !split[0].trim().equals("")) {
				StuckInterval p = new AStuckInterval();

				p.setParticipant(split[0]);
				String id = getId(split[0]);
				;

				try {
					p.setDate(new SimpleDateFormat("HH:mm:ss").parse(split[1]));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				p.setBarrierType(split[2]);
				p.setSurmountability(split[3]);

				if (stuckInterval.get(id) == null) {
					stuckInterval.put(id,
							new PriorityQueue<StuckInterval>());

				}

				// get the priority queue and add the new stuck interval
				stuckInterval.get(id).add((StuckInterval) p);

			}

		}

		parser.stop();

	}
	@Visible(false)

	public void doLoadLogs() {
//		FactorySingletonInitializer.configure();

		String participantId = parameters.getParticipants().getValue();
		String numberOfSegments = ""
				+ parameters.getPredictionParameters().getSegmentLength();
		// String numberOfSegments = "" +
		// parameters.getPredictionParameters().getSegmentLength();
		// String numberOfSegments = "" +
		// parameters.getPredictionParameters().getSegmentLength();

		// Queue q=this.stuckPoint.get("19");
		// while(!q.isEmpty()) {
		// System.out.println(q.poll());
		//
		// }

		if (participantId.equalsIgnoreCase(""))
			participantId = ALL_PARTICIPANTS;
		//
		// if(numberOfSegments.equalsIgnoreCase(""))
		// numberOfSegments = "" + SEGMENT_LENGTH;

		if (numberOfSegments.equalsIgnoreCase(""))
			numberOfSegments = "" + SEGMENT_LENGTH;

		// todo need to ask for discrete chunks or sliding window
		// may d for discrete and s for sliding window

		// scanIn.close();

		// Now get all the participants in a list
		List<String> participantList = new ArrayList<String>(
				Arrays.asList(participantId.split(" ")));
		participantList.removeAll(Collections.singleton(""));

		System.out.println("Processing logs for: " + participantId);
		List<String> participantIds = new ArrayList<>(parameters
				.getParticipants().getChoices().size());
		participantIds.addAll(parameters.getParticipants().getChoices());

		if (!stuckFileLoaded) {
			// Load the stuck points and such
			loadStuckInterval();
			loadStuckPoint();
			stuckFileLoaded = true;
		}
		// if (parameters.isVisualizePrediction()) {
		// PredictorConfigurer.visualizePrediction();
		// }
		// the main subdirectory we are putting files in
//		String outPath = Paths.get(participantsFolder.getLabel().getText(), OUTPUT_DATA ).toString();
		outPath = Paths.get(getParticipantsFolderName(), OUTPUT_DATA ).toString();

		// + this.outputSubdirectory;
		if (participantList.get(0).equals(ALL_PARTICIPANTS)) {
			// remove all from the participants
			participantIds.remove(ALL_PARTICIPANTS);

			List<String> allIgnores = new ArrayList<>();
			// Build the ignore list
			if (participantList.size() > 1
					&& participantList.get(1).equalsIgnoreCase(IGNORE_KEYWORD)) {
				// take out as the ignore function is not actually a participant
				participantIds.remove(participantId);
				parameters.getParticipants().getChoices().remove(participantId);

				// remove from the list of participants the ones we want to
				// ignore
				for (String ignore : participantList.subList(2,
						participantList.size())) {
					List<String> participant = new ArrayList<>(
							Arrays.asList(ignore.split(",")));
					participant.removeAll(Collections.singleton(""));

					for (String p : participant) {
						if (participantIds.contains(p)) {
							participantIds.remove(p);

							allIgnores.add(p);
						}

					}

				}

			}

			// calculate new outputdirectory
			// move this inside the loop so we create a separate output dir for
			// each participant
			// this.outputSubdirectory=outPath += participantId+"/";
			// keep this for AnArffGenerator
			this.outputSubdirectory = outPath + participantId;
			notifyNewParticipant(ALL_PARTICIPANTS, null);
			notifyReplayStarted();
			// all if first on the list

			for (String aParticipantId : participantIds) {
				// processParticipant(aParticipantId,outPath,participantsFolder.getText()
				// + EXPERIMENTAL_DATA +
				// AnAnalyzer.participants.get(aParticipantId) + "/" +
				// ECLIPSE_FOLDER,false);
				if (ignoreParticipants.contains(aParticipantId)) 
					continue;
				this.outputSubdirectory = outPath + aParticipantId + "/";
				// should there be a notifyNewParticipant here also
				processParticipant(aParticipantId, 
						this.outputSubdirectory,
//						participantsFolder.getText() + EXPERIMENTAL_DATA,
						Paths.get(getParticipantsFolderName(), EXPERIMENTAL_DATA).toString(),

						// + AnAnalyzer.participants.get(aParticipantId) + "/" +
						// ECLIPSE_FOLDER,
						false);

			}

			notifyFinishParticipant(ALL_PARTICIPANTS, null);
			notifyReplayFinished();

		} else {
			// String aParticipanttFolder = participants.get(participantId);
//			this.outputSubdirectory = outPath + participantId + "/";
			this.outputSubdirectory = Paths.get(outPath, participantId).toString();

			processParticipant(participantId, this.outputSubdirectory,
					Paths.get (getParticipantsFolderName(), EXPERIMENTAL_DATA).toString()
//					participantsFolder.getText() + EXPERIMENTAL_DATA
					// + aParticipanttFolder + "/" + ECLIPSE_FOLDER
					, true);

		}
		// old stuff, in case we need to revert 12/20/2014

		// if (participantId.equals(ALL_PARTICIPANTS)) {
		// notifyNewParticipant(ALL_PARTICIPANTS, null);
		// for (String aParticipantId:participantIds) {
		// if (aParticipantId.equals(ALL_PARTICIPANTS)) {
		// continue;
		// }
		// // integrated analyzer
		// processParticipant(aParticipantId);
		// // waitForParticipantLogsToBeProcessed();
		//
		//
		// // jason's code
		// // String aParticipanttFolder = participants.get(aParticipantId);
		// // commandsList = convertXMLLogToObjects(aParticipanttFolder);
		// // MainConsoleUI.processCommands(participantsFolder.getText(),
		// commandsList, numberOfSegments,aParticipanttFolder);
		// }
		//
		// notifyFinishParticipant(ALL_PARTICIPANTS, null);
		// } else {
		// String aParticipanttFolder = participants.get(participantId);
		// processParticipant(participantId);
		// // jason's code, separator mediator
		// // commandsList = convertXMLLogToObjects(aParticipanttFolder);
		// // DifficultyPredictionSettings.setRatiosFileName(aParticipanttFolder
		// + "ratios.csv");
		// // processParticipant(participantId);
		// // MainConsoleUI.processCommands(participantsFolder.getText(),
		// commandsList, numberOfSegments, aParticipanttFolder);
		// }

		logsLoaded = true;
	}
	@Visible(false)
	public void processBrowserHistoryOfFolder(String aFolderName) {
		String fullName = aFolderName;
		File folder = new File(fullName);
		if (!folder.exists()) {
			System.out.println("folder does not exist:" + fullName);
			return;
		}
		if (!folder.isDirectory()) {
			System.out.println("folder not a directory:" + fullName);
			return;
		}
		List<String> participantFiles = MainConsoleUI.getFilesForFolder(folder);
		System.out.println("Particpant " + aFolderName + " has "
				+ participantFiles.size() + " file(s)");
		// System.out.println();
		for (int i = 0; i < participantFiles.size(); i++) {
			String aFileName = fullName + participantFiles.get(i);
			if (!aFileName.endsWith(".txt"))
				continue;

			// List<ICommand> commands = reader.readAll(participantDirectory
			// + participantFiles.get(i));
			System.out.println("Reading " + aFileName);
			processBrowserHistoryOfFile(aFileName);
			//

			// listOfListOFcommands.add(commands);
		}
		notifyFinishedBrowserLines();

	}
	@Visible(false)
	public void storeBrowserHistoryOfFolder(String aFolderName) {
		String fullName = aFolderName;
		File folder = new File(fullName);
		if (!folder.exists()) {
			System.out.println("folder does not exist:" + fullName);
			return;
		}
		if (!folder.isDirectory()) {
			System.out.println("folder not a directory:" + fullName);
			return;
		}
		List<String> participantFiles = MainConsoleUI.getFilesForFolder(folder);
		System.out.println("Particpant " + aFolderName + " has "
				+ participantFiles.size() + " file(s)");
		// System.out.println();
		sortedWebVisitQueue.clear();
		sortedWebVisitCommands.clear();
		webVisitsInFile.clear();
		lastWebVisitCommandWithoutDuration = null;
		

		for (int i = 0; i < participantFiles.size(); i++) {
			String aFileName = Paths.get (fullName, participantFiles.get(i)).toString();
			if (!aFileName.endsWith(".txt"))
				continue;

			// List<ICommand> commands = reader.readAll(participantDirectory
			// + participantFiles.get(i));
			System.out.println("Reading " + aFileName);
			storeBrowserHistoryOfFile(aFileName);
			//

			// listOfListOFcommands.add(commands);
		}
		Collections.sort(sortedWebVisitQueue);

	}

	@Visible(false)
	public void processBrowserHistoryOfFile(String aFileName) {
		try {
			FileInputStream fis = new FileInputStream(aFileName);

			// Construct BufferedReader from InputStreamReader
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));

			String line = null;
			while ((line = br.readLine()) != null) {
				// System.out.println(line);
				notifyNewBrowseLine(line);
			}

			br.close();
		} catch (Exception e) {
			e.printStackTrace();

		}

	}
	@Visible(false)
	public void storeBrowserHistoryOfFile(String aFileName) {
		try {
			FileInputStream fis = new FileInputStream(aFileName);

			// Construct BufferedReader from InputStreamReader
			BufferedReader br = new BufferedReader(new InputStreamReader(fis));

			String line = null;
			while ((line = br.readLine()) != null) {
				// System.out.println(line);
				WebVisitCommand aWebVisitCommand = toWebVisitCommand(line);
				sortedWebVisitQueue.add(0, aWebVisitCommand);
				webVisitsInFile.add(line);
			}
			sortedWebVisitCommands.addAll (sortedWebVisitQueue); // making shallow copy

			br.close();
		} catch (Exception e) {
			e.printStackTrace();

		}

	}

	void waitForParticipantLogsToBeProcessed() {
		try {
			if (difficultyEventProcessor.getDifficultyPredictionThread() != null) {
			// difficultyPredictionThread.join();
			difficultyEventProcessor.getDifficultyPredictionThread().join();
			} else {
				System.out.println("Cannot wait for difficulty prediction thread to finish");
			}
		} catch (InterruptedException e) {

			e.printStackTrace();
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#processParticipant(java.lang.String)
	 */
	@Override
	// modularize this method
	@Visible(false)
	public void processParticipant(String aParticipantId, String outPath,
			String dataPath, boolean isIndividualPart) {

		// if (parameters.isVisualizePrediction()) {
		// PredictorConfigurer.visualizePrediction();
		// }
		parameters.getParticipants().setValue(aParticipantId);
		String aParticipantFolder = participants.get(aParticipantId);
		// notifyNewParticipant(aParticipantId);
		// we now get the correct outpath with individual folder
		String aFullParticipantOutputFolderName = outPath;
		// String aFullParticipantOutputFolderName = outPath+(isIndividualPart?
		// aParticipantFolder+"/":"");
//		String aFullParticipantDataFolderName = dataPath + aParticipantFolder
//				+ "/" + ECLIPSE_FOLDER;
		String aFullParticipantDataFolderName = Paths.get(dataPath, aParticipantFolder,
				ECLIPSE_FOLDER).toString();
		File anOutputFolder = new File(aFullParticipantOutputFolderName);
		if (!anOutputFolder.exists())
			anOutputFolder.mkdirs();

		// if (isIndividualPart) {
//
//		String aFullRatiosFileName = aFullParticipantOutputFolderName
//				+ "ratios.csv";
		String aFullRatiosFileName = Paths.get(aFullParticipantOutputFolderName,
				"ratios.csv").toString();
		File aRatiosFile = new File(aFullRatiosFileName);
		if (aRatiosFile.exists()) {
			DifficultyPredictionSettings.setRatioFileExists(true);

		} else {
			// if (!aRatiosFile.exists())
			try {
				DifficultyPredictionSettings.setRatioFileExists(false);
				aRatiosFile.createNewFile();
			} catch (IOException e1) {

				e1.printStackTrace();
			}
		}

		// erase file if it exists
		// if (aRatiosFile.exists() &&
		// DifficultyPredictionSettings.isNewRatioFiles()) {
		if (DifficultyPredictionSettings.isRatioFileExists()
				&& DifficultyPredictionSettings.isNewRatioFiles()) {

			try {
				FileOutputStream writer = new FileOutputStream(aRatiosFile);
				writer.close();

			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			} catch (IOException e) {
			}

			DifficultyPredictionSettings.setCreateRatioFile(isIndividualPart);
		}
		// we will replay commands in both cases
		nestedCommandsList = convertXMLLogToObjects(aFullParticipantDataFolderName);

		if (DifficultyPredictionSettings.isRatioFileExists()
				&& DifficultyPredictionSettings.isReplayRatioFiles()) {
			// System.out.println
			// ("Need to read ratio file and replay logs");
			RatioFileGeneratorFactory
					.setSingleton(FileReplayAnalyzerProcessorFactory
							.getSingleton());
			notifyNewParticipant(aParticipantId, aParticipantFolder); // should
																		// probably
																		// factor
																		// this
																		// out
			RatioFilePlayerFactory.getSingleton().setReplayedData(
					nestedCommandsList, aRatiosFile.getAbsolutePath());
			RatioFilePlayerFactory.getSingleton().replay();
			// ratioFileReader = new ARatioFileReader();
			// ratioFileReader.readFile(aRatiosFile.getAbsolutePath());
		} else {

			// nestedCommandsList =
			// convertXMLLogToObjects(aFullParticipantDataFolderName);
			TimeStampComputerFactory.getSingleton().reset(); // this is called by setRpelayedData
			DifficultyPredictionSettings.setRatiosFileName(aFullRatiosFileName);
			//moving this up in the constructor so we do not configure many times
//			difficultyEventProcessor = new ADifficultyPredictionPluginEventProcessor();
			difficultyEventProcessor = ADifficultyPredictionPluginEventProcessor.getInstance();

//			ADifficultyPredictionPluginEventProcessor
//					.setInstance(difficultyEventProcessor);
			difficultyEventProcessor.commandProcessingStarted();
			 mediator = difficultyEventProcessor
					.getDifficultyPredictionRunnable().getMediator();

			 eventAggregator = mediator.getEventAggregator();
			eventAggregator
					.setEventAggregationStrategy(new DiscreteChunksAnalyzer(""
							+ PredictionParametersSetterSelector.getSingleton()
									.getSegmentLength()));
			notifyNewParticipant(aParticipantId, aParticipantFolder);
			storeBrowserHistoryOfFolder(Paths.get(
					getParticipantsFolderName()
						, EXPERIMENTAL_DATA,
//						aParticipantFolder + "/"
						aParticipantFolder,

						BROWSER_FOLDER).toString());
			playNestedCommandList();



				difficultyEventProcessor.commandProcessingStopped();
				waitForParticipantLogsToBeProcessed();

				
				//maybe do this before notifying events so we can use the info in prediction
				// getting rid of call as we have already read the lines
//				processBrowserHistoryOfFolder(participantsFolder.getText()
//						+ EXPERIMENTAL_DATA + aParticipantFolder + "/"
//						+ BROWSER_FOLDER);
				
				notifyAllWebVisitsInFile();
				notifyAllWebCommandsInFile();

				notifyFinishParticipant(aParticipantId, aParticipantFolder);
				
				
//			}
		}

	}
	// override this to terminate earlier
	protected boolean continueTopLevelCommandReplay(int anIndex, List<List<EHICommand>> aNestedList) {
		return anIndex < aNestedList.size() && !terminateReplayNow();
	}
	// override this to terminate earlier
	protected boolean continueSecondLevelCommandReplay(int anIndex, List<EHICommand> aList) {
		return anIndex < aList.size() && !terminateReplayNow();
	}
	protected boolean terminateReplayNow() {
		return false;
	}
	
	protected void maybeForwardCommandToDifficultyEventProcessor(EHICommand aCommand, boolean isPrediction) {
		if (!isPrediction) { // added this
			difficultyEventProcessor.newCommand(aCommand); // why play this 
			}
	}
	
	protected void playNestedCommandList() {
		startTimestamp = 0;
		experimentStartTimestamp = 0;
//		for (int index = 0; index < nestedCommandsList.size(); index++) {
		for (int index = 0; continueTopLevelCommandReplay(index, nestedCommandsList); index++) {

			List<EHICommand> commands = nestedCommandsList.get(index);
//			for (int i = 0; i < commands.size(); i++) {
			for (int i = 0; continueSecondLevelCommandReplay(i, commands); i++) {

				EHICommand aCommand = commands.get(i);
				long aCommandTime = aCommand.getTimestamp() + startTimestamp;
				long aDuration = duration(aCommand);
				while (maybeFireWebVisitBefore(aCommandTime));
				
				processStoredCommand(aCommand, aCommandTime, aDuration);

				boolean isPrediction = maybeProcessPrediction(aCommand, aCommandTime, aDuration);
				boolean isCorrection = maybeProcessCorrection(aCommand, aCommandTime, aDuration); //this sets the start time stamp

				if (!isPrediction && !isCorrection) {
					processStoredInputCommand(aCommand, aCommandTime, aDuration);
				}
				if (!DifficultyPredictionSettings.isMakePredictions()) {
					continue;
				}
				// should we replay difficulty corrections since these were stored
				// and thus make sense only if diifculty predictions were wrong
				// they are certainly correct status so perhaps not a bad idea
				// the difficulty predictions certainly should not be replayed since
				// we make new predictions
				if ((aCommand.getTimestamp() == 0)
						&& (aCommand.getTimestamp2() > 0)) { // this is
																// always a
																// difficulty
																// status
																// command
//					startTimeStamp = commands.get(i).getTimestamp2();
//					notifyStartTimeStamp(startTimeStamp);
					maybeForwardCommandToDifficultyEventProcessor(aCommand, isPrediction);
					/*if (!isPrediction) { // added this
					difficultyEventProcessor.newCommand(aCommand); // why play this 
					}*/

//					notifyStartTimeStamp(startTimeStamp);

				} else {
					eventAggregator.setStartTimeStamp(startTimestamp); // not
																		// sure
																		// this
																		// is
																		// ever
																		// useful
					try {
						// pendingPredictionCommands.put(commands.get(i));
						// System.out.println("Put command:" +
						// commands.get(i));
						// difficultyEventProcessor.recordCommand(commands.get(i));
						if (!isPrediction) {
						difficultyEventProcessor.newCommand(aCommand);
						}

						// } catch (InterruptedException e) {
					} catch (Exception e) {

						e.printStackTrace();
					}

					// eventAggregator.getEventAggregationStrategy().performAggregation(commands.get(i),
					// eventAggregator);

				}

			}
		}
	}
		

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#convertXMLLogToObjects(java.lang.String)
	 */
	@Override
	@Visible(false)
	public List<List<EHICommand>> convertXMLLogToObjects(String aFolderName) {

		List<List<EHICommand>> listOfListOFcommands = new Vector<List<EHICommand>>();
		// String fullName = participantsFolder.getText()
		// + aFolderName + "/";
		String fullName = aFolderName;
		File folder = new File(fullName);
		if (!folder.exists()) {
			System.out.println("folder does not exist:" + fullName);
			return listOfListOFcommands;
		}
		if (!folder.isDirectory()) {
			System.out.println("folder not a directory:" + fullName);
			return listOfListOFcommands;
		}
		List<String> participantFiles = MainConsoleUI.getFilesForFolder(folder);
		System.out.println("Particpant " + aFolderName + " has "
				+ participantFiles.size() + " file(s)");
		//Ken's code to recognize student project
		if (fullName.contains("helper-config"+File.separator+"Student Project")) {
			List<String> logFile = new Vector<>();
			for (String string : participantFiles) {
				if (string.endsWith("log.xml")) {
					logFile.add(string);
				}
			}
			participantFiles = logFile;
		} else if (!fullName.contains("ExperimentalData")){
			String largestFileName = "";
			String secondLargestFileName = "";
			for (int i = 0; i < participantFiles.size(); i++) {
				String aFileName = participantFiles.get(i);
				if (aFileName.compareTo(largestFileName) > 0) {
					secondLargestFileName = largestFileName;
					largestFileName = aFileName;
				} else if (aFileName.compareTo(secondLargestFileName) > 0) {
					secondLargestFileName = aFileName;
				}
			}
			participantFiles.remove(largestFileName);
			participantFiles.remove(secondLargestFileName);
		}
		// end ken's code
		
		for (int i = 0; i < participantFiles.size(); i++) {
//			String aFileName = fullName + participantFiles.get(i);
			String aFileName = Paths.get(fullName, participantFiles.get(i)).toString();

			if (!aFileName.endsWith(".xml"))
				continue;

			// List<ICommand> commands = reader.readAll(participantDirectory
			// + participantFiles.get(i));
			System.out.println("Reading " + aFileName);
			// List<ICommand> commands;
			try {
//				List<EHICommand> commands = reader.readAll(aFileName);
				List<EHICommand> commands = reader.readAll(aFileName);

				listOfListOFcommands.add(commands);

			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Could not read file" + aFileName + e);

			}

			// listOfListOFcommands.add(commands);
		}

		return listOfListOFcommands;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#getParameters()
	 */
	@Override
	@Row(1)
	// @Visible(false)
	public AnalyzerParameters getAnalyzerParameters() {
		return parameters;
	}

	// let us do this in the analyzerprocessor
	@Visible(false)
	public static void maybeRecordFeatures(RatioFeatures details) {

		if (!DifficultyPredictionSettings.isNewRatioFiles()
				&& DifficultyPredictionSettings.isRatioFileExists())
			return;
		return;

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#getDifficultyEventProcessor()
	 */
	@Override
	@Visible(false)
	public DifficultyPredictionPluginEventProcessor getDifficultyEventProcessor() {
		return difficultyEventProcessor;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see analyzer.Analyzer#setDifficultyEventProcessor(difficultyPrediction.
	 * DifficultyPredictionPluginEventProcessor)
	 */
	@Override
	@Visible(false)

	public void setDifficultyEventProcessor(
			DifficultyPredictionPluginEventProcessor difficultyEventProcessor) {
		this.difficultyEventProcessor = difficultyEventProcessor;
	}

	@Override
	@Visible(false)
	public void addAnalyzerListener(AnalyzerListener aListener) {
		listeners.add(aListener);
	}

	@Override
	@Visible(false)
	public void removeAnalyzerListener(AnalyzerListener aListener) {
		listeners.remove(aListener);
	}

//	@Override
//	public void notifyNewCorrectStatus(int aStatus) {
//		for (AnalyzerListener aListener : listeners) {
//			aListener.newCorrectStatus(aStatus);
//		}
//	}
	@Override
	@Visible(false)
	public void notifyNewPrediction(PredictionCommand aPredictionCommand, PredictionType aPredictionType, long aStartAbsoluteTime, long aDuration) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newPrediction(aPredictionCommand, aPredictionType, aStartAbsoluteTime, aDuration);
		}
	}
	
	
	
	@Override
	@Visible(false)
	public void notifyNewCorrectStatus(DifficultyCommand difficultyCommand, Status aStatus, long aStartAbsoluteTime, long aDuration) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newCorrectStatus(difficultyCommand, aStatus, aStartAbsoluteTime, aDuration);
		}
	}
	
	@Override
	@Visible(false)
	public void notifyWebVisit(WebVisitCommand aCommand,long aStartAbsoluteTime, long aDuration) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newWebVisit(aCommand, aStartAbsoluteTime, aDuration);
		}		
	}
	
	@Override
	@Visible(false)
	public void notifyNewStoredCommand(EHICommand aCommand,long aStartAbsoluteTime, long aDuration) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newStoredCommand(aCommand, aStartAbsoluteTime, aDuration);
		}		
	}
	
	@Override
	@Visible(false)
	public void notifyNewStoredInputCommand(EHICommand aCommand, long aStartAbsoluteTime, long aDuration) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newStoredInputCommand(aCommand, aStartAbsoluteTime, aDuration);
		}
		
	}
	
	@Override
	@Visible(false)
	public void notifyReplayStarted() {
		for (AnalyzerListener aListener : listeners) {
			aListener.replayStarted();
		}
	}
	
	@Override
	@Visible(false)
	public void notifyReplayFinished() {
		for (AnalyzerListener aListener : listeners) {
			aListener.replayFinished();
		}
	}

	@Override
	@Visible(false)
	public void notifyNewParticipant(String anId, String aFolder) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newParticipant(anId, aFolder);
		}
	}

	@Override
	@Visible(false)
	public void notifyFinishParticipant(String anId, String aFolder) {
		for (AnalyzerListener aListener : listeners) {
			aListener.finishParticipant(anId, aFolder);
		}
	}
	/**
	 * This will be called once for each file in the nested command list
	 */
	@Override
	@Visible(false)
	public void notifyStartTimeStamp(long aStartTimeStamp) {
//		lastStartTimestamp = aStartTimeStamp;
		for (AnalyzerListener aListener : listeners) {
			aListener.startTimestamp(aStartTimeStamp);
		}
	}
	@Override
	@Visible(false)
	public void notifyExperimentStartTimeStamp(long aStartTimeStamp) {
//		lastStartTimestamp = aStartTimeStamp;
		for (AnalyzerListener aListener : listeners) {
			aListener.experimentStartTimestamp(aStartTimeStamp);
		}
	}

	@Override
	@Visible(false)
	public void notifyNewBrowseLine(String aLine) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newBrowseLine(aLine);
			String[] parts = aLine.split("\t");
			String[] dateParts = parts[0].split(" ");
			String dateString = dateParts[0] + " " + dateParts[1];
			Date aDate = new Date(dateString);
			aListener.newBrowseEntries(aDate, parts[1], parts[2]);
		}
	}
	
	/*
	 * Just for compatibility with old scheme in which all lines are fired at the end
	 */
	@Visible(false)
	public void notifyAllWebVisitsInFile() {
		for (String aLine:webVisitsInFile) {
		for (AnalyzerListener aListener : listeners) {
			aListener.newBrowseLine(aLine);
			String[] parts = aLine.split("\t");
			String[] dateParts = parts[0].split(" ");
			String dateString = dateParts[0] + " " + dateParts[1];
			Date aDate = new Date(dateString);
			aListener.newBrowseEntries(aDate, parts[1], parts[2]);
		}
		}
	}
	
	@Visible(false)
	public void notifyAllWebCommandsInFile() {
		for (AnalyzerListener aListener : listeners) {
			aListener.newBrowserCommands(sortedWebVisitCommands);
		}
		
	}
	
protected void fireWebVisitsBefore(long anAbsoluteTimeBefore) {
	while (maybeFireWebVisitBefore(anAbsoluteTimeBefore));
	
}
protected boolean maybeFireWebVisitBefore(long anAbsoluteTimeBefore) {
	if (sortedWebVisitQueue.isEmpty())
		return false;
	WebVisitCommand aCommand= sortedWebVisitQueue.get(0);
	long aTimestamp = aCommand.getTimestamp();
	if (aTimestamp < experimentStartTimestamp) { // spurious command 
		sortedWebVisitQueue.remove(0);
		sortedWebVisitCommands.remove(aCommand);
		System.err.println(new Date(aTimestamp) + "ignoring command before experiment start time"); 
		return false;
	}
	if (aTimestamp< anAbsoluteTimeBefore) {
		maybeFillDurationOfLastWebVisit(aTimestamp);
		notifyWebVisit(aCommand, aTimestamp, duration(aCommand));
		lastWebVisitCommandWithoutDuration = aCommand;
		sortedWebVisitQueue.remove(0);
		return true;
	} else {
		return false;
	}
}
protected WebVisitCommand toWebVisitCommand(String aLine) {
	
	String[] parts = aLine.split("\t");
	String[] dateParts = parts[0].split(" ");
	String dateString = dateParts[0] + " " + dateParts[1];
	Date aDate = new Date(dateString);
	long aTimestamp = aDate.getTime();
	WebVisitCommand aWebVisitCommand = new WebVisitCommand(parts[1], parts[2]);
//	aWebVisitCommand.setTimestamp2(aTimestamp); //absolute tiem
	aWebVisitCommand.setTimestamp(aTimestamp); // absolute Time, should we make it relative?
//	lastWebVisitCommandWithoutDuration = aWebVisitCommand;

	return aWebVisitCommand;
}

	@Visible(false)
	public void notifyFinishedBrowserLines() {
		for (AnalyzerListener aListener : listeners) {
			aListener.finishedBrowserLines();

		}
	}

	static Analyzer instance;

	@Visible(false)
	public static Analyzer getInstance() {
		return AnalyzerFactory.getSingleton();
		// if (instance == null) {
		// instance = new AnAnalyzer();
		// }
		// return instance;
	}

	@Override
	@Visible(false)
	public Map<String, Queue<StuckPoint>> getStuckPointMap() {
		return Collections.unmodifiableMap(stuckPoint);

	}

	@Visible(false)
	public Map<String, Queue<StuckInterval>> getStuckIntervalMap() {
		return Collections.unmodifiableMap(stuckInterval);

	}

	@Override
	@Visible(false)
	public void setOutputSubDirectory(String outputDir) {
		this.outputSubdirectory = outputDir;

	}

	/**
	 * Grab the output directory
	 * 
	 */
	@Override
	@Visible(false)
	public String getOutputDirectory() {
		return this.outputSubdirectory;

	}

	@Override
	@Visible(false)
	public AnalyzerParameters getParameterSelector() {
		return this.parameters;

	}

	@Visible(false)
	public static String convertSecondsToHMmSs(long seconds) {
	    long s = seconds % 60;
	    long m = (seconds / 60) % 60;
	    long h = (seconds / (60 * 60)) % 24;
	    return String.format("%d:%02d:%02d", h,m,s);
	}
	@Visible(false)
	public static String convertMillSecondsToHMmSs(long aMilliSeconds) {
	    return convertSecondsToHMmSs(aMilliSeconds/1000);
	}
	@Visible(false)
	public static long  duration(EHICommand aCommand) {
		return duration (aCommand.getTimestamp(), aCommand.getTimestamp2());
	}
	@Visible(false)
    public static long  duration(long aTimestamp1, long aTimestamp2) {
    	if (aTimestamp2 < aTimestamp1 && aTimestamp2 != 0) {
    		throw new RuntimeException();
    	}
    	return aTimestamp2 == 0?0:aTimestamp2 - aTimestamp1;
	}


	boolean maybeProcessPrediction(EHICommand newCommand, long aStartAbsoluteTime, long aDuration) {
		if (newCommand instanceof PredictionCommand) {
			PredictionCommand aPredictionCommand = (PredictionCommand) newCommand;
			
			lastPrediction = ARatioFileGenerator
					.toInt(aPredictionCommand);
//			System.out.println("Prediction command at time stamp:" + newCommand + " " + newCommand.getTimestamp());
//			notifyNewCorrectStatus(lastPrediction);
			notifyNewPrediction(aPredictionCommand, aPredictionCommand.getPredictionType(), aStartAbsoluteTime, aDuration);
			return true;
		}
		return false;
	}
	
	void maybeFillDurationOfLastWebVisit(long aStartTimeOfNextCommmand) {
		if (lastWebVisitCommandWithoutDuration != null) {
			lastWebVisitCommandWithoutDuration.setTimestamp2(aStartTimeOfNextCommmand); // filling absolute time and not duration but next time stamp
			lastWebVisitCommandWithoutDuration =null;
		}
	}
	
	void processStoredCommand(EHICommand aCommand, long aStartAbsoluteTime, long aDuration) {
		
		notifyNewStoredCommand(aCommand, aStartAbsoluteTime, aDuration);
	}
	
	void processStoredInputCommand(EHICommand aCommand, long aStartAbsoluteTime, long aDuration) {
		maybeFillDurationOfLastWebVisit(aStartAbsoluteTime);
		notifyNewStoredInputCommand(aCommand, aStartAbsoluteTime, aDuration);
	}

	boolean maybeProcessCorrection(EHICommand newCommand, long aStartAbsoluteTime, long aDuration) {
		if (newCommand instanceof DifficultyCommand
		// && ((DifficulyStatusCommand) newCommand).getStatus() != null
		) {
			DifficultyCommand aDifficultyCommand = (DifficultyCommand) newCommand;
			Status aStatus = ((DifficultyCommand) newCommand).getStatus();		
			if (aStatus == Status.Initialization) {
				if (newCommand.getTimestamp() == 0 && newCommand.getTimestamp2() > 0) {
					
					startTimestamp = newCommand.getTimestamp2();
					notifyStartTimeStamp(startTimestamp);
					if (experimentStartTimestamp == 0) {
						experimentStartTimestamp = startTimestamp;
						notifyExperimentStartTimeStamp(experimentStartTimestamp);
					}
				}
				return false;
			}
			lastCorrection = ARatioFileGenerator
					.toInt(aDifficultyCommand);
//			notifyNewCorrectStatus(lastCorrection);			
			notifyNewCorrectStatus(aDifficultyCommand, aDifficultyCommand.getStatus(), aStartAbsoluteTime, aDuration);
			return true;

		}
		return false;
	}
	


	@Override
	public void addPropertyChangeListener(PropertyChangeListener arg0) {
		propertyChangeSupport.addPropertyChangeListener(arg0);

	}
	@Visible(false)
	public static void main(String[] args) {

		// Analyzer analyzer = new AnAnalyzer();
		DifficultyPredictionSettings.setReplayMode(true);

		OEFrame frame = ObjectEditor.edit(AnAnalyzer.getInstance());
		frame.setSize(500, 335);
//		ObjectEditor.edit(AnAnalyzer.getInstance(), 500, 335);

	}

}
]]></snapshot>
  </Command>
  <Command __id="3324" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:21:01 EST 2021" docASTNodeCount="452" docActiveCodeLength="3401" docExpressionCount="274" docLength="3575" projectName="Hermes" starttimestamp="1612813070441" timestamp="6191190">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.HashMap;¶import java.util.Map;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	¶	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; ¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶"), Diff(INSERT,"//"), Diff(EQUAL,"		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"			return "Search Result";¶"), Diff(INSERT,"//"), Diff(EQUAL,"		}¶		return ""), Diff(DELETE,"Link"), Diff(INSERT,"Search Result"), Diff(EQUAL,"";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.HashMap;
import java.util.Map;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class WebCommand extends AbstractCommand implements EHICommand{
	private static final String XML_KEYWORD = "keyword";
	private static final String XML_URL = "URL";
//	private static final String XML_TITLE = "title";
	private static final String XML_TYPE = "type";
	private String keyword, url, type;	
	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",
			"http://zetcode.com/gfx/java2d/shapesandfills/", 
			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", 
			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", 
			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", 
			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", 
			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", 
			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; 

	public WebCommand() {}
	
	public WebCommand(String keyword, String url) {
		this.keyword = keyword;
		this.url = url;
		//this.title = title;
		type = getType();
	}
	
	private String getType() {
		for (String providedURL : PROVIDED_URL) {
			if (url.equals(providedURL)) {
				return "Instructor Provided Link";
			}
		}
		if (keyword.contains("Google Search")) {
			return "Search";
		}
		if (keyword.contains("Stack Overflow")) {
			return "Stack Overflow";
		}
//		if (keyword.equals(url) && keyword.contains("google.com/url?")) {
//			return "Search Result";
//		}
		return "Search Result";
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_TYPE, type);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new HashMap<String, String>();
		dataMap.put(XML_KEYWORD, keyword);
		dataMap.put(XML_URL, url);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "WebCommand";
	}

	@Override
	public String getName() {
		return "Web";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			keyword = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			type = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			url = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="3326" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:21:02 EST 2021" docASTNodeCount="4820" docActiveCodeLength="27833" docExpressionCount="3306" docLength="29592" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6192511">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			WebCommand lastSearcch = null;¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							if (command.getAttributesMap().get("type").equals("), Diff(DELETE,"anObject"), Diff(INSERT,""Search""), Diff(EQUAL,")) {¶								¶							}¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			WebCommand lastSearcch = null;
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							if (command.getAttributesMap().get("type").equals("Search")) {
								
							}
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3330" _type="Insert" date="Mon Feb 08 16:21:04 EST 2021" docASTNodeCount="4820" docActiveCodeLength="27840" docExpressionCount="3306" docLength="29599" length="7" offset="21462" repeat="7" starttimestamp="1612813070441" timestamp="6194062" timestamp2="6194747">
    <text><![CDATA[Google ]]></text>
  </DocumentChange>
  <DocumentChange __id="3346" _type="Insert" date="Mon Feb 08 16:21:13 EST 2021" docASTNodeCount="4723" docActiveCodeLength="27842" docExpressionCount="3238" docLength="29601" length="2" offset="21490" repeat="2" starttimestamp="1612813070441" timestamp="6202731" timestamp2="6202950">
    <text><![CDATA[re]]></text>
  </DocumentChange>
  <DocumentChange __id="3351" _type="Delete" date="Mon Feb 08 16:21:13 EST 2021" docASTNodeCount="4820" docActiveCodeLength="27840" docExpressionCount="3306" docLength="29599" endLine="602" length="2" offset="21490" repeat="2" startLine="602" starttimestamp="1612813070441" timestamp="6203240" timestamp2="6203359">
    <text><![CDATA[re]]></text>
  </DocumentChange>
  <DocumentChange __id="3353" _type="Insert" date="Mon Feb 08 16:21:21 EST 2021" docASTNodeCount="4723" docActiveCodeLength="27843" docExpressionCount="3238" docLength="29602" length="3" offset="21490" repeat="3" starttimestamp="1612813070441" timestamp="6210559" timestamp2="6210723">
    <text><![CDATA[las]]></text>
  </DocumentChange>
  <DocumentChange __id="3358" _type="Replace" date="Mon Feb 08 16:21:21 EST 2021" docASTNodeCount="4723" docActiveCodeLength="27851" docExpressionCount="3238" docLength="29610" endLine="602" insertionLength="11" int_docASTNodeCount="4820" int_docActiveCodeLength="27840" int_docExpressionCount="3306" int_docLength="29599" length="3" offset="21490" startLine="602" starttimestamp="1612813070441" timestamp="6211429">
    <deletedText><![CDATA[las]]></deletedText>
    <insertedText><![CDATA[lastSearcch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3360" _type="Insert" date="Mon Feb 08 16:21:22 EST 2021" docASTNodeCount="4725" docActiveCodeLength="27858" docExpressionCount="3240" docLength="29617" length="7" offset="21501" repeat="7" starttimestamp="1612813070441" timestamp="6211614" timestamp2="6213494">
    <text><![CDATA[ = comm]]></text>
  </DocumentChange>
  <DocumentChange __id="3374" _type="Replace" date="Mon Feb 08 16:21:24 EST 2021" docASTNodeCount="4725" docActiveCodeLength="27861" docExpressionCount="3240" docLength="29620" endLine="602" insertionLength="7" int_docASTNodeCount="4714" int_docActiveCodeLength="27854" int_docExpressionCount="3234" int_docLength="29613" length="4" offset="21504" startLine="602" starttimestamp="1612813070441" timestamp="6213665">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3376" _type="Insert" date="Mon Feb 08 16:21:24 EST 2021" docASTNodeCount="4824" docActiveCodeLength="27862" docExpressionCount="3309" docLength="29621" length="1" offset="21511" starttimestamp="1612813070441" timestamp="6213874">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3378" _type="Delete" date="Mon Feb 08 16:21:24 EST 2021" docASTNodeCount="4725" docActiveCodeLength="27861" docExpressionCount="3240" docLength="29620" endLine="602" length="1" offset="21511" startLine="602" starttimestamp="1612813070441" timestamp="6214225">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3380" _type="Insert" date="Mon Feb 08 16:21:25 EST 2021" docASTNodeCount="4824" docActiveCodeLength="27862" docExpressionCount="3309" docLength="29621" length="1" offset="21511" starttimestamp="1612813070441" timestamp="6214591">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3385" _type="Replace" date="Mon Feb 08 16:21:31 EST 2021" docASTNodeCount="4824" docActiveCodeLength="27853" docExpressionCount="3309" docLength="29612" endLine="594" insertionLength="1" int_docASTNodeCount="4822" int_docActiveCodeLength="27852" int_docExpressionCount="3309" int_docLength="29611" length="10" offset="21026" startLine="594" starttimestamp="1612813070441" timestamp="6220607">
    <deletedText><![CDATA[WebCommand]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3389" _type="Insert" date="Mon Feb 08 16:21:31 EST 2021" docASTNodeCount="4824" docActiveCodeLength="27855" docExpressionCount="3309" docLength="29614" length="2" offset="21027" repeat="2" starttimestamp="1612813070441" timestamp="6220850" timestamp2="6220862">
    <text><![CDATA[hi]]></text>
  </DocumentChange>
  <Command __id="3386" _type="PauseCommand" date="Mon Feb 08 16:21:31 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6220607">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1501]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3387" _type="InsertStringCommand" date="Mon Feb 08 16:21:31 EST 2021" starttimestamp="1612813070441" timestamp="6220622" timestamp2="6220622">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3388" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:21:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6220653" />
  <Command __id="3391" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:21:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6221480" />
  <Command __id="3393" _type="InsertStringCommand" date="Mon Feb 08 16:21:31 EST 2021" starttimestamp="1612813070441" timestamp="6221495" timestamp2="6221495">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3395" _type="PauseCommand" date="Mon Feb 08 16:21:33 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6223328">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1833]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3394" _type="MoveCaretCommand" caretOffset="1570" date="Mon Feb 08 16:21:33 EST 2021" docOffset="21512" starttimestamp="1612813070441" timestamp="6223328" />
  <Command __id="3397" _type="PauseCommand" date="Mon Feb 08 16:21:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6224508">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1180]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3396" _type="MoveCaretCommand" caretOffset="1580" date="Mon Feb 08 16:21:34 EST 2021" docOffset="21522" starttimestamp="1612813070441" timestamp="6224508" />
  <Command __id="3399" _type="PauseCommand" date="Mon Feb 08 16:21:45 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6235272">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[10764]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3398" _type="MoveCaretCommand" caretOffset="1570" date="Mon Feb 08 16:21:45 EST 2021" docOffset="21512" starttimestamp="1612813070441" timestamp="6235272" />
  <Command __id="3400" _type="MoveCaretCommand" caretOffset="1580" date="Mon Feb 08 16:21:46 EST 2021" docOffset="21522" starttimestamp="1612813070441" timestamp="6235671" />
  <Command __id="3402" _type="PauseCommand" date="Mon Feb 08 16:21:48 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6238048">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2377]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3401" _type="MoveCaretCommand" caretOffset="1740" date="Mon Feb 08 16:21:48 EST 2021" docOffset="21682" starttimestamp="1612813070441" timestamp="6238048" />
  <Command __id="3404" _type="PauseCommand" date="Mon Feb 08 16:21:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6239534">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1486]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3403" _type="MoveCaretCommand" caretOffset="1580" date="Mon Feb 08 16:21:49 EST 2021" docOffset="21522" starttimestamp="1612813070441" timestamp="6239534" />
  <Command __id="3406" _type="PauseCommand" date="Mon Feb 08 16:21:52 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6242437">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2903]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3405" _type="MoveCaretCommand" caretOffset="1114" date="Mon Feb 08 16:21:52 EST 2021" docOffset="21056" starttimestamp="1612813070441" timestamp="6242437" />
  <Command __id="3407" _type="MoveCaretCommand" caretOffset="1079" date="Mon Feb 08 16:21:53 EST 2021" docOffset="21021" starttimestamp="1612813070441" timestamp="6242852" />
  <Command __id="3409" _type="PauseCommand" date="Mon Feb 08 16:21:54 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6244044">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1192]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3410" _type="InsertStringCommand" date="Mon Feb 08 16:21:54 EST 2021" starttimestamp="1612813070441" timestamp="6244055" timestamp2="6244055">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3412" _type="InsertStringCommand" date="Mon Feb 08 16:21:54 EST 2021" starttimestamp="1612813070441" timestamp="6244333" timestamp2="6244333">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3413" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:21:54 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6244368" />
  <Command __id="3417" _type="PauseCommand" date="Mon Feb 08 16:21:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6245854">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1307]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3416" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:21:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6245854" />
  <Command __id="3419" _type="InsertStringCommand" date="Mon Feb 08 16:21:56 EST 2021" starttimestamp="1612813070441" timestamp="6245896" timestamp2="6245896">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3421" _type="InsertStringCommand" date="Mon Feb 08 16:21:57 EST 2021" starttimestamp="1612813070441" timestamp="6246777" timestamp2="6246777">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3422" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:21:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6246873" />
  <Command __id="3425" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:21:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6247185" />
  <Command __id="3427" _type="InsertStringCommand" date="Mon Feb 08 16:21:57 EST 2021" starttimestamp="1612813070441" timestamp="6247201" timestamp2="6247201">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3428" _type="InsertStringCommand" date="Mon Feb 08 16:21:57 EST 2021" starttimestamp="1612813070441" timestamp="6247360" timestamp2="6247360">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="3430" _type="PauseCommand" date="Mon Feb 08 16:21:59 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6248627">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1267]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3431" _type="InsertStringCommand" date="Mon Feb 08 16:21:59 EST 2021" starttimestamp="1612813070441" timestamp="6248634" timestamp2="6248634">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3432" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:21:59 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6248721" />
  <Command __id="3435" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:21:59 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6249112" />
  <Command __id="3437" _type="InsertStringCommand" date="Mon Feb 08 16:21:59 EST 2021" starttimestamp="1612813070441" timestamp="6249126" timestamp2="6249126">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3438" _type="InsertStringCommand" date="Mon Feb 08 16:21:59 EST 2021" starttimestamp="1612813070441" timestamp="6249220" timestamp2="6249220">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="3440" _type="InsertStringCommand" date="Mon Feb 08 16:22:00 EST 2021" starttimestamp="1612813070441" timestamp="6249943" timestamp2="6249943">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3442" _type="PauseCommand" date="Mon Feb 08 16:22:01 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6251127">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1184]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3443" _type="InsertStringCommand" date="Mon Feb 08 16:22:01 EST 2021" starttimestamp="1612813070441" timestamp="6251132" timestamp2="6251132">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="3445" _type="InsertStringCommand" date="Mon Feb 08 16:22:01 EST 2021" starttimestamp="1612813070441" timestamp="6251223" timestamp2="6251223">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3446" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:01 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6251266" />
  <Command __id="3448" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:01 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6251386" />
  <Command __id="3450" _type="InsertStringCommand" date="Mon Feb 08 16:22:02 EST 2021" starttimestamp="1612813070441" timestamp="6251926" timestamp2="6251926">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3452" _type="InsertStringCommand" date="Mon Feb 08 16:22:02 EST 2021" starttimestamp="1612813070441" timestamp="6252021" timestamp2="6252021">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3453" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6252113" />
  <Command __id="3454" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:02 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6252140" />
  <Command __id="3456" _type="InsertStringCommand" date="Mon Feb 08 16:22:02 EST 2021" starttimestamp="1612813070441" timestamp="6252149" timestamp2="6252149">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3457" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6252242" />
  <Command __id="3458" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:02 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6252270" />
  <Command __id="3460" _type="InsertStringCommand" date="Mon Feb 08 16:22:02 EST 2021" starttimestamp="1612813070441" timestamp="6252385" timestamp2="6252385">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3461" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6252471" />
  <Command __id="3462" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:02 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6252498" />
  <Command __id="3464" _type="PauseCommand" date="Mon Feb 08 16:22:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6253550">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1052]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3465" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:04 EST 2021" starttimestamp="1612813070441" timestamp="6253562" />
  <Command __id="3467" _type="InsertStringCommand" date="Mon Feb 08 16:22:04 EST 2021" starttimestamp="1612813070441" timestamp="6253810" timestamp2="6253810">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3468" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6253902" />
  <Command __id="3470" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6254005" />
  <Command __id="3472" _type="InsertStringCommand" date="Mon Feb 08 16:22:04 EST 2021" starttimestamp="1612813070441" timestamp="6254073" timestamp2="6254073">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3474" _type="InsertStringCommand" date="Mon Feb 08 16:22:04 EST 2021" starttimestamp="1612813070441" timestamp="6254130" timestamp2="6254130">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3475" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6254223" />
  <Command __id="3476" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6254248" />
  <Command __id="3478" _type="InsertStringCommand" date="Mon Feb 08 16:22:04 EST 2021" starttimestamp="1612813070441" timestamp="6254359" timestamp2="6254359">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3480" _type="InsertStringCommand" date="Mon Feb 08 16:22:04 EST 2021" starttimestamp="1612813070441" timestamp="6254454" timestamp2="6254454">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3481" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6254548" />
  <Command __id="3482" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6254575" />
  <Command __id="3484" _type="InsertStringCommand" date="Mon Feb 08 16:22:05 EST 2021" starttimestamp="1612813070441" timestamp="6255261" timestamp2="6255261">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="3486" _type="InsertStringCommand" date="Mon Feb 08 16:22:05 EST 2021" starttimestamp="1612813070441" timestamp="6255382" timestamp2="6255382">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3488" _type="InsertStringCommand" date="Mon Feb 08 16:22:05 EST 2021" starttimestamp="1612813070441" timestamp="6255472" timestamp2="6255472">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3489" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6255566" />
  <Command __id="3490" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6255593" />
  <Command __id="3492" _type="InsertStringCommand" date="Mon Feb 08 16:22:06 EST 2021" starttimestamp="1612813070441" timestamp="6255663" timestamp2="6255663">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3494" _type="InsertStringCommand" date="Mon Feb 08 16:22:06 EST 2021" starttimestamp="1612813070441" timestamp="6255694" timestamp2="6255694">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3496" _type="InsertStringCommand" date="Mon Feb 08 16:22:06 EST 2021" starttimestamp="1612813070441" timestamp="6255707" timestamp2="6255707">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3497" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6255749" />
  <Command __id="3498" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6255776" />
  <Command __id="3500" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:06 EST 2021" starttimestamp="1612813070441" timestamp="6256266" />
  <Command __id="3502" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:06 EST 2021" starttimestamp="1612813070441" timestamp="6256420" />
  <Command __id="3504" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:07 EST 2021" starttimestamp="1612813070441" timestamp="6256576" />
  <Command __id="3506" _type="InsertStringCommand" date="Mon Feb 08 16:22:07 EST 2021" starttimestamp="1612813070441" timestamp="6257047" timestamp2="6257047">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3507" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:07 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6257139" />
  <Command __id="3508" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:07 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6257168" />
  <Command __id="3510" _type="InsertStringCommand" date="Mon Feb 08 16:22:08 EST 2021" starttimestamp="1612813070441" timestamp="6257651" timestamp2="6257651">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3512" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:08 EST 2021" starttimestamp="1612813070441" timestamp="6257983" />
  <Command __id="3514" _type="InsertStringCommand" date="Mon Feb 08 16:22:08 EST 2021" starttimestamp="1612813070441" timestamp="6258069" timestamp2="6258069">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3516" _type="InsertStringCommand" date="Mon Feb 08 16:22:08 EST 2021" starttimestamp="1612813070441" timestamp="6258168" timestamp2="6258168">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3518" _type="InsertStringCommand" date="Mon Feb 08 16:22:08 EST 2021" starttimestamp="1612813070441" timestamp="6258292" timestamp2="6258292">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3520" _type="InsertStringCommand" date="Mon Feb 08 16:22:08 EST 2021" starttimestamp="1612813070441" timestamp="6258380" timestamp2="6258380">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3522" _type="PauseCommand" date="Mon Feb 08 16:22:09 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6259430">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1050]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3523" _type="InsertStringCommand" date="Mon Feb 08 16:22:09 EST 2021" starttimestamp="1612813070441" timestamp="6259436" timestamp2="6259436">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3525" _type="InsertStringCommand" date="Mon Feb 08 16:22:09 EST 2021" starttimestamp="1612813070441" timestamp="6259454" timestamp2="6259454">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3527" _type="InsertStringCommand" date="Mon Feb 08 16:22:09 EST 2021" starttimestamp="1612813070441" timestamp="6259538" timestamp2="6259538">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3529" _type="InsertStringCommand" date="Mon Feb 08 16:22:10 EST 2021" starttimestamp="1612813070441" timestamp="6259605" timestamp2="6259605">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3531" _type="InsertStringCommand" date="Mon Feb 08 16:22:10 EST 2021" starttimestamp="1612813070441" timestamp="6259779" timestamp2="6259779">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3533" _type="InsertStringCommand" date="Mon Feb 08 16:22:10 EST 2021" starttimestamp="1612813070441" timestamp="6259814" timestamp2="6259814">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3535" _type="InsertStringCommand" date="Mon Feb 08 16:22:10 EST 2021" starttimestamp="1612813070441" timestamp="6259908" timestamp2="6259908">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3537" _type="InsertStringCommand" date="Mon Feb 08 16:22:10 EST 2021" starttimestamp="1612813070441" timestamp="6259982" timestamp2="6259982">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3538" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:10 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6260025" />
  <Command __id="3539" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:10 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6260195" />
  <Command __id="3542" _type="InsertStringCommand" date="Mon Feb 08 16:22:10 EST 2021" starttimestamp="1612813070441" timestamp="6260230" timestamp2="6260230">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3544" _type="InsertStringCommand" date="Mon Feb 08 16:22:10 EST 2021" starttimestamp="1612813070441" timestamp="6260344" timestamp2="6260344">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="3392" _type="Replace" date="Mon Feb 08 16:21:31 EST 2021" docASTNodeCount="4824" docActiveCodeLength="27862" docExpressionCount="3309" docLength="29621" endLine="594" insertionLength="10" int_docASTNodeCount="4822" int_docActiveCodeLength="27852" int_docExpressionCount="3309" int_docLength="29611" length="3" offset="21026" startLine="594" starttimestamp="1612813070441" timestamp="6221485">
    <deletedText><![CDATA[ehi]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3408" _type="Insert" date="Mon Feb 08 16:21:54 EST 2021" docASTNodeCount="4728" docActiveCodeLength="27870" docExpressionCount="3242" docLength="29629" length="8" offset="21021" repeat="4" starttimestamp="1612813070441" timestamp="6244044" timestamp2="6244547">
    <text><![CDATA[
			map]]></text>
  </DocumentChange>
  <DocumentChange __id="3418" _type="Replace" date="Mon Feb 08 16:21:56 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27876" docExpressionCount="3244" docLength="29635" endLine="594" insertionLength="9" int_docASTNodeCount="4824" int_docActiveCodeLength="27867" int_docExpressionCount="3309" int_docLength="29626" length="3" offset="21026" startLine="594" starttimestamp="1612813070441" timestamp="6245861">
    <deletedText><![CDATA[map]]></deletedText>
    <insertedText><![CDATA[Map<K, V>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3420" _type="Replace" date="Mon Feb 08 16:21:57 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27876" docExpressionCount="3244" docLength="29635" endLine="594" insertionLength="1" int_docASTNodeCount="4731" int_docActiveCodeLength="27875" int_docExpressionCount="3243" int_docLength="29634" length="1" offset="21030" startLine="594" starttimestamp="1612813070441" timestamp="6246771">
    <deletedText><![CDATA[K]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3423" _type="Insert" date="Mon Feb 08 16:21:57 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27878" docExpressionCount="3244" docLength="29637" length="2" offset="21031" repeat="2" starttimestamp="1612813070441" timestamp="6247065" timestamp2="6247111">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="3426" _type="Replace" date="Mon Feb 08 16:21:57 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27881" docExpressionCount="3244" docLength="29640" endLine="594" insertionLength="6" int_docASTNodeCount="4731" int_docActiveCodeLength="27875" int_docExpressionCount="3243" int_docLength="29634" length="3" offset="21030" startLine="594" starttimestamp="1612813070441" timestamp="6247192">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3429" _type="Replace" date="Mon Feb 08 16:21:59 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27881" docExpressionCount="3244" docLength="29640" endLine="594" insertionLength="1" int_docASTNodeCount="4600" int_docActiveCodeLength="27880" int_docExpressionCount="3156" int_docLength="29639" length="1" offset="21038" startLine="594" starttimestamp="1612813070441" timestamp="6248627">
    <deletedText><![CDATA[V]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3433" _type="Insert" date="Mon Feb 08 16:21:59 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27883" docExpressionCount="3244" docLength="29642" length="2" offset="21039" repeat="2" starttimestamp="1612813070441" timestamp="6248916" timestamp2="6248962">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="3436" _type="Replace" date="Mon Feb 08 16:21:59 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27886" docExpressionCount="3244" docLength="29645" endLine="594" insertionLength="6" int_docASTNodeCount="4600" int_docActiveCodeLength="27880" int_docExpressionCount="3156" int_docLength="29639" length="3" offset="21038" startLine="594" starttimestamp="1612813070441" timestamp="6249119">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3439" _type="Insert" date="Mon Feb 08 16:22:00 EST 2021" docASTNodeCount="4735" docActiveCodeLength="27894" docExpressionCount="3244" docLength="29653" length="8" offset="21045" repeat="8" starttimestamp="1612813070441" timestamp="6249936" timestamp2="6252380">
    <text><![CDATA[ keyword]]></text>
  </DocumentChange>
  <DocumentChange __id="3463" _type="Delete" date="Mon Feb 08 16:22:03 EST 2021" docASTNodeCount="4733" docActiveCodeLength="27887" docExpressionCount="3244" docLength="29646" endLine="594" length="7" offset="21046" startLine="594" starttimestamp="1612813070441" timestamp="6253550">
    <text><![CDATA[keyword]]></text>
  </DocumentChange>
  <DocumentChange __id="3466" _type="Insert" date="Mon Feb 08 16:22:04 EST 2021" docASTNodeCount="4735" docActiveCodeLength="27899" docExpressionCount="3244" docLength="29658" length="12" offset="21046" repeat="12" starttimestamp="1612813070441" timestamp="6253805" timestamp2="6255702">
    <text><![CDATA[searchWordcs]]></text>
  </DocumentChange>
  <DocumentChange __id="3499" _type="Delete" date="Mon Feb 08 16:22:06 EST 2021" docASTNodeCount="4735" docActiveCodeLength="27896" docExpressionCount="3244" docLength="29655" endLine="594" length="3" offset="21055" repeat="3" startLine="594" starttimestamp="1612813070441" timestamp="6256264" timestamp2="6256573">
    <text><![CDATA[dcs]]></text>
  </DocumentChange>
  <DocumentChange __id="3505" _type="Insert" date="Mon Feb 08 16:22:07 EST 2021" docASTNodeCount="4735" docActiveCodeLength="27898" docExpressionCount="3244" docLength="29657" length="2" offset="21055" repeat="2" starttimestamp="1612813070441" timestamp="6257042" timestamp2="6257646">
    <text><![CDATA[d ]]></text>
  </DocumentChange>
  <DocumentChange __id="3511" _type="Delete" date="Mon Feb 08 16:22:08 EST 2021" docASTNodeCount="4735" docActiveCodeLength="27897" docExpressionCount="3244" docLength="29656" endLine="594" length="1" offset="21056" startLine="594" starttimestamp="1612813070441" timestamp="6257980">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3513" _type="Insert" date="Mon Feb 08 16:22:08 EST 2021" docASTNodeCount="4738" docActiveCodeLength="27909" docExpressionCount="3246" docLength="29668" length="12" offset="21056" repeat="12" starttimestamp="1612813070441" timestamp="6258064" timestamp2="6259979">
    <text><![CDATA[s = new hash]]></text>
  </DocumentChange>
  <DocumentChange __id="3540" _type="Replace" date="Mon Feb 08 16:22:10 EST 2021" docASTNodeCount="4739" docActiveCodeLength="27914" docExpressionCount="3246" docLength="29673" endLine="594" insertionLength="9" int_docASTNodeCount="4736" int_docActiveCodeLength="27905" int_docExpressionCount="3246" int_docLength="29664" length="4" offset="21064" startLine="594" starttimestamp="1612813070441" timestamp="6260212">
    <deletedText><![CDATA[hash]]></deletedText>
    <insertedText><![CDATA[HashMap<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3541" _type="Insert" date="Mon Feb 08 16:22:10 EST 2021" docASTNodeCount="4838" docActiveCodeLength="27917" docExpressionCount="3315" docLength="29676" length="3" offset="21073" repeat="2" starttimestamp="1612813070441" timestamp="6260225" timestamp2="6260336">
    <text><![CDATA[();]]></text>
  </DocumentChange>
  <DocumentChange __id="3548" _type="Insert" date="Mon Feb 08 16:22:13 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27924" docExpressionCount="3249" docLength="29683" length="7" offset="21577" repeat="7" starttimestamp="1612813070441" timestamp="6263038" timestamp2="6264124">
    <text><![CDATA[ else P]]></text>
  </DocumentChange>
  <DocumentChange __id="3560" _type="Delete" date="Mon Feb 08 16:22:14 EST 2021" docASTNodeCount="4838" docActiveCodeLength="27918" docExpressionCount="3315" docLength="29677" endLine="604" length="6" offset="21578" repeat="2" startLine="604" starttimestamp="1612813070441" timestamp="6264524" timestamp2="6264959">
    <text><![CDATA[else P]]></text>
  </DocumentChange>
  <DocumentChange __id="3564" _type="Insert" date="Mon Feb 08 16:22:16 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27930" docExpressionCount="3247" docLength="29689" length="12" offset="21578" repeat="4" starttimestamp="1612813070441" timestamp="6265660" timestamp2="6266066">
    <text><![CDATA[
							iof]]></text>
  </DocumentChange>
  <DocumentChange __id="3573" _type="Replace" date="Mon Feb 08 16:22:16 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27939" docExpressionCount="3247" docLength="29698" endLine="605" insertionLength="12" int_docASTNodeCount="4838" int_docActiveCodeLength="27927" int_docExpressionCount="3315" int_docLength="29686" length="3" offset="21587" startLine="605" starttimestamp="1612813070441" timestamp="6266112">
    <deletedText><![CDATA[iof]]></deletedText>
    <insertedText><![CDATA[IORFactories]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3574" _type="Delete" date="Mon Feb 08 16:22:16 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27937" docExpressionCount="3247" docLength="29696" endLine="18" length="2" offset="490" startLine="17" starttimestamp="1612813070441" timestamp="6266132">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="3575" _type="Insert" date="Mon Feb 08 16:22:16 EST 2021" docASTNodeCount="4757" docActiveCodeLength="27990" docExpressionCount="3260" docLength="29749" length="53" offset="490" repeat="3" starttimestamp="1612813070441" timestamp="6266135" timestamp2="6266142">
    <text><![CDATA[

import com.sun.corba.se.spi.ior.IORFactories;

]]></text>
  </DocumentChange>
  <Command __id="3546" _type="PauseCommand" date="Mon Feb 08 16:22:13 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6262675">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2331]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3545" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:13 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6262675" />
  <Command __id="3547" _type="MoveCaretCommand" caretOffset="1635" date="Mon Feb 08 16:22:13 EST 2021" docOffset="21577" starttimestamp="1612813070441" timestamp="6262757" />
  <Command __id="3549" _type="InsertStringCommand" date="Mon Feb 08 16:22:13 EST 2021" starttimestamp="1612813070441" timestamp="6263046" timestamp2="6263046">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3551" _type="InsertStringCommand" date="Mon Feb 08 16:22:13 EST 2021" starttimestamp="1612813070441" timestamp="6263456" timestamp2="6263456">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3552" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6263500" />
  <Command __id="3557" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6263779" />
  <Command __id="3559" _type="InsertStringCommand" date="Mon Feb 08 16:22:14 EST 2021" starttimestamp="1612813070441" timestamp="6264129" timestamp2="6264129">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:14 EST 2021" starttimestamp="1612813070441" timestamp="6264527" />
  <Command __id="3563" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:15 EST 2021" starttimestamp="1612813070441" timestamp="6264963" />
  <Command __id="3565" _type="InsertStringCommand" date="Mon Feb 08 16:22:16 EST 2021" starttimestamp="1612813070441" timestamp="6265670" timestamp2="6265670">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3567" _type="InsertStringCommand" date="Mon Feb 08 16:22:16 EST 2021" starttimestamp="1612813070441" timestamp="6265864" timestamp2="6265864">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3569" _type="InsertStringCommand" date="Mon Feb 08 16:22:16 EST 2021" starttimestamp="1612813070441" timestamp="6265885" timestamp2="6265885">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3570" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:16 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6265925" />
  <Command __id="3572" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:16 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6266106" />
  <Command __id="3578" _type="InsertStringCommand" date="Mon Feb 08 16:22:16 EST 2021" starttimestamp="1612813070441" timestamp="6266150" timestamp2="6266150">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3580" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:16 EST 2021" starttimestamp="1612813070441" timestamp="6266386" />
  <Command __id="3582" _type="UndoCommand" date="Mon Feb 08 16:22:17 EST 2021" starttimestamp="1612813070441" timestamp="6266764" />
  <Command __id="3588" _type="UndoCommand" date="Mon Feb 08 16:22:17 EST 2021" starttimestamp="1612813070441" timestamp="6267013" />
  <Command __id="3590" _type="InsertStringCommand" date="Mon Feb 08 16:22:18 EST 2021" starttimestamp="1612813070441" timestamp="6267588" timestamp2="6267588">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3591" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6267627" />
  <Command __id="3593" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6267843" />
  <Command __id="3595" _type="InsertStringCommand" date="Mon Feb 08 16:22:18 EST 2021" starttimestamp="1612813070441" timestamp="6267949" timestamp2="6267949">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3597" _type="InsertStringCommand" date="Mon Feb 08 16:22:18 EST 2021" starttimestamp="1612813070441" timestamp="6268364" timestamp2="6268364">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3598" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6268403" />
  <Command __id="3602" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6268910" />
  <Command __id="3604" _type="InsertStringCommand" date="Mon Feb 08 16:22:19 EST 2021" starttimestamp="1612813070441" timestamp="6268922" timestamp2="6268922">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3606" _type="InsertStringCommand" date="Mon Feb 08 16:22:19 EST 2021" starttimestamp="1612813070441" timestamp="6269118" timestamp2="6269118">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3607" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6269161" />
  <Command __id="3611" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6269705" />
  <Command __id="3613" _type="InsertStringCommand" date="Mon Feb 08 16:22:20 EST 2021" starttimestamp="1612813070441" timestamp="6269719" timestamp2="6269719">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3615" _type="InsertStringCommand" date="Mon Feb 08 16:22:21 EST 2021" starttimestamp="1612813070441" timestamp="6270635" timestamp2="6270635">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3616" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6270678" />
  <Command __id="3620" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6271152" />
  <Command __id="3622" _type="InsertStringCommand" date="Mon Feb 08 16:22:21 EST 2021" starttimestamp="1612813070441" timestamp="6271280" timestamp2="6271280">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3579" _type="Delete" date="Mon Feb 08 16:22:16 EST 2021" docASTNodeCount="4757" docActiveCodeLength="27989" docExpressionCount="3260" docLength="29748" endLine="608" length="1" offset="21649" startLine="608" starttimestamp="1612813070441" timestamp="6266382">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="3581" _type="Insert" date="Mon Feb 08 16:22:17 EST 2021" docASTNodeCount="4757" docActiveCodeLength="27990" docExpressionCount="3260" docLength="29749" length="1" offset="21649" starttimestamp="1612813070441" timestamp="6266760">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="3583" _type="Delete" date="Mon Feb 08 16:22:17 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27937" docExpressionCount="3247" docLength="29696" endLine="21" length="53" offset="490" repeat="3" startLine="17" starttimestamp="1612813070441" timestamp="6266972" timestamp2="6266978">
    <text><![CDATA[

import com.sun.corba.se.spi.ior.IORFactories;

]]></text>
  </DocumentChange>
  <DocumentChange __id="3586" _type="Insert" date="Mon Feb 08 16:22:17 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27939" docExpressionCount="3247" docLength="29698" length="2" offset="490" starttimestamp="1612813070441" timestamp="6266981">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="3587" _type="Replace" date="Mon Feb 08 16:22:17 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27930" docExpressionCount="3247" docLength="29689" endLine="605" insertionLength="3" int_docASTNodeCount="4838" int_docActiveCodeLength="27927" int_docExpressionCount="3315" int_docLength="29686" length="12" offset="21587" startLine="605" starttimestamp="1612813070441" timestamp="6266987">
    <deletedText><![CDATA[IORFactories]]></deletedText>
    <insertedText><![CDATA[iof]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3589" _type="Replace" date="Mon Feb 08 16:22:18 EST 2021" docASTNodeCount="4743" docActiveCodeLength="27928" docExpressionCount="3247" docLength="29687" endLine="605" insertionLength="1" int_docASTNodeCount="4838" int_docActiveCodeLength="27927" int_docExpressionCount="3315" int_docLength="29686" length="3" offset="21587" startLine="605" starttimestamp="1612813070441" timestamp="6267582">
    <deletedText><![CDATA[iof]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3592" _type="Insert" date="Mon Feb 08 16:22:18 EST 2021" docASTNodeCount="4739" docActiveCodeLength="27929" docExpressionCount="3246" docLength="29688" length="1" offset="21588" starttimestamp="1612813070441" timestamp="6267820">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="3594" _type="Replace" date="Mon Feb 08 16:22:18 EST 2021" docASTNodeCount="4841" docActiveCodeLength="27976" docExpressionCount="3316" docLength="29735" endLine="605" insertionLength="49" int_docASTNodeCount="4838" int_docActiveCodeLength="27927" int_docExpressionCount="3315" int_docLength="29686" length="2" offset="21587" startLine="605" starttimestamp="1612813070441" timestamp="6267867">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
								
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3596" _type="Replace" date="Mon Feb 08 16:22:18 EST 2021" docASTNodeCount="4841" docActiveCodeLength="27955" docExpressionCount="3316" docLength="29714" endLine="605" insertionLength="1" int_docASTNodeCount="4742" int_docActiveCodeLength="27954" int_docExpressionCount="3247" int_docLength="29713" length="22" offset="21591" startLine="605" starttimestamp="1612813070441" timestamp="6268358">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3599" _type="Insert" date="Mon Feb 08 16:22:19 EST 2021" docASTNodeCount="4841" docActiveCodeLength="27958" docExpressionCount="3316" docLength="29717" length="3" offset="21592" repeat="3" starttimestamp="1612813070441" timestamp="6268628" timestamp2="6268735">
    <text><![CDATA[omm]]></text>
  </DocumentChange>
  <DocumentChange __id="3603" _type="Replace" date="Mon Feb 08 16:22:19 EST 2021" docASTNodeCount="4841" docActiveCodeLength="27961" docExpressionCount="3316" docLength="29720" endLine="605" insertionLength="7" int_docASTNodeCount="4742" int_docActiveCodeLength="27954" int_docExpressionCount="3247" int_docLength="29713" length="4" offset="21591" startLine="605" starttimestamp="1612813070441" timestamp="6268916">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3605" _type="Insert" date="Mon Feb 08 16:22:19 EST 2021" docASTNodeCount="4843" docActiveCodeLength="27965" docExpressionCount="3318" docLength="29724" length="4" offset="21598" repeat="4" starttimestamp="1612813070441" timestamp="6269116" timestamp2="6269469">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="3612" _type="Replace" date="Mon Feb 08 16:22:20 EST 2021" docASTNodeCount="4843" docActiveCodeLength="27980" docExpressionCount="3318" docLength="29739" endLine="605" insertionLength="18" int_docASTNodeCount="4744" int_docActiveCodeLength="27962" int_docExpressionCount="3248" int_docLength="29721" length="3" offset="21599" startLine="605" starttimestamp="1612813070441" timestamp="6269712">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getAttributesMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3614" _type="Insert" date="Mon Feb 08 16:22:21 EST 2021" docASTNodeCount="4845" docActiveCodeLength="27984" docExpressionCount="3320" docLength="29743" length="4" offset="21617" repeat="4" starttimestamp="1612813070441" timestamp="6270633" timestamp2="6271038">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="3621" _type="Replace" date="Mon Feb 08 16:22:21 EST 2021" docASTNodeCount="4846" docActiveCodeLength="27989" docExpressionCount="3321" docLength="29748" endLine="605" insertionLength="8" int_docASTNodeCount="4746" int_docActiveCodeLength="27981" int_docExpressionCount="3251" int_docLength="29740" length="3" offset="21618" startLine="605" starttimestamp="1612813070441" timestamp="6271158">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3623" _type="Replace" date="Mon Feb 08 16:22:22 EST 2021" docASTNodeCount="4523" docActiveCodeLength="27987" docExpressionCount="3109" docLength="29746" endLine="605" insertionLength="1" int_docASTNodeCount="4845" int_docActiveCodeLength="27986" int_docExpressionCount="3320" int_docLength="29745" length="3" offset="21622" startLine="605" starttimestamp="1612813070441" timestamp="6272320">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3626" _type="Insert" date="Mon Feb 08 16:22:22 EST 2021" docASTNodeCount="4523" docActiveCodeLength="27991" docExpressionCount="3109" docLength="29750" length="4" offset="21623" repeat="4" starttimestamp="1612813070441" timestamp="6272536" timestamp2="6272864">
    <text><![CDATA[tyoe]]></text>
  </DocumentChange>
  <DocumentChange __id="3634" _type="Delete" date="Mon Feb 08 16:22:23 EST 2021" docASTNodeCount="4523" docActiveCodeLength="27989" docExpressionCount="3109" docLength="29748" endLine="605" length="2" offset="21625" repeat="2" startLine="605" starttimestamp="1612813070441" timestamp="6273242" timestamp2="6273340">
    <text><![CDATA[oe]]></text>
  </DocumentChange>
  <DocumentChange __id="3638" _type="Insert" date="Mon Feb 08 16:22:24 EST 2021" docASTNodeCount="4846" docActiveCodeLength="27992" docExpressionCount="3321" docLength="29751" length="3" offset="21625" repeat="3" starttimestamp="1612813070441" timestamp="6273834" timestamp2="6274638">
    <text><![CDATA[pe"]]></text>
  </DocumentChange>
  <DocumentChange __id="3645" _type="Insert" date="Mon Feb 08 16:22:26 EST 2021" docASTNodeCount="4747" docActiveCodeLength="27993" docExpressionCount="3252" docLength="29752" length="1" offset="21629" starttimestamp="1612813070441" timestamp="6275561">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="3647" _type="Delete" date="Mon Feb 08 16:22:26 EST 2021" docASTNodeCount="4846" docActiveCodeLength="27992" docExpressionCount="3321" docLength="29751" endLine="605" length="1" offset="21629" startLine="605" starttimestamp="1612813070441" timestamp="6276106">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="3649" _type="Insert" date="Mon Feb 08 16:22:26 EST 2021" docASTNodeCount="4848" docActiveCodeLength="27995" docExpressionCount="3323" docLength="29754" length="3" offset="21629" repeat="3" starttimestamp="1612813070441" timestamp="6276354" timestamp2="6276871">
    <text><![CDATA[.eq]]></text>
  </DocumentChange>
  <DocumentChange __id="3655" _type="Replace" date="Mon Feb 08 16:22:27 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28009" docExpressionCount="3324" docLength="29768" endLine="605" insertionLength="16" int_docASTNodeCount="4749" int_docActiveCodeLength="27993" int_docExpressionCount="3254" int_docLength="29752" length="2" offset="21630" startLine="605" starttimestamp="1612813070441" timestamp="6277040">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[equals(anObject)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3657" _type="Replace" date="Mon Feb 08 16:22:27 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28002" docExpressionCount="3324" docLength="29761" endLine="605" insertionLength="1" int_docASTNodeCount="4848" int_docActiveCodeLength="28001" int_docExpressionCount="3323" int_docLength="29760" length="8" offset="21637" startLine="605" starttimestamp="1612813070441" timestamp="6277462">
    <deletedText><![CDATA[anObject]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <Command __id="3624" _type="PauseCommand" date="Mon Feb 08 16:22:22 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6272320">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1040]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3625" _type="InsertStringCommand" date="Mon Feb 08 16:22:22 EST 2021" starttimestamp="1612813070441" timestamp="6272335" timestamp2="6272335">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3627" _type="InsertStringCommand" date="Mon Feb 08 16:22:22 EST 2021" starttimestamp="1612813070441" timestamp="6272538" timestamp2="6272538">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3629" _type="InsertStringCommand" date="Mon Feb 08 16:22:23 EST 2021" starttimestamp="1612813070441" timestamp="6272604" timestamp2="6272604">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="3631" _type="InsertStringCommand" date="Mon Feb 08 16:22:23 EST 2021" starttimestamp="1612813070441" timestamp="6272766" timestamp2="6272766">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3633" _type="InsertStringCommand" date="Mon Feb 08 16:22:23 EST 2021" starttimestamp="1612813070441" timestamp="6272866" timestamp2="6272866">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3635" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:23 EST 2021" starttimestamp="1612813070441" timestamp="6273245" />
  <Command __id="3637" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:23 EST 2021" starttimestamp="1612813070441" timestamp="6273342" />
  <Command __id="3639" _type="InsertStringCommand" date="Mon Feb 08 16:22:24 EST 2021" starttimestamp="1612813070441" timestamp="6273836" timestamp2="6273836">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3641" _type="InsertStringCommand" date="Mon Feb 08 16:22:24 EST 2021" starttimestamp="1612813070441" timestamp="6273873" timestamp2="6273873">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3643" _type="InsertStringCommand" date="Mon Feb 08 16:22:25 EST 2021" starttimestamp="1612813070441" timestamp="6274643" timestamp2="6274643">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:22:25 EST 2021" starttimestamp="1612813070441" timestamp="6274880" />
  <Command __id="3646" _type="InsertStringCommand" date="Mon Feb 08 16:22:26 EST 2021" starttimestamp="1612813070441" timestamp="6275562" timestamp2="6275562">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="3648" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:26 EST 2021" starttimestamp="1612813070441" timestamp="6276108" />
  <Command __id="3650" _type="InsertStringCommand" date="Mon Feb 08 16:22:26 EST 2021" starttimestamp="1612813070441" timestamp="6276355" timestamp2="6276355">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3651" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:26 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6276399" />
  <Command __id="3654" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:27 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6277033" />
  <Command __id="3656" _type="InsertStringCommand" date="Mon Feb 08 16:22:27 EST 2021" starttimestamp="1612813070441" timestamp="6277162" timestamp2="6277162">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3658" _type="InsertStringCommand" date="Mon Feb 08 16:22:27 EST 2021" starttimestamp="1612813070441" timestamp="6277470" timestamp2="6277470">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3659" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:28 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6277559" />
  <Command __id="3662" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:28 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6278232" />
  <Command __id="3664" _type="InsertStringCommand" date="Mon Feb 08 16:22:29 EST 2021" starttimestamp="1612813070441" timestamp="6278923" timestamp2="6278923">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="3666" _type="InsertStringCommand" date="Mon Feb 08 16:22:29 EST 2021" starttimestamp="1612813070441" timestamp="6279229" timestamp2="6279229">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3668" _type="InsertStringCommand" date="Mon Feb 08 16:22:29 EST 2021" starttimestamp="1612813070441" timestamp="6279246" timestamp2="6279246">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3670" _type="InsertStringCommand" date="Mon Feb 08 16:22:29 EST 2021" starttimestamp="1612813070441" timestamp="6279360" timestamp2="6279360">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3672" _type="InsertStringCommand" date="Mon Feb 08 16:22:30 EST 2021" starttimestamp="1612813070441" timestamp="6279581" timestamp2="6279581">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3674" _type="InsertStringCommand" date="Mon Feb 08 16:22:30 EST 2021" starttimestamp="1612813070441" timestamp="6279680" timestamp2="6279680">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3676" _type="InsertStringCommand" date="Mon Feb 08 16:22:30 EST 2021" starttimestamp="1612813070441" timestamp="6279778" timestamp2="6279778">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3678" _type="InsertStringCommand" date="Mon Feb 08 16:22:30 EST 2021" starttimestamp="1612813070441" timestamp="6280164" timestamp2="6280164">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3680" _type="InsertStringCommand" date="Mon Feb 08 16:22:30 EST 2021" starttimestamp="1612813070441" timestamp="6280257" timestamp2="6280257">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3682" _type="InsertStringCommand" date="Mon Feb 08 16:22:30 EST 2021" starttimestamp="1612813070441" timestamp="6280404" timestamp2="6280404">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3684" _type="InsertStringCommand" date="Mon Feb 08 16:22:31 EST 2021" starttimestamp="1612813070441" timestamp="6280620" timestamp2="6280620">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3686" _type="InsertStringCommand" date="Mon Feb 08 16:22:31 EST 2021" starttimestamp="1612813070441" timestamp="6280760" timestamp2="6280760">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3688" _type="InsertStringCommand" date="Mon Feb 08 16:22:31 EST 2021" starttimestamp="1612813070441" timestamp="6280908" timestamp2="6280908">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3690" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:31 EST 2021" starttimestamp="1612813070441" timestamp="6281192" />
  <Command __id="3692" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:31 EST 2021" starttimestamp="1612813070441" timestamp="6281333" />
  <Command __id="3694" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:31 EST 2021" starttimestamp="1612813070441" timestamp="6281442" />
  <Command __id="3696" _type="InsertStringCommand" date="Mon Feb 08 16:22:32 EST 2021" starttimestamp="1612813070441" timestamp="6281716" timestamp2="6281716">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3698" _type="InsertStringCommand" date="Mon Feb 08 16:22:32 EST 2021" starttimestamp="1612813070441" timestamp="6281881" timestamp2="6281881">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3700" _type="InsertStringCommand" date="Mon Feb 08 16:22:32 EST 2021" starttimestamp="1612813070441" timestamp="6281988" timestamp2="6281988">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3701" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:22:33 EST 2021" starttimestamp="1612813070441" timestamp="6282662" />
  <Command __id="3703" _type="PauseCommand" date="Mon Feb 08 16:22:37 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6286915">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4253]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3704" _type="InsertStringCommand" date="Mon Feb 08 16:22:37 EST 2021" starttimestamp="1612813070441" timestamp="6286919" timestamp2="6286919">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3705" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6286962" />
  <Command __id="3709" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:38 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6288084" />
  <Command __id="3711" _type="InsertStringCommand" date="Mon Feb 08 16:22:38 EST 2021" starttimestamp="1612813070441" timestamp="6288108" timestamp2="6288108">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3713" _type="PauseCommand" date="Mon Feb 08 16:22:41 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6290874">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2766]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3712" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:22:41 EST 2021" starttimestamp="1612813070441" timestamp="6290874" />
  <Command __id="3715" _type="PauseCommand" date="Mon Feb 08 16:22:42 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6291887">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1013]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3714" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:22:42 EST 2021" starttimestamp="1612813070441" timestamp="6291887" />
  <Command __id="3717" _type="InsertStringCommand" date="Mon Feb 08 16:22:43 EST 2021" starttimestamp="1612813070441" timestamp="6292760" timestamp2="6292760">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3718" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6292803" />
  <Command __id="3723" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:45 EST 2021" starttimestamp="1612813070441" timestamp="6294632" />
  <Command __id="3725" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:45 EST 2021" starttimestamp="1612813070441" timestamp="6294746" />
  <Command __id="3727" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:45 EST 2021" starttimestamp="1612813070441" timestamp="6294885" />
  <Command __id="3729" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:45 EST 2021" starttimestamp="1612813070441" timestamp="6295241" />
  <Command __id="3730" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6295941" />
  <Command __id="3731" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:22:46 EST 2021" starttimestamp="1612813070441" timestamp="6296102" />
  <Command __id="3732" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:22:46 EST 2021" starttimestamp="1612813070441" timestamp="6296429" />
  <Command __id="3733" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:22:47 EST 2021" starttimestamp="1612813070441" timestamp="6296714" />
  <Command __id="3734" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:22:47 EST 2021" starttimestamp="1612813070441" timestamp="6296883" />
  <Command __id="3735" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:22:47 EST 2021" starttimestamp="1612813070441" timestamp="6297050" />
  <Command __id="3737" _type="InsertStringCommand" date="Mon Feb 08 16:22:47 EST 2021" starttimestamp="1612813070441" timestamp="6297340" timestamp2="6297340">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3739" _type="PauseCommand" date="Mon Feb 08 16:22:48 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6298340">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1000]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3740" _type="InsertStringCommand" date="Mon Feb 08 16:22:48 EST 2021" starttimestamp="1612813070441" timestamp="6298346" timestamp2="6298346">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="3742" _type="InsertStringCommand" date="Mon Feb 08 16:22:48 EST 2021" starttimestamp="1612813070441" timestamp="6298460" timestamp2="6298460">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="3744" _type="InsertStringCommand" date="Mon Feb 08 16:22:49 EST 2021" starttimestamp="1612813070441" timestamp="6298606" timestamp2="6298606">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3746" _type="PauseCommand" date="Mon Feb 08 16:22:50 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6299705">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1099]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3747" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:50 EST 2021" starttimestamp="1612813070441" timestamp="6299708" />
  <Command __id="3749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:22:50 EST 2021" starttimestamp="1612813070441" timestamp="6300136" />
  <Command __id="3750" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" date="Mon Feb 08 16:22:51 EST 2021" starttimestamp="1612813070441" timestamp="6300717" />
  <Command __id="3751" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:22:51 EST 2021" starttimestamp="1612813070441" timestamp="6301032" />
  <Command __id="3752" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:22:51 EST 2021" starttimestamp="1612813070441" timestamp="6301199" />
  <Command __id="3754" _type="InsertStringCommand" date="Mon Feb 08 16:22:52 EST 2021" starttimestamp="1612813070441" timestamp="6301843" timestamp2="6301843">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3755" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:52 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6301885" />
  <Command __id="3758" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6302199" />
  <Command __id="3760" _type="InsertStringCommand" date="Mon Feb 08 16:22:52 EST 2021" starttimestamp="1612813070441" timestamp="6302214" timestamp2="6302214">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3762" _type="PauseCommand" date="Mon Feb 08 16:22:53 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6303330">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1116]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3763" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:53 EST 2021" starttimestamp="1612813070441" timestamp="6303338" />
  <Command __id="3765" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:53 EST 2021" starttimestamp="1612813070441" timestamp="6303474" />
  <Command __id="3767" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:22:54 EST 2021" starttimestamp="1612813070441" timestamp="6303705" />
  <Command __id="3769" _type="InsertStringCommand" date="Mon Feb 08 16:22:54 EST 2021" starttimestamp="1612813070441" timestamp="6304228" timestamp2="6304228">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3770" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:54 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6304271" />
  <Command __id="3773" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:55 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6304655" />
  <Command __id="3775" _type="InsertStringCommand" date="Mon Feb 08 16:22:55 EST 2021" starttimestamp="1612813070441" timestamp="6304667" timestamp2="6304667">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3777" _type="InsertStringCommand" date="Mon Feb 08 16:22:55 EST 2021" starttimestamp="1612813070441" timestamp="6305241" timestamp2="6305241">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3779" _type="InsertStringCommand" date="Mon Feb 08 16:22:56 EST 2021" starttimestamp="1612813070441" timestamp="6306216" timestamp2="6306216">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="3781" _type="InsertStringCommand" date="Mon Feb 08 16:22:56 EST 2021" starttimestamp="1612813070441" timestamp="6306399" timestamp2="6306399">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3783" _type="InsertStringCommand" date="Mon Feb 08 16:22:56 EST 2021" starttimestamp="1612813070441" timestamp="6306506" timestamp2="6306506">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3785" _type="InsertStringCommand" date="Mon Feb 08 16:22:57 EST 2021" starttimestamp="1612813070441" timestamp="6306763" timestamp2="6306763">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3786" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:22:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6306806" />
  <Command __id="3791" _type="PauseCommand" date="Mon Feb 08 16:22:58 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6308524">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1032]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3792" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:22:58 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6308535" />
  <Command __id="3794" _type="PauseCommand" date="Mon Feb 08 16:23:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6309877">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1342]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3795" _type="InsertStringCommand" date="Mon Feb 08 16:23:00 EST 2021" starttimestamp="1612813070441" timestamp="6309884" timestamp2="6309884">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="3797" _type="InsertStringCommand" date="Mon Feb 08 16:23:00 EST 2021" starttimestamp="1612813070441" timestamp="6309981" timestamp2="6309981">
    <data><![CDATA[&]]></data>
  </Command>
  <Command __id="3799" _type="InsertStringCommand" date="Mon Feb 08 16:23:00 EST 2021" starttimestamp="1612813070441" timestamp="6310059" timestamp2="6310059">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3800" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:00 EST 2021" starttimestamp="1612813070441" timestamp="6310535" />
  <Command __id="3802" _type="PauseCommand" date="Mon Feb 08 16:23:03 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6313214">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2679]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3803" _type="InsertStringCommand" date="Mon Feb 08 16:23:03 EST 2021" starttimestamp="1612813070441" timestamp="6313219" timestamp2="6313219">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3804" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:03 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6313261" />
  <Command __id="3807" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6314096" />
  <Command __id="3809" _type="InsertStringCommand" date="Mon Feb 08 16:23:04 EST 2021" starttimestamp="1612813070441" timestamp="6314111" timestamp2="6314111">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3811" _type="InsertStringCommand" date="Mon Feb 08 16:23:04 EST 2021" starttimestamp="1612813070441" timestamp="6314379" timestamp2="6314379">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3812" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6314422" />
  <Command __id="3815" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6315099" />
  <Command __id="3817" _type="InsertStringCommand" date="Mon Feb 08 16:23:05 EST 2021" starttimestamp="1612813070441" timestamp="6315226" timestamp2="6315226">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3660" _type="Delete" date="Mon Feb 08 16:22:28 EST 2021" docASTNodeCount="4848" docActiveCodeLength="28001" docExpressionCount="3323" docLength="29760" endLine="605" length="1" offset="21637" startLine="605" starttimestamp="1612813070441" timestamp="6277930">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="3661" _type="Insert" date="Mon Feb 08 16:22:28 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28016" docExpressionCount="3324" docLength="29775" length="15" offset="21637" repeat="14" starttimestamp="1612813070441" timestamp="6278219" timestamp2="6280906">
    <text><![CDATA["Search Restul"]]></text>
  </DocumentChange>
  <DocumentChange __id="3689" _type="Delete" date="Mon Feb 08 16:22:31 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28013" docExpressionCount="3324" docLength="29772" endLine="605" length="3" offset="21648" repeat="3" startLine="605" starttimestamp="1612813070441" timestamp="6281190" timestamp2="6281440">
    <text><![CDATA[tul]]></text>
  </DocumentChange>
  <DocumentChange __id="3695" _type="Insert" date="Mon Feb 08 16:22:32 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28016" docExpressionCount="3324" docLength="29775" length="3" offset="21648" repeat="3" starttimestamp="1612813070441" timestamp="6281714" timestamp2="6281986">
    <text><![CDATA[ult]]></text>
  </DocumentChange>
  <DocumentChange __id="3702" _type="Insert" date="Mon Feb 08 16:22:37 EST 2021" docASTNodeCount="4752" docActiveCodeLength="28020" docExpressionCount="3256" docLength="29779" length="4" offset="21666" repeat="4" starttimestamp="1612813070441" timestamp="6286915" timestamp2="6287295">
    <text><![CDATA[sear]]></text>
  </DocumentChange>
  <DocumentChange __id="3710" _type="Replace" date="Mon Feb 08 16:22:38 EST 2021" docASTNodeCount="4752" docActiveCodeLength="28027" docExpressionCount="3256" docLength="29786" endLine="606" insertionLength="11" int_docASTNodeCount="4849" int_docActiveCodeLength="28016" int_docExpressionCount="3324" int_docLength="29775" length="4" offset="21666" startLine="606" starttimestamp="1612813070441" timestamp="6288100">
    <deletedText><![CDATA[sear]]></deletedText>
    <insertedText><![CDATA[searchWords]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3716" _type="Insert" date="Mon Feb 08 16:22:43 EST 2021" docASTNodeCount="4754" docActiveCodeLength="28031" docExpressionCount="3258" docLength="29790" length="4" offset="21677" repeat="4" starttimestamp="1612813070441" timestamp="6292756" timestamp2="6293657">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="3722" _type="Delete" date="Mon Feb 08 16:22:45 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28016" docExpressionCount="3324" docLength="29775" endLine="606" length="15" offset="21666" repeat="4" startLine="606" starttimestamp="1612813070441" timestamp="6294630" timestamp2="6295238">
    <text><![CDATA[searchWords.get]]></text>
  </DocumentChange>
  <DocumentChange __id="3736" _type="Insert" date="Mon Feb 08 16:22:47 EST 2021" docASTNodeCount="4665" docActiveCodeLength="28020" docExpressionCount="3199" docLength="29779" length="4" offset="21653" repeat="4" starttimestamp="1612813070441" timestamp="6297335" timestamp2="6298602">
    <text><![CDATA[ && ]]></text>
  </DocumentChange>
  <DocumentChange __id="3745" _type="Delete" date="Mon Feb 08 16:22:50 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28016" docExpressionCount="3324" docLength="29775" endLine="605" length="4" offset="21653" repeat="2" startLine="605" starttimestamp="1612813070441" timestamp="6299705" timestamp2="6300134">
    <text><![CDATA[ && ]]></text>
  </DocumentChange>
  <DocumentChange __id="3753" _type="Insert" date="Mon Feb 08 16:22:52 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28019" docExpressionCount="3324" docLength="29778" length="3" offset="21591" repeat="3" starttimestamp="1612813070441" timestamp="6301837" timestamp2="6302066">
    <text><![CDATA[las]]></text>
  </DocumentChange>
  <DocumentChange __id="3759" _type="Replace" date="Mon Feb 08 16:22:52 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28043" docExpressionCount="3324" docLength="29802" endLine="605" insertionLength="27" int_docASTNodeCount="4849" int_docActiveCodeLength="28016" int_docExpressionCount="3324" int_docLength="29775" length="3" offset="21591" startLine="605" starttimestamp="1612813070441" timestamp="6302205">
    <deletedText><![CDATA[las]]></deletedText>
    <insertedText><![CDATA[lastPredictionWasDifficulty]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3761" _type="Delete" date="Mon Feb 08 16:22:53 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28020" docExpressionCount="3324" docLength="29779" endLine="605" length="23" offset="21595" repeat="3" startLine="605" starttimestamp="1612813070441" timestamp="6303330" timestamp2="6303702">
    <text><![CDATA[PredictionWasDifficulty]]></text>
  </DocumentChange>
  <DocumentChange __id="3768" _type="Insert" date="Mon Feb 08 16:22:54 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28023" docExpressionCount="3324" docLength="29782" length="3" offset="21595" repeat="3" starttimestamp="1612813070441" timestamp="6304222" timestamp2="6304471">
    <text><![CDATA[sea]]></text>
  </DocumentChange>
  <DocumentChange __id="3774" _type="Replace" date="Mon Feb 08 16:22:55 EST 2021" docASTNodeCount="4849" docActiveCodeLength="28027" docExpressionCount="3324" docLength="29786" endLine="605" insertionLength="11" int_docASTNodeCount="4849" int_docActiveCodeLength="28016" int_docExpressionCount="3324" int_docLength="29775" length="7" offset="21591" startLine="605" starttimestamp="1612813070441" timestamp="6304660">
    <deletedText><![CDATA[lastsea]]></deletedText>
    <insertedText><![CDATA[lastSearcch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3776" _type="Insert" date="Mon Feb 08 16:22:55 EST 2021" docASTNodeCount="4853" docActiveCodeLength="28039" docExpressionCount="3328" docLength="29798" length="12" offset="21602" repeat="12" starttimestamp="1612813070441" timestamp="6305236" timestamp2="6310052">
    <text><![CDATA[ != null && ]]></text>
  </DocumentChange>
  <DocumentChange __id="3801" _type="Insert" date="Mon Feb 08 16:23:03 EST 2021" docASTNodeCount="4756" docActiveCodeLength="28042" docExpressionCount="3260" docLength="29801" length="3" offset="21689" repeat="3" starttimestamp="1612813070441" timestamp="6313214" timestamp2="6313503">
    <text><![CDATA[sea]]></text>
  </DocumentChange>
  <DocumentChange __id="3808" _type="Replace" date="Mon Feb 08 16:23:04 EST 2021" docASTNodeCount="4756" docActiveCodeLength="28050" docExpressionCount="3260" docLength="29809" endLine="606" insertionLength="11" int_docASTNodeCount="4853" int_docActiveCodeLength="28039" int_docExpressionCount="3328" int_docLength="29798" length="3" offset="21689" startLine="606" starttimestamp="1612813070441" timestamp="6314103">
    <deletedText><![CDATA[sea]]></deletedText>
    <insertedText><![CDATA[searchWords]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3810" _type="Insert" date="Mon Feb 08 16:23:04 EST 2021" docASTNodeCount="4758" docActiveCodeLength="28053" docExpressionCount="3262" docLength="29812" length="3" offset="21700" repeat="3" starttimestamp="1612813070441" timestamp="6314374" timestamp2="6314924">
    <text><![CDATA[.pu]]></text>
  </DocumentChange>
  <DocumentChange __id="3816" _type="Replace" date="Mon Feb 08 16:23:05 EST 2021" docASTNodeCount="4760" docActiveCodeLength="28066" docExpressionCount="3264" docLength="29825" endLine="606" insertionLength="15" int_docASTNodeCount="4747" int_docActiveCodeLength="28051" int_docExpressionCount="3256" int_docLength="29810" length="2" offset="21701" startLine="606" starttimestamp="1612813070441" timestamp="6315105">
    <deletedText><![CDATA[pu]]></deletedText>
    <insertedText><![CDATA[put(key, value)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3818" _type="Replace" date="Mon Feb 08 16:23:07 EST 2021" docASTNodeCount="4760" docActiveCodeLength="28064" docExpressionCount="3264" docLength="29823" endLine="606" insertionLength="1" int_docASTNodeCount="4759" int_docActiveCodeLength="28063" int_docExpressionCount="3263" int_docLength="29822" length="3" offset="21705" startLine="606" starttimestamp="1612813070441" timestamp="6317041">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3821" _type="Insert" date="Mon Feb 08 16:23:07 EST 2021" docASTNodeCount="4760" docActiveCodeLength="28067" docExpressionCount="3264" docLength="29826" length="3" offset="21706" repeat="3" starttimestamp="1612813070441" timestamp="6317129" timestamp2="6317436">
    <text><![CDATA[omm]]></text>
  </DocumentChange>
  <DocumentChange __id="3827" _type="Replace" date="Mon Feb 08 16:23:08 EST 2021" docASTNodeCount="4760" docActiveCodeLength="28070" docExpressionCount="3264" docLength="29829" endLine="606" insertionLength="7" int_docASTNodeCount="4759" int_docActiveCodeLength="28063" int_docExpressionCount="3263" int_docLength="29822" length="4" offset="21705" startLine="606" starttimestamp="1612813070441" timestamp="6317623">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3829" _type="Insert" date="Mon Feb 08 16:23:08 EST 2021" docASTNodeCount="4762" docActiveCodeLength="28074" docExpressionCount="3266" docLength="29833" length="4" offset="21712" repeat="4" starttimestamp="1612813070441" timestamp="6317839" timestamp2="6318253">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <Command __id="3819" _type="PauseCommand" date="Mon Feb 08 16:23:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6317041">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1815]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3820" _type="InsertStringCommand" date="Mon Feb 08 16:23:07 EST 2021" starttimestamp="1612813070441" timestamp="6317048" timestamp2="6317048">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3822" _type="InsertStringCommand" date="Mon Feb 08 16:23:07 EST 2021" starttimestamp="1612813070441" timestamp="6317131" timestamp2="6317131">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3823" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:07 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6317172" />
  <Command __id="3826" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:08 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6317615" />
  <Command __id="3828" _type="InsertStringCommand" date="Mon Feb 08 16:23:08 EST 2021" starttimestamp="1612813070441" timestamp="6317630" timestamp2="6317630">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3830" _type="InsertStringCommand" date="Mon Feb 08 16:23:08 EST 2021" starttimestamp="1612813070441" timestamp="6317842" timestamp2="6317842">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3831" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:08 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6317933" />
  <Command __id="3835" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:09 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6318791" />
  <Command __id="3837" _type="InsertStringCommand" date="Mon Feb 08 16:23:09 EST 2021" starttimestamp="1612813070441" timestamp="6318809" timestamp2="6318809">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3839" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:23:09 EST 2021" starttimestamp="1612813070441" timestamp="6319479" />
  <Command __id="3841" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:23:10 EST 2021" starttimestamp="1612813070441" timestamp="6319600" />
  <Command __id="3843" _type="PauseCommand" date="Mon Feb 08 16:23:12 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6322210">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2610]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3844" _type="InsertStringCommand" date="Mon Feb 08 16:23:12 EST 2021" starttimestamp="1612813070441" timestamp="6322215" timestamp2="6322215">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3846" _type="InsertStringCommand" date="Mon Feb 08 16:23:12 EST 2021" starttimestamp="1612813070441" timestamp="6322279" timestamp2="6322279">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3847" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:12 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6322321" />
  <Command __id="3848" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6322528" />
  <Command __id="3850" _type="InsertStringCommand" date="Mon Feb 08 16:23:12 EST 2021" starttimestamp="1612813070441" timestamp="6322545" timestamp2="6322545">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3852" _type="InsertStringCommand" date="Mon Feb 08 16:23:13 EST 2021" starttimestamp="1612813070441" timestamp="6322905" timestamp2="6322905">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3853" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6322994" />
  <Command __id="3857" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6324012" />
  <Command __id="3859" _type="InsertStringCommand" date="Mon Feb 08 16:23:14 EST 2021" starttimestamp="1612813070441" timestamp="6324128" timestamp2="6324128">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3861" _type="InsertStringCommand" date="Mon Feb 08 16:23:15 EST 2021" starttimestamp="1612813070441" timestamp="6325011" timestamp2="6325011">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3863" _type="InsertStringCommand" date="Mon Feb 08 16:23:15 EST 2021" starttimestamp="1612813070441" timestamp="6325388" timestamp2="6325388">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="3865" _type="InsertStringCommand" date="Mon Feb 08 16:23:15 EST 2021" starttimestamp="1612813070441" timestamp="6325546" timestamp2="6325546">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3867" _type="InsertStringCommand" date="Mon Feb 08 16:23:16 EST 2021" starttimestamp="1612813070441" timestamp="6325656" timestamp2="6325656">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3869" _type="InsertStringCommand" date="Mon Feb 08 16:23:16 EST 2021" starttimestamp="1612813070441" timestamp="6326438" timestamp2="6326438">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3871" _type="InsertStringCommand" date="Mon Feb 08 16:23:16 EST 2021" starttimestamp="1612813070441" timestamp="6326448" timestamp2="6326448">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="3873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:23:17 EST 2021" starttimestamp="1612813070441" timestamp="6326906" />
  <Command __id="3874" _type="InsertStringCommand" date="Mon Feb 08 16:23:18 EST 2021" starttimestamp="1612813070441" timestamp="6327644" timestamp2="6327644">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="3875" _type="InsertStringCommand" date="Mon Feb 08 16:23:18 EST 2021" starttimestamp="1612813070441" timestamp="6328286" timestamp2="6328286">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="3877" _type="PauseCommand" date="Mon Feb 08 16:23:20 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6330096">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1810]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3878" _type="InsertStringCommand" date="Mon Feb 08 16:23:20 EST 2021" starttimestamp="1612813070441" timestamp="6330107" timestamp2="6330107">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3879" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6330191" />
  <Command __id="3883" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6330661" />
  <Command __id="3885" _type="InsertStringCommand" date="Mon Feb 08 16:23:21 EST 2021" starttimestamp="1612813070441" timestamp="6330675" timestamp2="6330675">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3887" _type="InsertStringCommand" date="Mon Feb 08 16:23:21 EST 2021" starttimestamp="1612813070441" timestamp="6330872" timestamp2="6330872">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3888" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6330961" />
  <Command __id="3895" _type="PauseCommand" date="Mon Feb 08 16:23:23 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6333118">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1084]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3894" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:23 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6333118" />
  <Command __id="3897" _type="InsertStringCommand" date="Mon Feb 08 16:23:23 EST 2021" starttimestamp="1612813070441" timestamp="6333144" timestamp2="6333144">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3899" _type="InsertStringCommand" date="Mon Feb 08 16:23:23 EST 2021" starttimestamp="1612813070441" timestamp="6333408" timestamp2="6333408">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3900" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:23 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6333499" />
  <Command __id="3905" _type="PauseCommand" date="Mon Feb 08 16:23:25 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6335436">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1523]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3904" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:25 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6335436" />
  <Command __id="3907" _type="InsertStringCommand" date="Mon Feb 08 16:23:25 EST 2021" starttimestamp="1612813070441" timestamp="6335556" timestamp2="6335556">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3909" _type="InsertStringCommand" date="Mon Feb 08 16:23:26 EST 2021" starttimestamp="1612813070441" timestamp="6335970" timestamp2="6335970">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3911" _type="PauseCommand" date="Mon Feb 08 16:23:29 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6339124">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3154]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3912" _type="InsertStringCommand" date="Mon Feb 08 16:23:29 EST 2021" starttimestamp="1612813070441" timestamp="6339132" timestamp2="6339132">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="3914" _type="InsertStringCommand" date="Mon Feb 08 16:23:29 EST 2021" starttimestamp="1612813070441" timestamp="6339206" timestamp2="6339206">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3916" _type="InsertStringCommand" date="Mon Feb 08 16:23:29 EST 2021" starttimestamp="1612813070441" timestamp="6339330" timestamp2="6339330">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="3918" _type="InsertStringCommand" date="Mon Feb 08 16:23:29 EST 2021" starttimestamp="1612813070441" timestamp="6339496" timestamp2="6339496">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3920" _type="InsertStringCommand" date="Mon Feb 08 16:23:30 EST 2021" starttimestamp="1612813070441" timestamp="6339572" timestamp2="6339572">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3922" _type="InsertStringCommand" date="Mon Feb 08 16:23:30 EST 2021" starttimestamp="1612813070441" timestamp="6339675" timestamp2="6339675">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3924" _type="InsertStringCommand" date="Mon Feb 08 16:23:30 EST 2021" starttimestamp="1612813070441" timestamp="6339885" timestamp2="6339885">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3926" _type="InsertStringCommand" date="Mon Feb 08 16:23:30 EST 2021" starttimestamp="1612813070441" timestamp="6340295" timestamp2="6340295">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="3928" _type="InsertStringCommand" date="Mon Feb 08 16:23:30 EST 2021" starttimestamp="1612813070441" timestamp="6340320" timestamp2="6340320">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3930" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:23:31 EST 2021" starttimestamp="1612813070441" timestamp="6340803" />
  <Command __id="3932" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:23:31 EST 2021" starttimestamp="1612813070441" timestamp="6340932" />
  <Command __id="3934" _type="InsertStringCommand" date="Mon Feb 08 16:23:32 EST 2021" starttimestamp="1612813070441" timestamp="6341649" timestamp2="6341649">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3936" _type="PauseCommand" date="Mon Feb 08 16:23:33 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6343140">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1491]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3935" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:23:33 EST 2021" starttimestamp="1612813070441" timestamp="6343140" />
  <Command __id="3938" _type="PauseCommand" date="Mon Feb 08 16:23:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6344251">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1111]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3939" _type="InsertStringCommand" date="Mon Feb 08 16:23:34 EST 2021" starttimestamp="1612813070441" timestamp="6344265" timestamp2="6344265">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3941" _type="PauseCommand" date="Mon Feb 08 16:23:36 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6345926">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1661]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3940" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:36 EST 2021" starttimestamp="1612813070441" timestamp="6345926" />
  <Command __id="3942" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:36 EST 2021" starttimestamp="1612813070441" timestamp="6346281" />
  <Command __id="3944" _type="PauseCommand" date="Mon Feb 08 16:23:40 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6350259">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3978]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3943" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:40 EST 2021" starttimestamp="1612813070441" timestamp="6350259" />
  <Command __id="3945" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:40 EST 2021" starttimestamp="1612813070441" timestamp="6350436" />
  <Command __id="3946" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:41 EST 2021" starttimestamp="1612813070441" timestamp="6350572" />
  <Command __id="3947" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:41 EST 2021" starttimestamp="1612813070441" timestamp="6350694" />
  <Command __id="3948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:41 EST 2021" starttimestamp="1612813070441" timestamp="6350817" />
  <Command __id="3949" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:41 EST 2021" starttimestamp="1612813070441" timestamp="6350942" />
  <Command __id="3950" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:41 EST 2021" starttimestamp="1612813070441" timestamp="6351071" />
  <Command __id="3951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:41 EST 2021" starttimestamp="1612813070441" timestamp="6351205" />
  <Command __id="3952" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:23:41 EST 2021" starttimestamp="1612813070441" timestamp="6351355" />
  <Command __id="3954" _type="InsertStringCommand" date="Mon Feb 08 16:23:42 EST 2021" starttimestamp="1612813070441" timestamp="6352155" timestamp2="6352155">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3836" _type="Replace" date="Mon Feb 08 16:23:09 EST 2021" docASTNodeCount="4762" docActiveCodeLength="28084" docExpressionCount="3266" docLength="29843" endLine="606" insertionLength="13" int_docASTNodeCount="4761" int_docActiveCodeLength="28071" int_docExpressionCount="3265" int_docLength="29830" length="3" offset="21713" startLine="606" starttimestamp="1612813070441" timestamp="6318799">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getCategory()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3838" _type="Delete" date="Mon Feb 08 16:23:09 EST 2021" docASTNodeCount="4762" docActiveCodeLength="28074" docExpressionCount="3266" docLength="29833" endLine="606" length="10" offset="21716" repeat="2" startLine="606" starttimestamp="1612813070441" timestamp="6319475" timestamp2="6319597">
    <text><![CDATA[Category()]]></text>
  </DocumentChange>
  <DocumentChange __id="3842" _type="Insert" date="Mon Feb 08 16:23:12 EST 2021" docASTNodeCount="4762" docActiveCodeLength="28076" docExpressionCount="3266" docLength="29835" length="2" offset="21716" repeat="2" starttimestamp="1612813070441" timestamp="6322210" timestamp2="6322278">
    <text><![CDATA[da]]></text>
  </DocumentChange>
  <DocumentChange __id="3849" _type="Replace" date="Mon Feb 08 16:23:12 EST 2021" docASTNodeCount="4762" docActiveCodeLength="28083" docExpressionCount="3266" docLength="29842" endLine="606" insertionLength="12" int_docASTNodeCount="4761" int_docActiveCodeLength="28071" int_docExpressionCount="3265" int_docLength="29830" length="5" offset="21713" startLine="606" starttimestamp="1612813070441" timestamp="6322535">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3851" _type="Insert" date="Mon Feb 08 16:23:13 EST 2021" docASTNodeCount="4764" docActiveCodeLength="28087" docExpressionCount="3268" docLength="29846" length="4" offset="21725" repeat="4" starttimestamp="1612813070441" timestamp="6322902" timestamp2="6323518">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="3858" _type="Replace" date="Mon Feb 08 16:23:14 EST 2021" docASTNodeCount="4765" docActiveCodeLength="28092" docExpressionCount="3269" docLength="29851" endLine="606" insertionLength="8" int_docASTNodeCount="4763" int_docActiveCodeLength="28084" int_docExpressionCount="3267" int_docLength="29843" length="3" offset="21726" startLine="606" starttimestamp="1612813070441" timestamp="6324019">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3860" _type="Replace" date="Mon Feb 08 16:23:15 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28090" docExpressionCount="3104" docLength="29849" endLine="606" insertionLength="1" int_docASTNodeCount="4764" int_docActiveCodeLength="28089" int_docExpressionCount="3268" int_docLength="29848" length="3" offset="21730" startLine="606" starttimestamp="1612813070441" timestamp="6325003">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3862" _type="Insert" date="Mon Feb 08 16:23:15 EST 2021" docASTNodeCount="4765" docActiveCodeLength="28095" docExpressionCount="3269" docLength="29854" length="5" offset="21731" repeat="5" starttimestamp="1612813070441" timestamp="6325386" timestamp2="6326446">
    <text><![CDATA[URL":]]></text>
  </DocumentChange>
  <DocumentChange __id="3872" _type="Delete" date="Mon Feb 08 16:23:17 EST 2021" docASTNodeCount="4765" docActiveCodeLength="28094" docExpressionCount="3269" docLength="29853" endLine="606" length="1" offset="21735" startLine="606" starttimestamp="1612813070441" timestamp="6326903">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="3876" _type="Replace" date="Mon Feb 08 16:23:20 EST 2021" docASTNodeCount="4765" docActiveCodeLength="28090" docExpressionCount="3269" docLength="29849" endLine="606" insertionLength="1" int_docASTNodeCount="4754" int_docActiveCodeLength="28089" int_docExpressionCount="3263" int_docLength="29848" length="5" offset="21738" startLine="606" starttimestamp="1612813070441" timestamp="6330096">
    <deletedText><![CDATA[value]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3880" _type="Insert" date="Mon Feb 08 16:23:20 EST 2021" docASTNodeCount="4765" docActiveCodeLength="28093" docExpressionCount="3269" docLength="29852" length="3" offset="21739" repeat="3" starttimestamp="1612813070441" timestamp="6330390" timestamp2="6330507">
    <text><![CDATA[omm]]></text>
  </DocumentChange>
  <DocumentChange __id="3884" _type="Replace" date="Mon Feb 08 16:23:21 EST 2021" docASTNodeCount="4765" docActiveCodeLength="28096" docExpressionCount="3269" docLength="29855" endLine="606" insertionLength="7" int_docASTNodeCount="4754" int_docActiveCodeLength="28089" int_docExpressionCount="3263" int_docLength="29848" length="4" offset="21738" startLine="606" starttimestamp="1612813070441" timestamp="6330669">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3886" _type="Insert" date="Mon Feb 08 16:23:21 EST 2021" docASTNodeCount="4767" docActiveCodeLength="28102" docExpressionCount="3271" docLength="29861" length="6" offset="21745" repeat="6" starttimestamp="1612813070441" timestamp="6330867" timestamp2="6332034">
    <text><![CDATA[.getda]]></text>
  </DocumentChange>
  <DocumentChange __id="3896" _type="Replace" date="Mon Feb 08 16:23:23 EST 2021" docASTNodeCount="4767" docActiveCodeLength="28109" docExpressionCount="3271" docLength="29868" endLine="606" insertionLength="12" int_docASTNodeCount="4756" int_docActiveCodeLength="28097" int_docExpressionCount="3265" int_docLength="29856" length="5" offset="21746" startLine="606" starttimestamp="1612813070441" timestamp="6333133">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3898" _type="Insert" date="Mon Feb 08 16:23:23 EST 2021" docASTNodeCount="4769" docActiveCodeLength="28113" docExpressionCount="3273" docLength="29872" length="4" offset="21758" repeat="4" starttimestamp="1612813070441" timestamp="6333405" timestamp2="6333913">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="3906" _type="Replace" date="Mon Feb 08 16:23:25 EST 2021" docASTNodeCount="4770" docActiveCodeLength="28118" docExpressionCount="3274" docLength="29877" endLine="606" insertionLength="8" int_docASTNodeCount="4758" int_docActiveCodeLength="28110" int_docExpressionCount="3267" int_docLength="29869" length="3" offset="21759" startLine="606" starttimestamp="1612813070441" timestamp="6335443">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3908" _type="Replace" date="Mon Feb 08 16:23:26 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28116" docExpressionCount="3104" docLength="29875" endLine="606" insertionLength="1" int_docASTNodeCount="4769" int_docActiveCodeLength="28115" int_docExpressionCount="3273" int_docLength="29874" length="3" offset="21763" startLine="606" starttimestamp="1612813070441" timestamp="6335960">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3910" _type="Insert" date="Mon Feb 08 16:23:29 EST 2021" docASTNodeCount="4770" docActiveCodeLength="28125" docExpressionCount="3274" docLength="29884" length="9" offset="21764" repeat="9" starttimestamp="1612813070441" timestamp="6339124" timestamp2="6340312">
    <text><![CDATA[keyword:"]]></text>
  </DocumentChange>
  <DocumentChange __id="3929" _type="Delete" date="Mon Feb 08 16:23:31 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28123" docExpressionCount="3104" docLength="29882" endLine="606" length="2" offset="21771" repeat="2" startLine="606" starttimestamp="1612813070441" timestamp="6340797" timestamp2="6340929">
    <text><![CDATA[:"]]></text>
  </DocumentChange>
  <DocumentChange __id="3933" _type="Insert" date="Mon Feb 08 16:23:32 EST 2021" docASTNodeCount="4770" docActiveCodeLength="28124" docExpressionCount="3274" docLength="29883" length="1" offset="21771" starttimestamp="1612813070441" timestamp="6341644">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="3937" _type="Insert" date="Mon Feb 08 16:23:34 EST 2021" docASTNodeCount="4869" docActiveCodeLength="28125" docExpressionCount="3343" docLength="29884" length="1" offset="21774" starttimestamp="1612813070441" timestamp="6344251">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3953" _type="Insert" date="Mon Feb 08 16:23:42 EST 2021" docASTNodeCount="4869" docActiveCodeLength="28130" docExpressionCount="3343" docLength="29889" length="5" offset="21111" starttimestamp="1612813070441" timestamp="6352145">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="3955" _type="Insert" date="Mon Feb 08 16:23:44 EST 2021" docASTNodeCount="4772" docActiveCodeLength="28134" docExpressionCount="3275" docLength="29893" length="4" offset="21116" repeat="4" starttimestamp="1612813070441" timestamp="6354311" timestamp2="6354583">
    <text><![CDATA[ehic]]></text>
  </DocumentChange>
  <DocumentChange __id="3963" _type="Replace" date="Mon Feb 08 16:23:45 EST 2021" docASTNodeCount="4772" docActiveCodeLength="28140" docExpressionCount="3275" docLength="29899" endLine="596" insertionLength="10" int_docASTNodeCount="4869" int_docActiveCodeLength="28130" int_docExpressionCount="3343" int_docLength="29889" length="4" offset="21116" startLine="596" starttimestamp="1612813070441" timestamp="6354978">
    <deletedText><![CDATA[ehic]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <Command __id="3956" _type="PauseCommand" date="Mon Feb 08 16:23:44 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6354311">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2156]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3957" _type="InsertStringCommand" date="Mon Feb 08 16:23:44 EST 2021" starttimestamp="1612813070441" timestamp="6354316" timestamp2="6354316">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3958" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6354358" />
  <Command __id="3962" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6354972" />
  <Command __id="3964" _type="InsertStringCommand" date="Mon Feb 08 16:23:45 EST 2021" starttimestamp="1612813070441" timestamp="6354985" timestamp2="6354985">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3966" _type="InsertStringCommand" date="Mon Feb 08 16:23:45 EST 2021" starttimestamp="1612813070441" timestamp="6355209" timestamp2="6355209">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3968" _type="InsertStringCommand" date="Mon Feb 08 16:23:45 EST 2021" starttimestamp="1612813070441" timestamp="6355390" timestamp2="6355390">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3969" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:45 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6355433" />
  <Command __id="3971" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6355550" />
  <Command __id="3973" _type="InsertStringCommand" date="Mon Feb 08 16:23:46 EST 2021" starttimestamp="1612813070441" timestamp="6355568" timestamp2="6355568">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3974" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:46 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6355612" />
  <Command __id="3975" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6355638" />
  <Command __id="3977" _type="InsertStringCommand" date="Mon Feb 08 16:23:46 EST 2021" starttimestamp="1612813070441" timestamp="6355803" timestamp2="6355803">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3978" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:46 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6355899" />
  <Command __id="3979" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6355924" />
  <Command __id="3981" _type="PauseCommand" date="Mon Feb 08 16:23:47 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6357101">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1177]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3982" _type="InsertStringCommand" date="Mon Feb 08 16:23:47 EST 2021" starttimestamp="1612813070441" timestamp="6357106" timestamp2="6357106">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3984" _type="InsertStringCommand" date="Mon Feb 08 16:23:47 EST 2021" starttimestamp="1612813070441" timestamp="6357266" timestamp2="6357266">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3985" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6357360" />
  <Command __id="3986" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6357385" />
  <Command __id="3988" _type="InsertStringCommand" date="Mon Feb 08 16:23:47 EST 2021" starttimestamp="1612813070441" timestamp="6357432" timestamp2="6357432">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="3990" _type="InsertStringCommand" date="Mon Feb 08 16:23:47 EST 2021" starttimestamp="1612813070441" timestamp="6357486" timestamp2="6357486">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3991" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6357529" />
  <Command __id="3992" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6357555" />
  <Command __id="3994" _type="InsertStringCommand" date="Mon Feb 08 16:23:48 EST 2021" starttimestamp="1612813070441" timestamp="6358079" timestamp2="6358079">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3996" _type="InsertStringCommand" date="Mon Feb 08 16:23:48 EST 2021" starttimestamp="1612813070441" timestamp="6358270" timestamp2="6358270">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3998" _type="InsertStringCommand" date="Mon Feb 08 16:23:48 EST 2021" starttimestamp="1612813070441" timestamp="6358362" timestamp2="6358362">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4000" _type="InsertStringCommand" date="Mon Feb 08 16:23:49 EST 2021" starttimestamp="1612813070441" timestamp="6358621" timestamp2="6358621">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4002" _type="InsertStringCommand" date="Mon Feb 08 16:23:49 EST 2021" starttimestamp="1612813070441" timestamp="6358704" timestamp2="6358704">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4003" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:23:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6358798" />
  <Command __id="4006" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:23:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6359337" />
  <Command __id="4007" _type="InsertStringCommand" date="Mon Feb 08 16:23:49 EST 2021" starttimestamp="1612813070441" timestamp="6359342" timestamp2="6359342">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4009" _type="InsertStringCommand" date="Mon Feb 08 16:23:50 EST 2021" starttimestamp="1612813070441" timestamp="6359623" timestamp2="6359623">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4011" _type="PauseCommand" date="Mon Feb 08 16:23:57 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6367424">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[7801]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4010" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:57 EST 2021" starttimestamp="1612813070441" timestamp="6367424" />
  <Command __id="4012" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:58 EST 2021" starttimestamp="1612813070441" timestamp="6367582" />
  <Command __id="4013" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:58 EST 2021" starttimestamp="1612813070441" timestamp="6367663" />
  <Command __id="4014" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:58 EST 2021" starttimestamp="1612813070441" timestamp="6367932" />
  <Command __id="4015" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:58 EST 2021" starttimestamp="1612813070441" timestamp="6368060" />
  <Command __id="4016" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:58 EST 2021" starttimestamp="1612813070441" timestamp="6368207" />
  <Command __id="4017" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:23:58 EST 2021" starttimestamp="1612813070441" timestamp="6368287" />
  <Command __id="4018" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:23:59 EST 2021" starttimestamp="1612813070441" timestamp="6368876" />
  <Command __id="4020" _type="InsertStringCommand" date="Mon Feb 08 16:23:59 EST 2021" starttimestamp="1612813070441" timestamp="6369050" timestamp2="6369050">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4022" _type="InsertStringCommand" date="Mon Feb 08 16:24:00 EST 2021" starttimestamp="1612813070441" timestamp="6369615" timestamp2="6369615">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4023" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:24:00 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6369659" />
  <Command __id="4025" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:24:00 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6369850" />
  <Command __id="4027" _type="InsertStringCommand" date="Mon Feb 08 16:24:00 EST 2021" starttimestamp="1612813070441" timestamp="6369956" timestamp2="6369956">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4029" _type="InsertStringCommand" date="Mon Feb 08 16:24:01 EST 2021" starttimestamp="1612813070441" timestamp="6370917" timestamp2="6370917">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4030" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:24:01 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6370953" />
  <Command __id="4037" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:24:02 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6372441" />
  <Command __id="4039" _type="InsertStringCommand" date="Mon Feb 08 16:24:02 EST 2021" starttimestamp="1612813070441" timestamp="6372455" timestamp2="6372455">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4041" _type="InsertStringCommand" date="Mon Feb 08 16:24:03 EST 2021" starttimestamp="1612813070441" timestamp="6372612" timestamp2="6372612">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4043" _type="InsertStringCommand" date="Mon Feb 08 16:24:03 EST 2021" starttimestamp="1612813070441" timestamp="6373354" timestamp2="6373354">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4045" _type="InsertStringCommand" date="Mon Feb 08 16:24:03 EST 2021" starttimestamp="1612813070441" timestamp="6373487" timestamp2="6373487">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4047" _type="InsertStringCommand" date="Mon Feb 08 16:24:04 EST 2021" starttimestamp="1612813070441" timestamp="6373565" timestamp2="6373565">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4049" _type="InsertStringCommand" date="Mon Feb 08 16:24:04 EST 2021" starttimestamp="1612813070441" timestamp="6373759" timestamp2="6373759">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4050" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:24:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6373802" />
  <Command __id="4054" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:24:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6374349" />
  <Command __id="4055" _type="InsertStringCommand" date="Mon Feb 08 16:24:04 EST 2021" starttimestamp="1612813070441" timestamp="6374356" timestamp2="6374356">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4057" _type="PauseCommand" date="Mon Feb 08 16:24:17 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6386984">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[12628]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4056" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:17 EST 2021" starttimestamp="1612813070441" timestamp="6386984" />
  <Command __id="4058" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:17 EST 2021" starttimestamp="1612813070441" timestamp="6387107" />
  <Command __id="4060" _type="InsertStringCommand" date="Mon Feb 08 16:24:18 EST 2021" starttimestamp="1612813070441" timestamp="6387740" timestamp2="6387740">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4062" _type="InsertStringCommand" date="Mon Feb 08 16:24:18 EST 2021" starttimestamp="1612813070441" timestamp="6388282" timestamp2="6388282">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4063" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:24:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6388326" />
  <Command __id="4066" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:24:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6389046" />
  <Command __id="4068" _type="InsertStringCommand" date="Mon Feb 08 16:24:19 EST 2021" starttimestamp="1612813070441" timestamp="6389059" timestamp2="6389059">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4070" _type="InsertStringCommand" date="Mon Feb 08 16:24:19 EST 2021" starttimestamp="1612813070441" timestamp="6389215" timestamp2="6389215">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4072" _type="PauseCommand" date="Mon Feb 08 16:24:20 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6390230">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1015]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4073" _type="InsertStringCommand" date="Mon Feb 08 16:24:20 EST 2021" starttimestamp="1612813070441" timestamp="6390234" timestamp2="6390234">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4075" _type="InsertStringCommand" date="Mon Feb 08 16:24:20 EST 2021" starttimestamp="1612813070441" timestamp="6390337" timestamp2="6390337">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4077" _type="InsertStringCommand" date="Mon Feb 08 16:24:20 EST 2021" starttimestamp="1612813070441" timestamp="6390542" timestamp2="6390542">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4078" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:24:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6390586" />
  <Command __id="4083" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:24:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6391335" />
  <Command __id="4085" _type="PauseCommand" date="Mon Feb 08 16:24:25 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6395039">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3704]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4084" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:25 EST 2021" starttimestamp="1612813070441" timestamp="6395039" />
  <Command __id="4086" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:25 EST 2021" starttimestamp="1612813070441" timestamp="6395202" />
  <Command __id="4087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:25 EST 2021" starttimestamp="1612813070441" timestamp="6395308" />
  <Command __id="4088" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:25 EST 2021" starttimestamp="1612813070441" timestamp="6395443" />
  <Command __id="4089" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:26 EST 2021" starttimestamp="1612813070441" timestamp="6395573" />
  <Command __id="4090" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:26 EST 2021" starttimestamp="1612813070441" timestamp="6395706" />
  <Command __id="4091" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:26 EST 2021" starttimestamp="1612813070441" timestamp="6395822" />
  <Command __id="4092" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:26 EST 2021" starttimestamp="1612813070441" timestamp="6395964" />
  <Command __id="4093" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:26 EST 2021" starttimestamp="1612813070441" timestamp="6396101" />
  <Command __id="4095" _type="PauseCommand" date="Mon Feb 08 16:24:28 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6397747">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1646]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4094" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:28 EST 2021" starttimestamp="1612813070441" timestamp="6397747" />
  <Command __id="4096" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:28 EST 2021" starttimestamp="1612813070441" timestamp="6397924" />
  <Command __id="4097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:28 EST 2021" starttimestamp="1612813070441" timestamp="6398074" />
  <Command __id="4098" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:28 EST 2021" starttimestamp="1612813070441" timestamp="6398229" />
  <Command __id="4099" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:28 EST 2021" starttimestamp="1612813070441" timestamp="6398345" />
  <Command __id="4100" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:24:29 EST 2021" starttimestamp="1612813070441" timestamp="6399058" />
  <Command __id="4102" _type="InsertStringCommand" date="Mon Feb 08 16:24:29 EST 2021" starttimestamp="1612813070441" timestamp="6399297" timestamp2="6399297">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4104" _type="InsertStringCommand" date="Mon Feb 08 16:24:30 EST 2021" starttimestamp="1612813070441" timestamp="6400281" timestamp2="6400281">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4105" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:24:30 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6400324" />
  <Command __id="4110" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:24:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6401014" />
  <Command __id="4112" _type="InsertStringCommand" date="Mon Feb 08 16:24:31 EST 2021" starttimestamp="1612813070441" timestamp="6401029" timestamp2="6401029">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4114" _type="InsertStringCommand" date="Mon Feb 08 16:24:31 EST 2021" starttimestamp="1612813070441" timestamp="6401263" timestamp2="6401263">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4116" _type="InsertStringCommand" date="Mon Feb 08 16:24:32 EST 2021" starttimestamp="1612813070441" timestamp="6402240" timestamp2="6402240">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4118" _type="InsertStringCommand" date="Mon Feb 08 16:24:32 EST 2021" starttimestamp="1612813070441" timestamp="6402355" timestamp2="6402355">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4120" _type="InsertStringCommand" date="Mon Feb 08 16:24:33 EST 2021" starttimestamp="1612813070441" timestamp="6402734" timestamp2="6402734">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4121" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:24:33 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6402777" />
  <Command __id="4129" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:24:35 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6404739" />
  <Command __id="4131" _type="InsertStringCommand" date="Mon Feb 08 16:24:35 EST 2021" starttimestamp="1612813070441" timestamp="6404754" timestamp2="6404754">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4133" _type="InsertStringCommand" date="Mon Feb 08 16:24:35 EST 2021" starttimestamp="1612813070441" timestamp="6404895" timestamp2="6404895">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4134" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:35 EST 2021" starttimestamp="1612813070441" timestamp="6405533" />
  <Command __id="4135" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:36 EST 2021" starttimestamp="1612813070441" timestamp="6405684" />
  <Command __id="4136" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:36 EST 2021" starttimestamp="1612813070441" timestamp="6405799" />
  <Command __id="4137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:36 EST 2021" starttimestamp="1612813070441" timestamp="6405927" />
  <Command __id="4138" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:36 EST 2021" starttimestamp="1612813070441" timestamp="6406048" />
  <Command __id="4139" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:36 EST 2021" starttimestamp="1612813070441" timestamp="6406174" />
  <Command __id="4140" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:36 EST 2021" starttimestamp="1612813070441" timestamp="6406291" />
  <Command __id="4141" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:24:37 EST 2021" starttimestamp="1612813070441" timestamp="6406678" />
  <Command __id="4142" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:24:37 EST 2021" starttimestamp="1612813070441" timestamp="6407044" />
  <Command __id="4143" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:24:37 EST 2021" starttimestamp="1612813070441" timestamp="6407217" />
  <Command __id="4144" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:24:37 EST 2021" starttimestamp="1612813070441" timestamp="6407336" />
  <Command __id="4145" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:24:37 EST 2021" starttimestamp="1612813070441" timestamp="6407474" />
  <Command __id="4146" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:24:38 EST 2021" starttimestamp="1612813070441" timestamp="6407594" />
  <Command __id="4148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:24:38 EST 2021" starttimestamp="1612813070441" timestamp="6407926" />
  <Command __id="4150" _type="InsertStringCommand" date="Mon Feb 08 16:24:38 EST 2021" starttimestamp="1612813070441" timestamp="6408070" timestamp2="6408070">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="4151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:24:38 EST 2021" starttimestamp="1612813070441" timestamp="6408334" />
  <Command __id="4153" _type="PauseCommand" date="Mon Feb 08 16:25:00 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="6430225">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[21891]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4152" _type="ShellCommand" date="Mon Feb 08 16:25:00 EST 2021" starttimestamp="1612813070441" timestamp="6430225" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4155" _type="PauseCommand" date="Mon Feb 08 16:25:29 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="6459397">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[29172]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4154" _type="ShellCommand" date="Mon Feb 08 16:25:29 EST 2021" starttimestamp="1612813070441" timestamp="6459397" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4156" _type="SelectTextCommand" caretOffset="1318" date="Mon Feb 08 16:25:29 EST 2021" end="1403" start="1318" starttimestamp="1612813070441" timestamp="6459471" />
  <Command __id="4157" _type="MoveCaretCommand" caretOffset="1459" date="Mon Feb 08 16:25:30 EST 2021" docOffset="21401" starttimestamp="1612813070441" timestamp="6460289" />
  <Command __id="4161" _type="PauseCommand" date="Mon Feb 08 16:25:45 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6475461">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8327]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4160" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:25:45 EST 2021" starttimestamp="1612813070441" timestamp="6475461" />
  <Command __id="4162" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:25:45 EST 2021" starttimestamp="1612813070441" timestamp="6475469" />
  <Command __id="4163" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:25:45 EST 2021" starttimestamp="1612813070441" timestamp="6475469" />
  <Command __id="4164" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:25:45 EST 2021" starttimestamp="1612813070441" timestamp="6475476" />
  <Command __id="4166" _type="PauseCommand" date="Mon Feb 08 16:25:50 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6480316">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4840]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4165" _type="MoveCaretCommand" caretOffset="1912" date="Mon Feb 08 16:25:50 EST 2021" docOffset="21854" starttimestamp="1612813070441" timestamp="6480316" />
  <Command __id="4167" _type="SelectTextCommand" caretOffset="1916" date="Mon Feb 08 16:25:50 EST 2021" end="1916" start="1909" starttimestamp="1612813070441" timestamp="6480463" />
  <Command __id="4169" _type="InsertStringCommand" date="Mon Feb 08 16:25:51 EST 2021" starttimestamp="1612813070441" timestamp="6481384" timestamp2="6481384">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4171" _type="InsertStringCommand" date="Mon Feb 08 16:25:51 EST 2021" starttimestamp="1612813070441" timestamp="6481419" timestamp2="6481419">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:25:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6481461" />
  <Command __id="4175" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:25:53 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6482896" />
  <Command __id="4177" _type="InsertStringCommand" date="Mon Feb 08 16:25:53 EST 2021" starttimestamp="1612813070441" timestamp="6482911" timestamp2="6482911">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4179" _type="PauseCommand" date="Mon Feb 08 16:25:56 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6485791">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2880]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4178" _type="MoveCaretCommand" caretOffset="1669" date="Mon Feb 08 16:25:56 EST 2021" docOffset="21611" starttimestamp="1612813070441" timestamp="6485791" />
  <Command __id="4181" _type="PauseCommand" date="Mon Feb 08 16:25:58 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6488441">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2650]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4180" _type="MoveCaretCommand" caretOffset="1134" date="Mon Feb 08 16:25:58 EST 2021" docOffset="21076" starttimestamp="1612813070441" timestamp="6488441" />
  <Command __id="4183" _type="PauseCommand" date="Mon Feb 08 16:26:21 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="6510744">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[22303]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4182" _type="MoveCaretCommand" caretOffset="1669" date="Mon Feb 08 16:26:21 EST 2021" docOffset="21611" starttimestamp="1612813070441" timestamp="6510744" />
  <Command __id="4185" _type="PauseCommand" date="Mon Feb 08 16:26:36 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6526228">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[15484]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4184" _type="MoveCaretCommand" caretOffset="1169" date="Mon Feb 08 16:26:36 EST 2021" docOffset="21111" starttimestamp="1612813070441" timestamp="6526228" />
  <Command __id="4187" _type="PauseCommand" date="Mon Feb 08 16:27:52 EST 2021" range="1m-2m" starttimestamp="1612813070441" timestamp="6602088">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[75860]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4186" _type="MoveCaretCommand" caretOffset="1669" date="Mon Feb 08 16:27:52 EST 2021" docOffset="21611" starttimestamp="1612813070441" timestamp="6602088" />
  <Command __id="4189" _type="PauseCommand" date="Mon Feb 08 16:28:22 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="6631590">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[29502]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4188" _type="MoveCaretCommand" caretOffset="1134" date="Mon Feb 08 16:28:22 EST 2021" docOffset="21076" starttimestamp="1612813070441" timestamp="6631590" />
  <DocumentChange __id="3965" _type="Insert" date="Mon Feb 08 16:23:45 EST 2021" docASTNodeCount="4875" docActiveCodeLength="28157" docExpressionCount="3346" docLength="29916" length="17" offset="21126" repeat="17" starttimestamp="1612813070441" timestamp="6355205" timestamp2="6359607">
    <text><![CDATA[ lastPage = null;]]></text>
  </DocumentChange>
  <DocumentChange __id="4019" _type="Insert" date="Mon Feb 08 16:23:59 EST 2021" docASTNodeCount="4777" docActiveCodeLength="28169" docExpressionCount="3276" docLength="29928" length="12" offset="21567" repeat="3" starttimestamp="1612813070441" timestamp="6369039" timestamp2="6369836">
    <text><![CDATA[
								if]]></text>
  </DocumentChange>
  <DocumentChange __id="4026" _type="Replace" date="Mon Feb 08 16:24:00 EST 2021" docASTNodeCount="4878" docActiveCodeLength="28218" docExpressionCount="3347" docLength="29977" endLine="604" insertionLength="51" int_docASTNodeCount="4875" int_docActiveCodeLength="28167" int_docExpressionCount="3346" int_docLength="29926" length="2" offset="21577" startLine="604" starttimestamp="1612813070441" timestamp="6369877">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
									
								}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4028" _type="Replace" date="Mon Feb 08 16:24:01 EST 2021" docASTNodeCount="4878" docActiveCodeLength="28197" docExpressionCount="3347" docLength="29956" endLine="604" insertionLength="1" int_docASTNodeCount="4779" int_docActiveCodeLength="28196" int_docExpressionCount="3278" int_docLength="29955" length="22" offset="21581" startLine="604" starttimestamp="1612813070441" timestamp="6370908">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4031" _type="Insert" date="Mon Feb 08 16:24:01 EST 2021" docASTNodeCount="4878" docActiveCodeLength="28203" docExpressionCount="3347" docLength="29962" length="6" offset="21582" repeat="6" starttimestamp="1612813070441" timestamp="6371162" timestamp2="6372310">
    <text><![CDATA[aspage]]></text>
  </DocumentChange>
  <DocumentChange __id="4038" _type="Replace" date="Mon Feb 08 16:24:02 EST 2021" docASTNodeCount="4878" docActiveCodeLength="28204" docExpressionCount="3347" docLength="29963" endLine="604" insertionLength="8" int_docASTNodeCount="4779" int_docActiveCodeLength="28196" int_docExpressionCount="3278" int_docLength="29955" length="7" offset="21581" startLine="604" starttimestamp="1612813070441" timestamp="6372448">
    <deletedText><![CDATA[laspage]]></deletedText>
    <insertedText><![CDATA[lastPage]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4040" _type="Insert" date="Mon Feb 08 16:24:03 EST 2021" docASTNodeCount="4880" docActiveCodeLength="28212" docExpressionCount="3349" docLength="29971" length="8" offset="21589" repeat="8" starttimestamp="1612813070441" timestamp="6372610" timestamp2="6374158">
    <text><![CDATA[ == null]]></text>
  </DocumentChange>
  <DocumentChange __id="4059" _type="Insert" date="Mon Feb 08 16:24:18 EST 2021" docASTNodeCount="4882" docActiveCodeLength="28225" docExpressionCount="3349" docLength="29984" length="13" offset="21622" repeat="4" starttimestamp="1612813070441" timestamp="6387731" timestamp2="6388512">
    <text><![CDATA[
								las]]></text>
  </DocumentChange>
  <DocumentChange __id="4067" _type="Replace" date="Mon Feb 08 16:24:19 EST 2021" docASTNodeCount="4882" docActiveCodeLength="28230" docExpressionCount="3349" docLength="29989" endLine="607" insertionLength="8" int_docASTNodeCount="4880" int_docActiveCodeLength="28222" int_docExpressionCount="3349" int_docLength="29981" length="3" offset="21632" startLine="607" starttimestamp="1612813070441" timestamp="6389052">
    <deletedText><![CDATA[las]]></deletedText>
    <insertedText><![CDATA[lastPage]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4069" _type="Insert" date="Mon Feb 08 16:24:19 EST 2021" docASTNodeCount="4884" docActiveCodeLength="28238" docExpressionCount="3352" docLength="29997" length="8" offset="21640" repeat="8" starttimestamp="1612813070441" timestamp="6389210" timestamp2="6391316">
    <text><![CDATA[ = null;]]></text>
  </DocumentChange>
  <DocumentChange __id="4101" _type="Insert" date="Mon Feb 08 16:24:29 EST 2021" docASTNodeCount="4787" docActiveCodeLength="28253" docExpressionCount="3284" docLength="30012" length="15" offset="21888" repeat="6" starttimestamp="1612813070441" timestamp="6399286" timestamp2="6400651">
    <text><![CDATA[
								laspa]]></text>
  </DocumentChange>
  <DocumentChange __id="4111" _type="Replace" date="Mon Feb 08 16:24:31 EST 2021" docASTNodeCount="4787" docActiveCodeLength="28256" docExpressionCount="3284" docLength="30015" endLine="612" insertionLength="8" int_docASTNodeCount="4884" int_docActiveCodeLength="28248" int_docExpressionCount="3352" int_docLength="30007" length="5" offset="21898" startLine="612" starttimestamp="1612813070441" timestamp="6401021">
    <deletedText><![CDATA[laspa]]></deletedText>
    <insertedText><![CDATA[lastPage]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4113" _type="Insert" date="Mon Feb 08 16:24:31 EST 2021" docASTNodeCount="4789" docActiveCodeLength="28261" docExpressionCount="3286" docLength="30020" length="5" offset="21906" repeat="5" starttimestamp="1612813070441" timestamp="6401257" timestamp2="6402949">
    <text><![CDATA[ = nu]]></text>
  </DocumentChange>
  <DocumentChange __id="4123" _type="Delete" date="Mon Feb 08 16:24:33 EST 2021" docASTNodeCount="4778" docActiveCodeLength="28259" docExpressionCount="3280" docLength="30018" endLine="612" length="2" offset="21909" repeat="2" startLine="612" starttimestamp="1612813070441" timestamp="6403307" timestamp2="6403417">
    <text><![CDATA[nu]]></text>
  </DocumentChange>
  <DocumentChange __id="4125" _type="Insert" date="Mon Feb 08 16:24:34 EST 2021" docASTNodeCount="4789" docActiveCodeLength="28263" docExpressionCount="3286" docLength="30022" length="4" offset="21909" repeat="4" starttimestamp="1612813070441" timestamp="6404204" timestamp2="6404561">
    <text><![CDATA[comm]]></text>
  </DocumentChange>
  <DocumentChange __id="4130" _type="Replace" date="Mon Feb 08 16:24:35 EST 2021" docASTNodeCount="4789" docActiveCodeLength="28266" docExpressionCount="3286" docLength="30025" endLine="612" insertionLength="7" int_docASTNodeCount="4778" int_docActiveCodeLength="28259" int_docExpressionCount="3280" int_docLength="30018" length="4" offset="21909" startLine="612" starttimestamp="1612813070441" timestamp="6404747">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4132" _type="Insert" date="Mon Feb 08 16:24:35 EST 2021" docASTNodeCount="4888" docActiveCodeLength="28267" docExpressionCount="3355" docLength="30026" length="1" offset="21916" starttimestamp="1612813070441" timestamp="6404890">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4147" _type="Delete" date="Mon Feb 08 16:24:38 EST 2021" docASTNodeCount="4888" docActiveCodeLength="28266" docExpressionCount="3355" docLength="30025" endLine="604" length="1" offset="21590" startLine="604" starttimestamp="1612813070441" timestamp="6407923">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="4149" _type="Insert" date="Mon Feb 08 16:24:38 EST 2021" docASTNodeCount="4888" docActiveCodeLength="28267" docExpressionCount="3355" docLength="30026" length="1" offset="21590" starttimestamp="1612813070441" timestamp="6408064">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="4168" _type="Replace" date="Mon Feb 08 16:25:51 EST 2021" docASTNodeCount="4888" docActiveCodeLength="28261" docExpressionCount="3355" docLength="30020" endLine="611" insertionLength="1" int_docASTNodeCount="4788" int_docActiveCodeLength="28260" int_docExpressionCount="3285" int_docLength="30019" length="7" offset="21851" startLine="611" starttimestamp="1612813070441" timestamp="6481376">
    <deletedText><![CDATA[command]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4170" _type="Insert" date="Mon Feb 08 16:25:51 EST 2021" docASTNodeCount="4888" docActiveCodeLength="28264" docExpressionCount="3355" docLength="30023" length="3" offset="21852" repeat="3" starttimestamp="1612813070441" timestamp="6481413" timestamp2="6482251">
    <text><![CDATA[ase]]></text>
  </DocumentChange>
  <DocumentChange __id="4176" _type="Replace" date="Mon Feb 08 16:25:53 EST 2021" docASTNodeCount="4888" docActiveCodeLength="28271" docExpressionCount="3355" docLength="30030" endLine="611" insertionLength="11" int_docASTNodeCount="4788" int_docActiveCodeLength="28260" int_docExpressionCount="3285" int_docLength="30019" length="4" offset="21851" startLine="611" starttimestamp="1612813070441" timestamp="6482903">
    <deletedText><![CDATA[lase]]></deletedText>
    <insertedText><![CDATA[lastSearcch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4190" _type="Insert" date="Mon Feb 08 16:28:24 EST 2021" docASTNodeCount="4792" docActiveCodeLength="28279" docExpressionCount="3288" docLength="30038" length="8" offset="21076" repeat="4" starttimestamp="1612813070441" timestamp="6633819" timestamp2="6634407">
    <text><![CDATA[
			map]]></text>
  </DocumentChange>
  <DocumentChange __id="4199" _type="Replace" date="Mon Feb 08 16:28:25 EST 2021" docASTNodeCount="4797" docActiveCodeLength="28285" docExpressionCount="3290" docLength="30044" endLine="595" insertionLength="9" int_docASTNodeCount="4888" int_docActiveCodeLength="28276" int_docExpressionCount="3355" int_docLength="30035" length="3" offset="21081" startLine="595" starttimestamp="1612813070441" timestamp="6634665">
    <deletedText><![CDATA[map]]></deletedText>
    <insertedText><![CDATA[Map<K, V>]]></insertedText>
  </DocumentChange>
  <Command __id="4191" _type="PauseCommand" date="Mon Feb 08 16:28:24 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6633819">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2229]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4192" _type="InsertStringCommand" date="Mon Feb 08 16:28:24 EST 2021" starttimestamp="1612813070441" timestamp="6633838" timestamp2="6633838">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4194" _type="InsertStringCommand" date="Mon Feb 08 16:28:24 EST 2021" starttimestamp="1612813070441" timestamp="6634143" timestamp2="6634143">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4195" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:24 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6634186" />
  <Command __id="4198" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:25 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6634659" />
  <Command __id="4200" _type="InsertStringCommand" date="Mon Feb 08 16:28:25 EST 2021" starttimestamp="1612813070441" timestamp="6634699" timestamp2="6634699">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4202" _type="InsertStringCommand" date="Mon Feb 08 16:28:25 EST 2021" starttimestamp="1612813070441" timestamp="6635008" timestamp2="6635008">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4203" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:25 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6635046" />
  <Command __id="4206" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:25 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6635312" />
  <Command __id="4208" _type="InsertStringCommand" date="Mon Feb 08 16:28:25 EST 2021" starttimestamp="1612813070441" timestamp="6635335" timestamp2="6635335">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4209" _type="InsertStringCommand" date="Mon Feb 08 16:28:25 EST 2021" starttimestamp="1612813070441" timestamp="6635466" timestamp2="6635466">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="4211" _type="PauseCommand" date="Mon Feb 08 16:28:35 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6645458">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[9992]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="4212" _type="InsertStringCommand" date="Mon Feb 08 16:28:35 EST 2021" starttimestamp="1612813070441" timestamp="6645466" timestamp2="6645466">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4213" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:35 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6645553" />
  <Command __id="4216" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:36 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6646067" />
  <Command __id="4218" _type="InsertStringCommand" date="Mon Feb 08 16:28:36 EST 2021" starttimestamp="1612813070441" timestamp="6646081" timestamp2="6646081">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4219" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:28:37 EST 2021" starttimestamp="1612813070441" timestamp="6646684" />
  <Command __id="4221" _type="PauseCommand" date="Mon Feb 08 16:28:40 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6650289">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3605]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4222" _type="InsertStringCommand" date="Mon Feb 08 16:28:40 EST 2021" starttimestamp="1612813070441" timestamp="6650299" timestamp2="6650299">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4224" _type="PauseCommand" date="Mon Feb 08 16:28:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6651498">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1199]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4225" _type="InsertStringCommand" date="Mon Feb 08 16:28:41 EST 2021" starttimestamp="1612813070441" timestamp="6651502" timestamp2="6651502">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4226" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6651595" />
  <Command __id="4228" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:42 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6651738" />
  <Command __id="4230" _type="InsertStringCommand" date="Mon Feb 08 16:28:42 EST 2021" starttimestamp="1612813070441" timestamp="6651747" timestamp2="6651747">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4232" _type="InsertStringCommand" date="Mon Feb 08 16:28:42 EST 2021" starttimestamp="1612813070441" timestamp="6651755" timestamp2="6651755">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4233" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6651849" />
  <Command __id="4234" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:42 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6651875" />
  <Command __id="4236" _type="InsertStringCommand" date="Mon Feb 08 16:28:42 EST 2021" starttimestamp="1612813070441" timestamp="6652312" timestamp2="6652312">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="4238" _type="InsertStringCommand" date="Mon Feb 08 16:28:42 EST 2021" starttimestamp="1612813070441" timestamp="6652515" timestamp2="6652515">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4240" _type="InsertStringCommand" date="Mon Feb 08 16:28:42 EST 2021" starttimestamp="1612813070441" timestamp="6652546" timestamp2="6652546">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4242" _type="InsertStringCommand" date="Mon Feb 08 16:28:43 EST 2021" starttimestamp="1612813070441" timestamp="6652627" timestamp2="6652627">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4243" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6652721" />
  <Command __id="4244" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6652746" />
  <Command __id="4246" _type="InsertStringCommand" date="Mon Feb 08 16:28:43 EST 2021" starttimestamp="1612813070441" timestamp="6652869" timestamp2="6652869">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4247" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6652959" />
  <Command __id="4248" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6652992" />
  <Command __id="4250" _type="InsertStringCommand" date="Mon Feb 08 16:28:43 EST 2021" starttimestamp="1612813070441" timestamp="6653003" timestamp2="6653003">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4252" _type="InsertStringCommand" date="Mon Feb 08 16:28:43 EST 2021" starttimestamp="1612813070441" timestamp="6653045" timestamp2="6653045">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4254" _type="InsertStringCommand" date="Mon Feb 08 16:28:43 EST 2021" starttimestamp="1612813070441" timestamp="6653118" timestamp2="6653118">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4255" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6653161" />
  <Command __id="4256" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6653195" />
  <Command __id="4258" _type="InsertStringCommand" date="Mon Feb 08 16:28:43 EST 2021" starttimestamp="1612813070441" timestamp="6653303" timestamp2="6653303">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4259" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6653397" />
  <Command __id="4260" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6653429" />
  <Command __id="4261" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:28:44 EST 2021" starttimestamp="1612813070441" timestamp="6654115" />
  <Command __id="4262" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:28:44 EST 2021" starttimestamp="1612813070441" timestamp="6654335" />
  <Command __id="4263" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:28:44 EST 2021" starttimestamp="1612813070441" timestamp="6654496" />
  <Command __id="4264" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:28:45 EST 2021" starttimestamp="1612813070441" timestamp="6654620" />
  <Command __id="4265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:28:45 EST 2021" starttimestamp="1612813070441" timestamp="6654951" />
  <Command __id="4266" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:28:45 EST 2021" starttimestamp="1612813070441" timestamp="6655458" />
  <Command __id="4268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:28:46 EST 2021" starttimestamp="1612813070441" timestamp="6655738" />
  <Command __id="4269" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:28:46 EST 2021" starttimestamp="1612813070441" timestamp="6656370" />
  <Command __id="4270" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:28:47 EST 2021" starttimestamp="1612813070441" timestamp="6657002" />
  <Command __id="4271" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:28:47 EST 2021" starttimestamp="1612813070441" timestamp="6657225" />
  <Command __id="4273" _type="PauseCommand" date="Mon Feb 08 16:28:48 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6658240">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1015]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="4274" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:28:48 EST 2021" starttimestamp="1612813070441" timestamp="6658243" />
  <Command __id="4276" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:28:48 EST 2021" starttimestamp="1612813070441" timestamp="6658396" />
  <Command __id="4278" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:28:48 EST 2021" starttimestamp="1612813070441" timestamp="6658528" />
  <Command __id="4280" _type="InsertStringCommand" date="Mon Feb 08 16:28:49 EST 2021" starttimestamp="1612813070441" timestamp="6659087" timestamp2="6659087">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4282" _type="InsertStringCommand" date="Mon Feb 08 16:28:49 EST 2021" starttimestamp="1612813070441" timestamp="6659156" timestamp2="6659156">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4283" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6659249" />
  <Command __id="4284" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6659273" />
  <Command __id="4286" _type="InsertStringCommand" date="Mon Feb 08 16:28:50 EST 2021" starttimestamp="1612813070441" timestamp="6660055" timestamp2="6660055">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4288" _type="InsertStringCommand" date="Mon Feb 08 16:28:50 EST 2021" starttimestamp="1612813070441" timestamp="6660389" timestamp2="6660389">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4290" _type="InsertStringCommand" date="Mon Feb 08 16:28:51 EST 2021" starttimestamp="1612813070441" timestamp="6660562" timestamp2="6660562">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4292" _type="InsertStringCommand" date="Mon Feb 08 16:28:51 EST 2021" starttimestamp="1612813070441" timestamp="6660801" timestamp2="6660801">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4294" _type="InsertStringCommand" date="Mon Feb 08 16:28:51 EST 2021" starttimestamp="1612813070441" timestamp="6660881" timestamp2="6660881">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4296" _type="InsertStringCommand" date="Mon Feb 08 16:28:51 EST 2021" starttimestamp="1612813070441" timestamp="6660923" timestamp2="6660923">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4298" _type="InsertStringCommand" date="Mon Feb 08 16:28:51 EST 2021" starttimestamp="1612813070441" timestamp="6660973" timestamp2="6660973">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4300" _type="InsertStringCommand" date="Mon Feb 08 16:28:51 EST 2021" starttimestamp="1612813070441" timestamp="6661132" timestamp2="6661132">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4302" _type="InsertStringCommand" date="Mon Feb 08 16:28:51 EST 2021" starttimestamp="1612813070441" timestamp="6661230" timestamp2="6661230">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4303" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6661325" />
  <Command __id="4307" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6662387" />
  <Command __id="4309" _type="InsertStringCommand" date="Mon Feb 08 16:28:52 EST 2021" starttimestamp="1612813070441" timestamp="6662475" timestamp2="6662475">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4310" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:28:53 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6662566" />
  <Command __id="4311" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:53 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6662818" />
  <Command __id="4314" _type="InsertStringCommand" date="Mon Feb 08 16:28:53 EST 2021" starttimestamp="1612813070441" timestamp="6662852" timestamp2="6662852">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4316" _type="PauseCommand" date="Mon Feb 08 16:28:54 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6663924">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1072]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4317" _type="InsertStringCommand" date="Mon Feb 08 16:28:54 EST 2021" starttimestamp="1612813070441" timestamp="6663933" timestamp2="6663933">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4319" _type="PauseCommand" date="Mon Feb 08 16:28:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6665671">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1738]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="4318" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:28:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6665671" />
  <Command __id="4320" _type="MoveCaretCommand" caretOffset="1781" date="Mon Feb 08 16:28:56 EST 2021" docOffset="21723" starttimestamp="1612813070441" timestamp="6665772" />
  <Command __id="4322" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:28:56 EST 2021" starttimestamp="1612813070441" timestamp="6666373" />
  <Command __id="4324" _type="PauseCommand" date="Mon Feb 08 16:28:58 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6667753">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1380]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4323" _type="MoveCaretCommand" caretOffset="1826" date="Mon Feb 08 16:28:58 EST 2021" docOffset="21768" starttimestamp="1612813070441" timestamp="6667753" />
  <Command __id="4326" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:28:58 EST 2021" starttimestamp="1612813070441" timestamp="6667847" />
  <Command __id="4327" _type="MoveCaretCommand" caretOffset="1971" date="Mon Feb 08 16:28:59 EST 2021" docOffset="21913" starttimestamp="1612813070441" timestamp="6668669" />
  <Command __id="4329" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:28:59 EST 2021" starttimestamp="1612813070441" timestamp="6668716" />
  <Command __id="4330" _type="MoveCaretCommand" caretOffset="1735" date="Mon Feb 08 16:28:59 EST 2021" docOffset="21677" starttimestamp="1612813070441" timestamp="6669050" />
  <Command __id="4332" _type="PauseCommand" date="Mon Feb 08 16:29:02 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6671571">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2521]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4331" _type="MoveCaretCommand" caretOffset="1735" date="Mon Feb 08 16:29:02 EST 2021" docOffset="21677" starttimestamp="1612813070441" timestamp="6671571" />
  <Command __id="4333" _type="MoveCaretCommand" caretOffset="1724" date="Mon Feb 08 16:29:02 EST 2021" docOffset="21666" starttimestamp="1612813070441" timestamp="6672152" />
  <Command __id="4335" _type="PauseCommand" date="Mon Feb 08 16:29:16 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6685748">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[13596]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4336" _type="InsertStringCommand" date="Mon Feb 08 16:29:16 EST 2021" starttimestamp="1612813070441" timestamp="6685753" timestamp2="6685753">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4337" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:29:16 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6685795" />
  <Command __id="4342" _type="PauseCommand" date="Mon Feb 08 16:29:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6688030">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1153]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4344" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:29:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6688612" />
  <Command __id="4346" _type="InsertStringCommand" date="Mon Feb 08 16:29:19 EST 2021" starttimestamp="1612813070441" timestamp="6688636" timestamp2="6688636">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4348" _type="InsertStringCommand" date="Mon Feb 08 16:29:19 EST 2021" starttimestamp="1612813070441" timestamp="6688919" timestamp2="6688919">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4349" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:29:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6688961" />
  <Command __id="4352" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:29:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6689566" />
  <Command __id="4354" _type="InsertStringCommand" date="Mon Feb 08 16:29:20 EST 2021" starttimestamp="1612813070441" timestamp="6689690" timestamp2="6689690">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4356" _type="PauseCommand" date="Mon Feb 08 16:29:39 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6709389">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[19699]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="4357" _type="InsertStringCommand" date="Mon Feb 08 16:29:39 EST 2021" starttimestamp="1612813070441" timestamp="6709396" timestamp2="6709396">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4359" _type="InsertStringCommand" date="Mon Feb 08 16:29:39 EST 2021" starttimestamp="1612813070441" timestamp="6709446" timestamp2="6709446">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4360" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:29:39 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6709488" />
  <DocumentChange __id="4201" _type="Replace" date="Mon Feb 08 16:28:25 EST 2021" docASTNodeCount="4797" docActiveCodeLength="28285" docExpressionCount="3290" docLength="30044" endLine="595" insertionLength="1" int_docASTNodeCount="4795" int_docActiveCodeLength="28284" int_docExpressionCount="3289" int_docLength="30043" length="1" offset="21085" startLine="595" starttimestamp="1612813070441" timestamp="6635002">
    <deletedText><![CDATA[K]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4204" _type="Insert" date="Mon Feb 08 16:28:25 EST 2021" docASTNodeCount="4797" docActiveCodeLength="28287" docExpressionCount="3290" docLength="30046" length="2" offset="21086" repeat="2" starttimestamp="1612813070441" timestamp="6635228" timestamp2="6635274">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="4207" _type="Replace" date="Mon Feb 08 16:28:25 EST 2021" docASTNodeCount="4797" docActiveCodeLength="28290" docExpressionCount="3290" docLength="30049" endLine="595" insertionLength="6" int_docASTNodeCount="4795" int_docActiveCodeLength="28284" int_docExpressionCount="3289" int_docLength="30043" length="3" offset="21085" startLine="595" starttimestamp="1612813070441" timestamp="6635319">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4210" _type="Replace" date="Mon Feb 08 16:28:35 EST 2021" docASTNodeCount="4797" docActiveCodeLength="28290" docExpressionCount="3290" docLength="30049" endLine="595" insertionLength="1" int_docASTNodeCount="4614" int_docActiveCodeLength="28289" int_docExpressionCount="3162" int_docLength="30048" length="1" offset="21093" startLine="595" starttimestamp="1612813070441" timestamp="6645458">
    <deletedText><![CDATA[V]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4214" _type="Insert" date="Mon Feb 08 16:28:36 EST 2021" docASTNodeCount="4797" docActiveCodeLength="28292" docExpressionCount="3290" docLength="30051" length="2" offset="21094" repeat="2" starttimestamp="1612813070441" timestamp="6645721" timestamp2="6645737">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="4217" _type="Replace" date="Mon Feb 08 16:28:36 EST 2021" docASTNodeCount="4797" docActiveCodeLength="28295" docExpressionCount="3290" docLength="30054" endLine="595" insertionLength="6" int_docASTNodeCount="4614" int_docActiveCodeLength="28289" int_docExpressionCount="3162" int_docLength="30048" length="3" offset="21093" startLine="595" starttimestamp="1612813070441" timestamp="6646074">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4220" _type="Insert" date="Mon Feb 08 16:28:40 EST 2021" docASTNodeCount="4799" docActiveCodeLength="28309" docExpressionCount="3290" docLength="30068" length="14" offset="21100" repeat="14" starttimestamp="1612813070441" timestamp="6650289" timestamp2="6653299">
    <text><![CDATA[ lastSearchers]]></text>
  </DocumentChange>
  <DocumentChange __id="4267" _type="Delete" date="Mon Feb 08 16:28:46 EST 2021" docASTNodeCount="4799" docActiveCodeLength="28308" docExpressionCount="3290" docLength="30067" endLine="596" length="1" offset="21139" startLine="596" starttimestamp="1612813070441" timestamp="6655736">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="4272" _type="Delete" date="Mon Feb 08 16:28:48 EST 2021" docASTNodeCount="4799" docActiveCodeLength="28305" docExpressionCount="3290" docLength="30064" endLine="595" length="3" offset="21111" repeat="3" startLine="595" starttimestamp="1612813070441" timestamp="6658240" timestamp2="6658525">
    <text><![CDATA[ers]]></text>
  </DocumentChange>
  <DocumentChange __id="4279" _type="Insert" date="Mon Feb 08 16:28:49 EST 2021" docASTNodeCount="4802" docActiveCodeLength="28316" docExpressionCount="3292" docLength="30075" length="11" offset="21111" repeat="11" starttimestamp="1612813070441" timestamp="6659076" timestamp2="6661224">
    <text><![CDATA[es = new ma]]></text>
  </DocumentChange>
  <DocumentChange __id="4304" _type="Delete" date="Mon Feb 08 16:28:52 EST 2021" docASTNodeCount="4800" docActiveCodeLength="28314" docExpressionCount="3292" docLength="30073" endLine="595" length="2" offset="21120" repeat="2" startLine="595" starttimestamp="1612813070441" timestamp="6661634" timestamp2="6662099">
    <text><![CDATA[ma]]></text>
  </DocumentChange>
  <DocumentChange __id="4306" _type="Insert" date="Mon Feb 08 16:28:52 EST 2021" docASTNodeCount="4802" docActiveCodeLength="28316" docExpressionCount="3292" docLength="30075" length="2" offset="21120" repeat="2" starttimestamp="1612813070441" timestamp="6662374" timestamp2="6662469">
    <text><![CDATA[ha]]></text>
  </DocumentChange>
  <DocumentChange __id="4312" _type="Replace" date="Mon Feb 08 16:28:53 EST 2021" docASTNodeCount="4803" docActiveCodeLength="28323" docExpressionCount="3292" docLength="30082" endLine="595" insertionLength="9" int_docASTNodeCount="4800" int_docActiveCodeLength="28314" int_docExpressionCount="3292" int_docLength="30073" length="2" offset="21120" startLine="595" starttimestamp="1612813070441" timestamp="6662826">
    <deletedText><![CDATA[ha]]></deletedText>
    <insertedText><![CDATA[HashMap<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4313" _type="Insert" date="Mon Feb 08 16:28:53 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28326" docExpressionCount="3361" docLength="30085" length="3" offset="21129" repeat="2" starttimestamp="1612813070441" timestamp="6662846" timestamp2="6663924">
    <text><![CDATA[();]]></text>
  </DocumentChange>
  <DocumentChange __id="4321" _type="Delete" date="Mon Feb 08 16:28:56 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28325" docExpressionCount="3361" docLength="30084" endLine="609" length="1" offset="21722" startLine="609" starttimestamp="1612813070441" timestamp="6666370">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="4325" _type="Delete" date="Mon Feb 08 16:28:58 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28324" docExpressionCount="3361" docLength="30083" endLine="611" length="1" offset="21767" startLine="611" starttimestamp="1612813070441" timestamp="6667844">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="4328" _type="Delete" date="Mon Feb 08 16:28:59 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28323" docExpressionCount="3361" docLength="30082" endLine="612" length="1" offset="21912" startLine="612" starttimestamp="1612813070441" timestamp="6668713">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="4334" _type="Insert" date="Mon Feb 08 16:29:16 EST 2021" docASTNodeCount="4805" docActiveCodeLength="28329" docExpressionCount="3293" docLength="30088" length="6" offset="21666" repeat="6" starttimestamp="1612813070441" timestamp="6685748" timestamp2="6688111">
    <text><![CDATA[lasees]]></text>
  </DocumentChange>
  <DocumentChange __id="4345" _type="Replace" date="Mon Feb 08 16:29:19 EST 2021" docASTNodeCount="4805" docActiveCodeLength="28335" docExpressionCount="3293" docLength="30094" endLine="606" insertionLength="12" int_docASTNodeCount="4902" int_docActiveCodeLength="28323" int_docExpressionCount="3361" int_docLength="30082" length="6" offset="21666" startLine="606" starttimestamp="1612813070441" timestamp="6688629">
    <deletedText><![CDATA[lasees]]></deletedText>
    <insertedText><![CDATA[lastSearches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4347" _type="Insert" date="Mon Feb 08 16:29:19 EST 2021" docASTNodeCount="4807" docActiveCodeLength="28338" docExpressionCount="3295" docLength="30097" length="3" offset="21678" repeat="3" starttimestamp="1612813070441" timestamp="6688913" timestamp2="6689380">
    <text><![CDATA[.pu]]></text>
  </DocumentChange>
  <DocumentChange __id="4353" _type="Replace" date="Mon Feb 08 16:29:20 EST 2021" docASTNodeCount="4809" docActiveCodeLength="28351" docExpressionCount="3297" docLength="30110" endLine="606" insertionLength="15" int_docASTNodeCount="4796" int_docActiveCodeLength="28336" int_docExpressionCount="3289" int_docLength="30095" length="2" offset="21679" startLine="606" starttimestamp="1612813070441" timestamp="6689573">
    <deletedText><![CDATA[pu]]></deletedText>
    <insertedText><![CDATA[put(key, value)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4355" _type="Replace" date="Mon Feb 08 16:29:39 EST 2021" docASTNodeCount="4809" docActiveCodeLength="28349" docExpressionCount="3297" docLength="30108" endLine="606" insertionLength="1" int_docASTNodeCount="4808" int_docActiveCodeLength="28348" int_docExpressionCount="3296" int_docLength="30107" length="3" offset="21683" startLine="606" starttimestamp="1612813070441" timestamp="6709389">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4358" _type="Insert" date="Mon Feb 08 16:29:39 EST 2021" docASTNodeCount="4809" docActiveCodeLength="28354" docExpressionCount="3297" docLength="30113" length="5" offset="21684" repeat="5" starttimestamp="1612813070441" timestamp="6709444" timestamp2="6711194">
    <text><![CDATA[astse]]></text>
  </DocumentChange>
  <DocumentChange __id="4367" _type="Replace" date="Mon Feb 08 16:29:41 EST 2021" docASTNodeCount="4809" docActiveCodeLength="28358" docExpressionCount="3297" docLength="30117" endLine="606" insertionLength="10" int_docASTNodeCount="4808" int_docActiveCodeLength="28348" int_docExpressionCount="3296" int_docLength="30107" length="6" offset="21683" startLine="606" starttimestamp="1612813070441" timestamp="6711526">
    <deletedText><![CDATA[lastse]]></deletedText>
    <insertedText><![CDATA[lastSearch]]></insertedText>
  </DocumentChange>
  <Command __id="4364" _type="PauseCommand" date="Mon Feb 08 16:29:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6711087">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1423]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4366" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:29:41 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6711518" />
  <Command __id="4368" _type="InsertStringCommand" date="Mon Feb 08 16:29:41 EST 2021" starttimestamp="1612813070441" timestamp="6711534" timestamp2="6711534">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4370" _type="InsertStringCommand" date="Mon Feb 08 16:29:42 EST 2021" starttimestamp="1612813070441" timestamp="6712074" timestamp2="6712074">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4371" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:29:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6712171" />
  <Command __id="4373" _type="PauseCommand" date="Mon Feb 08 16:29:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6713880">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1709]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4378" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:29:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6715034" />
  <Command __id="4380" _type="InsertStringCommand" date="Mon Feb 08 16:29:45 EST 2021" starttimestamp="1612813070441" timestamp="6715059" timestamp2="6715059">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4382" _type="InsertStringCommand" date="Mon Feb 08 16:29:45 EST 2021" starttimestamp="1612813070441" timestamp="6715280" timestamp2="6715280">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4383" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:29:45 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6715371" />
  <Command __id="4387" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:29:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6716169" />
  <Command __id="4389" _type="InsertStringCommand" date="Mon Feb 08 16:29:46 EST 2021" starttimestamp="1612813070441" timestamp="6716289" timestamp2="6716289">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4391" _type="InsertStringCommand" date="Mon Feb 08 16:29:47 EST 2021" starttimestamp="1612813070441" timestamp="6716686" timestamp2="6716686">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4393" _type="InsertStringCommand" date="Mon Feb 08 16:29:47 EST 2021" starttimestamp="1612813070441" timestamp="6716956" timestamp2="6716956">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="4395" _type="InsertStringCommand" date="Mon Feb 08 16:29:47 EST 2021" starttimestamp="1612813070441" timestamp="6717056" timestamp2="6717056">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4397" _type="InsertStringCommand" date="Mon Feb 08 16:29:47 EST 2021" starttimestamp="1612813070441" timestamp="6717175" timestamp2="6717175">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="4399" _type="InsertStringCommand" date="Mon Feb 08 16:29:47 EST 2021" starttimestamp="1612813070441" timestamp="6717412" timestamp2="6717412">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4401" _type="InsertStringCommand" date="Mon Feb 08 16:29:47 EST 2021" starttimestamp="1612813070441" timestamp="6717510" timestamp2="6717510">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4403" _type="InsertStringCommand" date="Mon Feb 08 16:29:48 EST 2021" starttimestamp="1612813070441" timestamp="6717629" timestamp2="6717629">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4405" _type="InsertStringCommand" date="Mon Feb 08 16:29:48 EST 2021" starttimestamp="1612813070441" timestamp="6717722" timestamp2="6717722">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="4407" _type="InsertStringCommand" date="Mon Feb 08 16:29:48 EST 2021" starttimestamp="1612813070441" timestamp="6717919" timestamp2="6717919">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4409" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:29:48 EST 2021" starttimestamp="1612813070441" timestamp="6718187" />
  <Command __id="4411" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:29:48 EST 2021" starttimestamp="1612813070441" timestamp="6718308" />
  <Command __id="4413" _type="InsertStringCommand" date="Mon Feb 08 16:29:48 EST 2021" starttimestamp="1612813070441" timestamp="6718410" timestamp2="6718410">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4415" _type="InsertStringCommand" date="Mon Feb 08 16:29:49 EST 2021" starttimestamp="1612813070441" timestamp="6718702" timestamp2="6718702">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4416" _type="InsertStringCommand" date="Mon Feb 08 16:29:49 EST 2021" starttimestamp="1612813070441" timestamp="6719312" timestamp2="6719312">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="4417" _type="InsertStringCommand" date="Mon Feb 08 16:29:50 EST 2021" starttimestamp="1612813070441" timestamp="6719766" timestamp2="6719766">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="4419" _type="PauseCommand" date="Mon Feb 08 16:30:04 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6733807">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[14041]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="4418" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:30:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6733807" />
  <Command __id="4420" _type="MoveCaretCommand" caretOffset="1154" date="Mon Feb 08 16:30:04 EST 2021" docOffset="21096" starttimestamp="1612813070441" timestamp="6733836" />
  <Command __id="4421" _type="SelectTextCommand" caretOffset="1157" date="Mon Feb 08 16:30:04 EST 2021" end="1157" start="1151" starttimestamp="1612813070441" timestamp="6734011" />
  <Command __id="4423" _type="PauseCommand" date="Mon Feb 08 16:30:51 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="6781467">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[47456]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4422" _type="MoveCaretCommand" caretOffset="1783" date="Mon Feb 08 16:30:51 EST 2021" docOffset="21725" starttimestamp="1612813070441" timestamp="6781467" />
  <Command __id="4424" _type="SelectTextCommand" caretOffset="1786" date="Mon Feb 08 16:30:52 EST 2021" end="1786" start="1781" starttimestamp="1612813070441" timestamp="6781615" />
  <Command __id="4426" _type="PauseCommand" date="Mon Feb 08 16:30:56 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6786132">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4517]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="4427" _type="InsertStringCommand" date="Mon Feb 08 16:30:56 EST 2021" starttimestamp="1612813070441" timestamp="6786140" timestamp2="6786140">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4429" _type="PauseCommand" date="Mon Feb 08 16:30:57 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6787391">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1251]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4430" _type="InsertStringCommand" date="Mon Feb 08 16:30:57 EST 2021" starttimestamp="1612813070441" timestamp="6787393" timestamp2="6787393">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="4432" _type="InsertStringCommand" date="Mon Feb 08 16:30:57 EST 2021" starttimestamp="1612813070441" timestamp="6787518" timestamp2="6787518">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4434" _type="InsertStringCommand" date="Mon Feb 08 16:30:58 EST 2021" starttimestamp="1612813070441" timestamp="6787624" timestamp2="6787624">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="4436" _type="InsertStringCommand" date="Mon Feb 08 16:30:58 EST 2021" starttimestamp="1612813070441" timestamp="6787845" timestamp2="6787845">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4438" _type="InsertStringCommand" date="Mon Feb 08 16:30:58 EST 2021" starttimestamp="1612813070441" timestamp="6787944" timestamp2="6787944">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4440" _type="InsertStringCommand" date="Mon Feb 08 16:30:58 EST 2021" starttimestamp="1612813070441" timestamp="6788083" timestamp2="6788083">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4442" _type="InsertStringCommand" date="Mon Feb 08 16:30:58 EST 2021" starttimestamp="1612813070441" timestamp="6788278" timestamp2="6788278">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4444" _type="InsertStringCommand" date="Mon Feb 08 16:30:59 EST 2021" starttimestamp="1612813070441" timestamp="6788642" timestamp2="6788642">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4445" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:30:59 EST 2021" starttimestamp="1612813070441" timestamp="6789168" />
  <Command __id="4447" _type="PauseCommand" date="Mon Feb 08 16:31:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6790221">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1053]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:31:00 EST 2021" starttimestamp="1612813070441" timestamp="6790221" />
  <Command __id="4449" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:31:01 EST 2021" starttimestamp="1612813070441" timestamp="6790743" />
  <Command __id="4451" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:31:01 EST 2021" starttimestamp="1612813070441" timestamp="6790871" />
  <Command __id="4453" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:31:01 EST 2021" starttimestamp="1612813070441" timestamp="6791071" />
  <Command __id="4455" _type="PauseCommand" date="Mon Feb 08 16:31:02 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6792145">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1074]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4456" _type="InsertStringCommand" date="Mon Feb 08 16:31:02 EST 2021" starttimestamp="1612813070441" timestamp="6792147" timestamp2="6792147">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4457" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:31:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6792188" />
  <Command __id="4459" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:31:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6793626" />
  <Command __id="4461" _type="InsertStringCommand" date="Mon Feb 08 16:31:04 EST 2021" starttimestamp="1612813070441" timestamp="6793643" timestamp2="6793643">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4463" _type="InsertStringCommand" date="Mon Feb 08 16:31:04 EST 2021" starttimestamp="1612813070441" timestamp="6793875" timestamp2="6793875">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4464" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:31:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6793913" />
  <Command __id="4470" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:31:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6794918" />
  <Command __id="4472" _type="InsertStringCommand" date="Mon Feb 08 16:31:05 EST 2021" starttimestamp="1612813070441" timestamp="6794934" timestamp2="6794934">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4474" _type="InsertStringCommand" date="Mon Feb 08 16:31:06 EST 2021" starttimestamp="1612813070441" timestamp="6795922" timestamp2="6795922">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4475" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:31:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6795963" />
  <Command __id="4479" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:31:07 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6796724" />
  <Command __id="4481" _type="InsertStringCommand" date="Mon Feb 08 16:31:07 EST 2021" starttimestamp="1612813070441" timestamp="6796880" timestamp2="6796880">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4483" _type="PauseCommand" date="Mon Feb 08 16:31:11 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6801463">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4583]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="4484" _type="InsertStringCommand" date="Mon Feb 08 16:31:11 EST 2021" starttimestamp="1612813070441" timestamp="6801474" timestamp2="6801474">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4486" _type="PauseCommand" date="Mon Feb 08 16:31:14 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6804389">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2915]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4487" _type="InsertStringCommand" date="Mon Feb 08 16:31:14 EST 2021" starttimestamp="1612813070441" timestamp="6804391" timestamp2="6804391">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4489" _type="InsertStringCommand" date="Mon Feb 08 16:31:15 EST 2021" starttimestamp="1612813070441" timestamp="6804638" timestamp2="6804638">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4491" _type="InsertStringCommand" date="Mon Feb 08 16:31:15 EST 2021" starttimestamp="1612813070441" timestamp="6804741" timestamp2="6804741">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4493" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:31:15 EST 2021" starttimestamp="1612813070441" timestamp="6805547" />
  <Command __id="4495" _type="PauseCommand" date="Mon Feb 08 16:31:18 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6808191">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2644]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4496" _type="InsertStringCommand" date="Mon Feb 08 16:31:18 EST 2021" starttimestamp="1612813070441" timestamp="6808194" timestamp2="6808194">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="4498" _type="InsertStringCommand" date="Mon Feb 08 16:31:18 EST 2021" starttimestamp="1612813070441" timestamp="6808270" timestamp2="6808270">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4500" _type="InsertStringCommand" date="Mon Feb 08 16:31:18 EST 2021" starttimestamp="1612813070441" timestamp="6808396" timestamp2="6808396">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="4502" _type="InsertStringCommand" date="Mon Feb 08 16:31:19 EST 2021" starttimestamp="1612813070441" timestamp="6808734" timestamp2="6808734">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4504" _type="InsertStringCommand" date="Mon Feb 08 16:31:19 EST 2021" starttimestamp="1612813070441" timestamp="6808892" timestamp2="6808892">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4506" _type="InsertStringCommand" date="Mon Feb 08 16:31:19 EST 2021" starttimestamp="1612813070441" timestamp="6809002" timestamp2="6809002">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4508" _type="InsertStringCommand" date="Mon Feb 08 16:31:19 EST 2021" starttimestamp="1612813070441" timestamp="6809226" timestamp2="6809226">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4510" _type="InsertStringCommand" date="Mon Feb 08 16:31:20 EST 2021" starttimestamp="1612813070441" timestamp="6809667" timestamp2="6809667">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4512" _type="PauseCommand" date="Mon Feb 08 16:31:21 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6810715">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1048]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4511" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:31:21 EST 2021" starttimestamp="1612813070441" timestamp="6810715" />
  <Command __id="4513" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:31:21 EST 2021" starttimestamp="1612813070441" timestamp="6810860" />
  <Command __id="4515" _type="InsertStringCommand" date="Mon Feb 08 16:31:22 EST 2021" starttimestamp="1612813070441" timestamp="6811721" timestamp2="6811721">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4517" _type="PauseCommand" date="Mon Feb 08 16:31:23 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6813428">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1707]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4516" _type="MoveCaretCommand" caretOffset="1811" date="Mon Feb 08 16:31:23 EST 2021" docOffset="21753" starttimestamp="1612813070441" timestamp="6813428" />
  <Command __id="4518" _type="SelectTextCommand" caretOffset="1815" date="Mon Feb 08 16:31:24 EST 2021" end="1815" start="1808" starttimestamp="1612813070441" timestamp="6813573" />
  <Command __id="4520" _type="InsertStringCommand" date="Mon Feb 08 16:31:24 EST 2021" starttimestamp="1612813070441" timestamp="6814207" timestamp2="6814207">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="4522" _type="InsertStringCommand" date="Mon Feb 08 16:31:24 EST 2021" starttimestamp="1612813070441" timestamp="6814303" timestamp2="6814303">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="4524" _type="InsertStringCommand" date="Mon Feb 08 16:31:24 EST 2021" starttimestamp="1612813070441" timestamp="6814411" timestamp2="6814411">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="4526" _type="PauseCommand" date="Mon Feb 08 16:31:57 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="6846613">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[32202]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4525" _type="MoveCaretCommand" caretOffset="975" date="Mon Feb 08 16:31:57 EST 2021" docOffset="20917" starttimestamp="1612813070441" timestamp="6846613" />
  <Command __id="4528" _type="PauseCommand" date="Mon Feb 08 16:32:01 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6850861">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4248]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4527" _type="MoveCaretCommand" caretOffset="975" date="Mon Feb 08 16:32:01 EST 2021" docOffset="20917" starttimestamp="1612813070441" timestamp="6850861" />
  <Command __id="4533" _type="MoveCaretCommand" caretOffset="1971" date="Mon Feb 08 16:32:57 EST 2021" docOffset="1971" starttimestamp="1612813070441" timestamp="6906574" />
  <Command __id="4545" _type="PauseCommand" date="Mon Feb 08 16:33:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6925634">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1380]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4546" _type="MoveCaretCommand" caretOffset="1971" date="Mon Feb 08 16:33:16 EST 2021" docOffset="1971" starttimestamp="1612813070441" timestamp="6925783" />
  <Command __id="4548" _type="PauseCommand" date="Mon Feb 08 16:33:22 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="6932284">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6501]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4549" _type="MoveCaretCommand" caretOffset="4445" date="Mon Feb 08 16:33:22 EST 2021" docOffset="33862" starttimestamp="1612813070441" timestamp="6932443" />
  <Command __id="4551" _type="PauseCommand" date="Mon Feb 08 16:33:24 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="6933775">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1332]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4552" _type="MoveCaretCommand" caretOffset="2322" date="Mon Feb 08 16:33:24 EST 2021" docOffset="22264" starttimestamp="1612813070441" timestamp="6933944" />
  <Command __id="4554" _type="PauseCommand" date="Mon Feb 08 16:33:26 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6936254">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2310]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4553" _type="MoveCaretCommand" caretOffset="1826" date="Mon Feb 08 16:33:26 EST 2021" docOffset="21768" starttimestamp="1612813070441" timestamp="6936254" />
  <Command __id="4556" _type="PauseCommand" date="Mon Feb 08 16:33:45 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6955424">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[19170]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4555" _type="MoveCaretCommand" caretOffset="2846" date="Mon Feb 08 16:33:45 EST 2021" docOffset="22788" starttimestamp="1612813070441" timestamp="6955424" />
  <Command __id="4557" _type="MoveCaretCommand" caretOffset="2852" date="Mon Feb 08 16:33:46 EST 2021" docOffset="22794" starttimestamp="1612813070441" timestamp="6955988" />
  <Command __id="4559" _type="PauseCommand" date="Mon Feb 08 16:33:57 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="6966606">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[10618]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4558" _type="MoveCaretCommand" caretOffset="975" date="Mon Feb 08 16:33:57 EST 2021" docOffset="20917" starttimestamp="1612813070441" timestamp="6966606" />
  <Command __id="4560" _type="MoveCaretCommand" caretOffset="927" date="Mon Feb 08 16:33:57 EST 2021" docOffset="20869" starttimestamp="1612813070441" timestamp="6967049" />
  <Command __id="4561" _type="MoveCaretCommand" caretOffset="975" date="Mon Feb 08 16:33:57 EST 2021" docOffset="20917" starttimestamp="1612813070441" timestamp="6967494" />
  <Command __id="4563" _type="PauseCommand" date="Mon Feb 08 16:34:23 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="6993009">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[25515]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4562" _type="MoveCaretCommand" caretOffset="1014" date="Mon Feb 08 16:34:23 EST 2021" docOffset="20956" starttimestamp="1612813070441" timestamp="6993009" />
  <Command __id="4564" _type="MoveCaretCommand" caretOffset="1060" date="Mon Feb 08 16:34:23 EST 2021" docOffset="21002" starttimestamp="1612813070441" timestamp="6993353" />
  <Command __id="4565" _type="MoveCaretCommand" caretOffset="1114" date="Mon Feb 08 16:34:24 EST 2021" docOffset="21056" starttimestamp="1612813070441" timestamp="6993814" />
  <Command __id="4566" _type="MoveCaretCommand" caretOffset="1168" date="Mon Feb 08 16:34:24 EST 2021" docOffset="21110" starttimestamp="1612813070441" timestamp="6994186" />
  <Command __id="4567" _type="MoveCaretCommand" caretOffset="1116" date="Mon Feb 08 16:34:25 EST 2021" docOffset="21058" starttimestamp="1612813070441" timestamp="6994625" />
  <Command __id="4568" _type="MoveCaretCommand" caretOffset="1171" date="Mon Feb 08 16:34:25 EST 2021" docOffset="21113" starttimestamp="1612813070441" timestamp="6994941" />
  <Command __id="4570" _type="PauseCommand" date="Mon Feb 08 16:34:27 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="6997449">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2508]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4569" _type="MoveCaretCommand" caretOffset="712" date="Mon Feb 08 16:34:27 EST 2021" docOffset="20654" starttimestamp="1612813070441" timestamp="6997449" />
  <Command __id="4571" _type="MoveCaretCommand" caretOffset="730" date="Mon Feb 08 16:34:28 EST 2021" docOffset="20672" starttimestamp="1612813070441" timestamp="6998216" />
  <Command __id="4573" _type="InsertStringCommand" date="Mon Feb 08 16:34:29 EST 2021" starttimestamp="1612813070441" timestamp="6998844" timestamp2="6998844">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4575" _type="InsertStringCommand" date="Mon Feb 08 16:34:29 EST 2021" starttimestamp="1612813070441" timestamp="6999131" timestamp2="6999131">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4577" _type="InsertStringCommand" date="Mon Feb 08 16:34:29 EST 2021" starttimestamp="1612813070441" timestamp="6999164" timestamp2="6999164">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4578" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="6999206" />
  <Command __id="4581" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="6999999" />
  <Command __id="4583" _type="InsertStringCommand" date="Mon Feb 08 16:34:30 EST 2021" starttimestamp="1612813070441" timestamp="7000016" timestamp2="7000016">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4585" _type="InsertStringCommand" date="Mon Feb 08 16:34:30 EST 2021" starttimestamp="1612813070441" timestamp="7000411" timestamp2="7000411">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4587" _type="InsertStringCommand" date="Mon Feb 08 16:34:31 EST 2021" starttimestamp="1612813070441" timestamp="7000586" timestamp2="7000586">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4588" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7000627" />
  <Command __id="4590" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7000732" />
  <Command __id="4592" _type="InsertStringCommand" date="Mon Feb 08 16:34:31 EST 2021" starttimestamp="1612813070441" timestamp="7000981" timestamp2="7000981">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="4593" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7001024" />
  <Command __id="4594" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7001060" />
  <Command __id="4596" _type="InsertStringCommand" date="Mon Feb 08 16:34:31 EST 2021" starttimestamp="1612813070441" timestamp="7001434" timestamp2="7001434">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="4598" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7001590" timestamp2="7001590">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4600" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7001693" timestamp2="7001693">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4602" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7001786" timestamp2="7001786">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4604" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7002077" timestamp2="7002077">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4606" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7002139" timestamp2="7002139">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4608" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7002189" timestamp2="7002189">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4609" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:32 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7002232" />
  <Command __id="4611" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:32 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7002411" />
  <Command __id="4613" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7002421" timestamp2="7002421">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4615" _type="InsertStringCommand" date="Mon Feb 08 16:34:32 EST 2021" starttimestamp="1612813070441" timestamp="7002457" timestamp2="7002457">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4616" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:32 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7002499" />
  <Command __id="4619" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:33 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7003004" />
  <Command __id="4622" _type="InsertStringCommand" date="Mon Feb 08 16:34:33 EST 2021" starttimestamp="1612813070441" timestamp="7003138" timestamp2="7003138">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4624" _type="PauseCommand" date="Mon Feb 08 16:34:35 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7004758">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1620]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4623" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:34:35 EST 2021" starttimestamp="1612813070441" timestamp="7004758" />
  <Command __id="4626" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:34:35 EST 2021" starttimestamp="1612813070441" timestamp="7005247" />
  <Command __id="4628" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:34:36 EST 2021" starttimestamp="1612813070441" timestamp="7005650" />
  <Command __id="4630" _type="InsertStringCommand" date="Mon Feb 08 16:34:36 EST 2021" starttimestamp="1612813070441" timestamp="7006094" timestamp2="7006094">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4632" _type="InsertStringCommand" date="Mon Feb 08 16:34:36 EST 2021" starttimestamp="1612813070441" timestamp="7006118" timestamp2="7006118">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4633" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:36 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7006160" />
  <Command __id="4636" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:37 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7006656" />
  <Command __id="4638" _type="InsertStringCommand" date="Mon Feb 08 16:34:37 EST 2021" starttimestamp="1612813070441" timestamp="7006681" timestamp2="7006681">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4640" _type="InsertStringCommand" date="Mon Feb 08 16:34:37 EST 2021" starttimestamp="1612813070441" timestamp="7006907" timestamp2="7006907">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="4642" _type="InsertStringCommand" date="Mon Feb 08 16:34:37 EST 2021" starttimestamp="1612813070441" timestamp="7007134" timestamp2="7007134">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4644" _type="InsertStringCommand" date="Mon Feb 08 16:34:37 EST 2021" starttimestamp="1612813070441" timestamp="7007426" timestamp2="7007426">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4645" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7007468" />
  <Command __id="4652" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:39 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7008571" />
  <Command __id="4654" _type="InsertStringCommand" date="Mon Feb 08 16:34:39 EST 2021" starttimestamp="1612813070441" timestamp="7008716" timestamp2="7008716">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4655" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:39 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7008758" />
  <Command __id="4656" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:39 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7008906" />
  <Command __id="4658" _type="InsertStringCommand" date="Mon Feb 08 16:34:39 EST 2021" starttimestamp="1612813070441" timestamp="7008921" timestamp2="7008921">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4660" _type="InsertStringCommand" date="Mon Feb 08 16:34:39 EST 2021" starttimestamp="1612813070441" timestamp="7009398" timestamp2="7009398">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="4662" _type="InsertStringCommand" date="Mon Feb 08 16:34:40 EST 2021" starttimestamp="1612813070441" timestamp="7009887" timestamp2="7009887">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4664" _type="PauseCommand" date="Mon Feb 08 16:34:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7011378">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1491]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4665" _type="InsertStringCommand" date="Mon Feb 08 16:34:41 EST 2021" starttimestamp="1612813070441" timestamp="7011381" timestamp2="7011381">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="4667" _type="InsertStringCommand" date="Mon Feb 08 16:34:42 EST 2021" starttimestamp="1612813070441" timestamp="7011935" timestamp2="7011935">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4669" _type="InsertStringCommand" date="Mon Feb 08 16:34:42 EST 2021" starttimestamp="1612813070441" timestamp="7012178" timestamp2="7012178">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="4671" _type="InsertStringCommand" date="Mon Feb 08 16:34:42 EST 2021" starttimestamp="1612813070441" timestamp="7012474" timestamp2="7012474">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="4673" _type="InsertStringCommand" date="Mon Feb 08 16:34:43 EST 2021" starttimestamp="1612813070441" timestamp="7012679" timestamp2="7012679">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4675" _type="InsertStringCommand" date="Mon Feb 08 16:34:43 EST 2021" starttimestamp="1612813070441" timestamp="7012756" timestamp2="7012756">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4677" _type="InsertStringCommand" date="Mon Feb 08 16:34:43 EST 2021" starttimestamp="1612813070441" timestamp="7012816" timestamp2="7012816">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4679" _type="InsertStringCommand" date="Mon Feb 08 16:34:43 EST 2021" starttimestamp="1612813070441" timestamp="7013041" timestamp2="7013041">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4681" _type="InsertStringCommand" date="Mon Feb 08 16:34:43 EST 2021" starttimestamp="1612813070441" timestamp="7013138" timestamp2="7013138">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4683" _type="InsertStringCommand" date="Mon Feb 08 16:34:43 EST 2021" starttimestamp="1612813070441" timestamp="7013230" timestamp2="7013230">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4685" _type="InsertStringCommand" date="Mon Feb 08 16:34:43 EST 2021" starttimestamp="1612813070441" timestamp="7013362" timestamp2="7013362">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4531" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:32:56 EST 2021" docASTNodeCount="452" docActiveCodeLength="3401" docExpressionCount="274" docLength="3575" projectName="Hermes" starttimestamp="1612813070441" timestamp="6906407">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.HashMap;¶import java.util.Map;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	¶	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; ¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶//		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶//			return "Search Result";¶//		}¶		return "Search Result";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4534" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:33:08 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6918423">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4537" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:33:13 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1612813070441" timestamp="6923186">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_PAUSE = "pause";¶	private static final String XML_PREV_TYPE = "prevType";¶	private static final String XML_NEXT_TYPE = "nextType";¶	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; ¶	private String prev, next, range, prevType, nextType;¶	private long pause;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {¶		this.prev = prev.getCommandType();¶		this.next = next.getCommandType();¶		this.pause = pause;¶		this.range = range;¶		prevType = getType(prev);¶		nextType = getType(next);¶	}¶	¶	private String getType(EHICommand command) {¶		if (command instanceof InsertStringCommand || command instanceof Insert ||¶				command instanceof CopyCommand ||¶				command instanceof Delete ||¶				command instanceof Replace || command instanceof PasteCommand ||¶				command instanceof AssistCommand) {¶			return TYPES[0];¶		}¶		if (command instanceof RunCommand && (command.getAttributesMap().get("type").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {¶			return TYPES[1];¶		}¶		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {¶			return TYPES[2];¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return TYPES[3];¶		}¶		if (command instanceof ExceptionCommand) {¶			return TYPES[4];¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return TYPES[5];¶		}¶		if (command instanceof WebCommand) {¶			return TYPES[6];¶		}¶		if (command instanceof EclipseCommand) {¶			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();¶			if (id.contains("delete")) {¶				return TYPES[0];¶			}¶			if (id.contains("save")) {¶				return TYPES[7];¶			}¶			if (id.contains("terminate")) {¶				return TYPES[10];¶			}¶			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {¶				return TYPES[12];¶			}¶		}¶		if (command instanceof ShellCommand) {¶			String type = command.getAttributesMap().get("type").toLowerCase();¶			if (type.contains("gained_focus")) {¶				return TYPES[8];¶			}¶			if (type.contains("lost_focus") || type.contains("minimized")) {¶				return TYPES[9];¶			}¶		}¶		if (command instanceof DifficultyCommand) {¶			return TYPES[11];¶		}¶		if (command instanceof MoveCaretCommand) {¶			return TYPES[12];¶		}¶		if (command instanceof FileOpenCommand) {¶			return TYPES[13];¶		}¶		if (command instanceof SelectTextCommand) {¶			return TYPES[14];¶		}¶		if (command instanceof CompilationCommand) {¶			return TYPES[15];¶		}¶		return TYPES[16];¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_PAUSE, pause+"");¶		dataMap.put(XML_PREV_TYPE, prevType);¶		dataMap.put(XML_NEXT_TYPE, nextType);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			pause = Long.parseLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prevType = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			nextType = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4540" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:33:14 EST 2021" docASTNodeCount="452" docActiveCodeLength="3401" docExpressionCount="274" docLength="3575" projectName="Hermes" starttimestamp="1612813070441" timestamp="6923573">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.HashMap;¶import java.util.Map;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	¶	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; ¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶//		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶//			return "Search Result";¶//		}¶		return "Search Result";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4542" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:33:14 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1612813070441" timestamp="6924107">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_PAUSE = "pause";¶	private static final String XML_PREV_TYPE = "prevType";¶	private static final String XML_NEXT_TYPE = "nextType";¶	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; ¶	private String prev, next, range, prevType, nextType;¶	private long pause;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {¶		this.prev = prev.getCommandType();¶		this.next = next.getCommandType();¶		this.pause = pause;¶		this.range = range;¶		prevType = getType(prev);¶		nextType = getType(next);¶	}¶	¶	private String getType(EHICommand command) {¶		if (command instanceof InsertStringCommand || command instanceof Insert ||¶				command instanceof CopyCommand ||¶				command instanceof Delete ||¶				command instanceof Replace || command instanceof PasteCommand ||¶				command instanceof AssistCommand) {¶			return TYPES[0];¶		}¶		if (command instanceof RunCommand && (command.getAttributesMap().get("type").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {¶			return TYPES[1];¶		}¶		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {¶			return TYPES[2];¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return TYPES[3];¶		}¶		if (command instanceof ExceptionCommand) {¶			return TYPES[4];¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return TYPES[5];¶		}¶		if (command instanceof WebCommand) {¶			return TYPES[6];¶		}¶		if (command instanceof EclipseCommand) {¶			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();¶			if (id.contains("delete")) {¶				return TYPES[0];¶			}¶			if (id.contains("save")) {¶				return TYPES[7];¶			}¶			if (id.contains("terminate")) {¶				return TYPES[10];¶			}¶			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {¶				return TYPES[12];¶			}¶		}¶		if (command instanceof ShellCommand) {¶			String type = command.getAttributesMap().get("type").toLowerCase();¶			if (type.contains("gained_focus")) {¶				return TYPES[8];¶			}¶			if (type.contains("lost_focus") || type.contains("minimized")) {¶				return TYPES[9];¶			}¶		}¶		if (command instanceof DifficultyCommand) {¶			return TYPES[11];¶		}¶		if (command instanceof MoveCaretCommand) {¶			return TYPES[12];¶		}¶		if (command instanceof FileOpenCommand) {¶			return TYPES[13];¶		}¶		if (command instanceof SelectTextCommand) {¶			return TYPES[14];¶		}¶		if (command instanceof CompilationCommand) {¶			return TYPES[15];¶		}¶		return TYPES[16];¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_PAUSE, pause+"");¶		dataMap.put(XML_PREV_TYPE, prevType);¶		dataMap.put(XML_NEXT_TYPE, nextType);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			pause = Long.parseLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prevType = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			nextType = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4544" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:33:16 EST 2021" docASTNodeCount="452" docActiveCodeLength="3401" docExpressionCount="274" docLength="3575" projectName="Hermes" starttimestamp="1612813070441" timestamp="6925634">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.HashMap;¶import java.util.Map;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	¶	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; ¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶//		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶//			return "Search Result";¶//		}¶		return "Search Result";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4547" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:33:22 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6932284">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4550" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:33:24 EST 2021" docASTNodeCount="4918" docActiveCodeLength="28414" docExpressionCount="3376" docLength="30173" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="6933775">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			"), Diff(DELETE,"Web"), Diff(INSERT,"Map<String, String> searchWords = new HashMap<>();¶			Map<String, String> lastSearches = new HashMap<>();¶			EHI"), Diff(EQUAL,"Command lastSearc"), Diff(DELETE,"c"), Diff(EQUAL,"h = null;¶			"), Diff(INSERT,"EHICommand lastPage = null;¶			"), Diff(EQUAL,"for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							if (command.getAttributesMap().get("type").equals(""), Diff(INSERT,"Google "), Diff(EQUAL,"Search")) {¶								"), Diff(INSERT,"if (lastPage != null) {¶									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));¶								}¶								lastPage = null;¶								lastSearch = command;¶							} ¶							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {¶								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));¶								lastPage = command;"), Diff(EQUAL,"¶							}¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, String> searchWords = new HashMap<>();
			Map<String, String> lastSearches = new HashMap<>();
			EHICommand lastSearch = null;
			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							if (command.getAttributesMap().get("type").equals("Google Search")) {
								if (lastPage != null) {
									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));
								}
								lastPage = null;
								lastSearch = command;
							} 
							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {
								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));
								lastPage = command;
							}
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="4572" _type="Insert" date="Mon Feb 08 16:34:29 EST 2021" docASTNodeCount="4821" docActiveCodeLength="28422" docExpressionCount="3308" docLength="30181" length="8" offset="20672" repeat="5" starttimestamp="1612813070441" timestamp="6998836" timestamp2="6999375">
    <text><![CDATA[
		file]]></text>
  </DocumentChange>
  <DocumentChange __id="4582" _type="Replace" date="Mon Feb 08 16:34:30 EST 2021" docASTNodeCount="4821" docActiveCodeLength="28422" docExpressionCount="3308" docLength="30181" endLine="582" insertionLength="4" int_docASTNodeCount="4918" int_docActiveCodeLength="28418" int_docExpressionCount="3376" int_docLength="30177" length="4" offset="20676" startLine="582" starttimestamp="1612813070441" timestamp="7000008">
    <deletedText><![CDATA[file]]></deletedText>
    <insertedText><![CDATA[File]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4584" _type="Insert" date="Mon Feb 08 16:34:30 EST 2021" docASTNodeCount="4827" docActiveCodeLength="28438" docExpressionCount="3311" docLength="30197" length="16" offset="20680" repeat="16" starttimestamp="1612813070441" timestamp="7000407" timestamp2="7002989">
    <text><![CDATA[ csv2 = new file]]></text>
  </DocumentChange>
  <DocumentChange __id="4620" _type="Replace" date="Mon Feb 08 16:34:33 EST 2021" docASTNodeCount="4827" docActiveCodeLength="28440" docExpressionCount="3311" docLength="30199" endLine="582" insertionLength="4" int_docASTNodeCount="4827" int_docActiveCodeLength="28436" int_docExpressionCount="3311" int_docLength="30195" length="2" offset="20692" startLine="582" starttimestamp="1612813070441" timestamp="7003011">
    <deletedText><![CDATA[fi]]></deletedText>
    <insertedText><![CDATA[File]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4621" _type="Replace" date="Mon Feb 08 16:34:33 EST 2021" docASTNodeCount="4828" docActiveCodeLength="28448" docExpressionCount="3312" docLength="30207" endLine="582" insertionLength="10" int_docASTNodeCount="4827" int_docActiveCodeLength="28438" int_docExpressionCount="3311" int_docLength="30197" length="2" offset="20696" startLine="582" starttimestamp="1612813070441" timestamp="7003022">
    <deletedText><![CDATA[le]]></deletedText>
    <insertedText><![CDATA[(pathname)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4625" _type="Delete" date="Mon Feb 08 16:34:35 EST 2021" docASTNodeCount="4827" docActiveCodeLength="28440" docExpressionCount="3311" docLength="30199" endLine="582" length="8" offset="20697" repeat="2" startLine="582" starttimestamp="1612813070441" timestamp="7005242" timestamp2="7005643">
    <text><![CDATA[pathname]]></text>
  </DocumentChange>
  <DocumentChange __id="4629" _type="Insert" date="Mon Feb 08 16:34:36 EST 2021" docASTNodeCount="4828" docActiveCodeLength="28444" docExpressionCount="3312" docLength="30203" length="4" offset="20697" repeat="4" starttimestamp="1612813070441" timestamp="7006086" timestamp2="7006418">
    <text><![CDATA[fold]]></text>
  </DocumentChange>
  <DocumentChange __id="4637" _type="Replace" date="Mon Feb 08 16:34:37 EST 2021" docASTNodeCount="4828" docActiveCodeLength="28446" docExpressionCount="3312" docLength="30205" endLine="582" insertionLength="6" int_docASTNodeCount="4827" int_docActiveCodeLength="28440" int_docExpressionCount="3311" int_docLength="30199" length="4" offset="20697" startLine="582" starttimestamp="1612813070441" timestamp="7006671">
    <deletedText><![CDATA[fold]]></deletedText>
    <insertedText><![CDATA[folder]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4639" _type="Insert" date="Mon Feb 08 16:34:37 EST 2021" docASTNodeCount="4829" docActiveCodeLength="28450" docExpressionCount="3313" docLength="30209" length="4" offset="20703" repeat="4" starttimestamp="1612813070441" timestamp="7006903" timestamp2="7007629">
    <text><![CDATA[, as]]></text>
  </DocumentChange>
  <DocumentChange __id="4647" _type="Delete" date="Mon Feb 08 16:34:38 EST 2021" docASTNodeCount="4828" docActiveCodeLength="28447" docExpressionCount="3313" docLength="30206" endLine="582" length="3" offset="20704" repeat="3" startLine="582" starttimestamp="1612813070441" timestamp="7007909" timestamp2="7008155">
    <text><![CDATA[ as]]></text>
  </DocumentChange>
  <DocumentChange __id="4650" _type="Insert" date="Mon Feb 08 16:34:38 EST 2021" docASTNodeCount="4829" docActiveCodeLength="28450" docExpressionCount="3313" docLength="30209" length="3" offset="20704" repeat="3" starttimestamp="1612813070441" timestamp="7008387" timestamp2="7008711">
    <text><![CDATA[ass]]></text>
  </DocumentChange>
  <DocumentChange __id="4657" _type="Replace" date="Mon Feb 08 16:34:39 EST 2021" docASTNodeCount="4829" docActiveCodeLength="28453" docExpressionCount="3313" docLength="30212" endLine="582" insertionLength="6" int_docASTNodeCount="4828" int_docActiveCodeLength="28447" int_docExpressionCount="3313" int_docLength="30206" length="3" offset="20704" startLine="582" starttimestamp="1612813070441" timestamp="7008914">
    <deletedText><![CDATA[ass]]></deletedText>
    <insertedText><![CDATA[assign]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4659" _type="Insert" date="Mon Feb 08 16:34:39 EST 2021" docASTNodeCount="4831" docActiveCodeLength="28467" docExpressionCount="3315" docLength="30226" length="14" offset="20710" repeat="13" starttimestamp="1612813070441" timestamp="7009392" timestamp2="7013361">
    <text><![CDATA[+"WebSearches"]]></text>
  </DocumentChange>
  <DocumentChange __id="4686" _type="Insert" date="Mon Feb 08 16:34:46 EST 2021" docASTNodeCount="4831" docActiveCodeLength="28469" docExpressionCount="3315" docLength="30228" length="2" offset="20723" repeat="2" starttimestamp="1612813070441" timestamp="7015858" timestamp2="7016086">
    <text><![CDATA[.s]]></text>
  </DocumentChange>
  <DocumentChange __id="4691" _type="Delete" date="Mon Feb 08 16:34:46 EST 2021" docASTNodeCount="4831" docActiveCodeLength="28468" docExpressionCount="3315" docLength="30227" endLine="582" length="1" offset="20724" startLine="582" starttimestamp="1612813070441" timestamp="7016445">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="4693" _type="Insert" date="Mon Feb 08 16:34:46 EST 2021" docASTNodeCount="4831" docActiveCodeLength="28471" docExpressionCount="3315" docLength="30230" length="3" offset="20724" repeat="3" starttimestamp="1612813070441" timestamp="7016541" timestamp2="7016774">
    <text><![CDATA[csv]]></text>
  </DocumentChange>
  <Command __id="4687" _type="PauseCommand" date="Mon Feb 08 16:34:46 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7015858">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2496]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4688" _type="InsertStringCommand" date="Mon Feb 08 16:34:46 EST 2021" starttimestamp="1612813070441" timestamp="7015861" timestamp2="7015861">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4690" _type="InsertStringCommand" date="Mon Feb 08 16:34:46 EST 2021" starttimestamp="1612813070441" timestamp="7016089" timestamp2="7016089">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4692" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:34:46 EST 2021" starttimestamp="1612813070441" timestamp="7016449" />
  <Command __id="4694" _type="InsertStringCommand" date="Mon Feb 08 16:34:46 EST 2021" starttimestamp="1612813070441" timestamp="7016544" timestamp2="7016544">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4696" _type="InsertStringCommand" date="Mon Feb 08 16:34:47 EST 2021" starttimestamp="1612813070441" timestamp="7016567" timestamp2="7016567">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4698" _type="InsertStringCommand" date="Mon Feb 08 16:34:47 EST 2021" starttimestamp="1612813070441" timestamp="7016778" timestamp2="7016778">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="4699" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:34:47 EST 2021" starttimestamp="1612813070441" timestamp="7017427" />
  <Command __id="4701" _type="InsertStringCommand" date="Mon Feb 08 16:34:48 EST 2021" starttimestamp="1612813070441" timestamp="7018110" timestamp2="7018110">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4703" _type="InsertStringCommand" date="Mon Feb 08 16:34:49 EST 2021" starttimestamp="1612813070441" timestamp="7018941" timestamp2="7018941">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4705" _type="InsertStringCommand" date="Mon Feb 08 16:34:49 EST 2021" starttimestamp="1612813070441" timestamp="7019455" timestamp2="7019455">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4706" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7019496" />
  <Command __id="4712" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:50 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7020289" />
  <Command __id="4714" _type="InsertStringCommand" date="Mon Feb 08 16:34:50 EST 2021" starttimestamp="1612813070441" timestamp="7020302" timestamp2="7020302">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4716" _type="InsertStringCommand" date="Mon Feb 08 16:34:51 EST 2021" starttimestamp="1612813070441" timestamp="7021017" timestamp2="7021017">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4718" _type="InsertStringCommand" date="Mon Feb 08 16:34:51 EST 2021" starttimestamp="1612813070441" timestamp="7021178" timestamp2="7021178">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4719" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7021221" />
  <Command __id="4721" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7021342" />
  <Command __id="4723" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:34:52 EST 2021" starttimestamp="1612813070441" timestamp="7021993" />
  <Command __id="4725" _type="InsertStringCommand" date="Mon Feb 08 16:34:52 EST 2021" starttimestamp="1612813070441" timestamp="7022104" timestamp2="7022104">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4726" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:52 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7022146" />
  <Command __id="4728" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7022283" />
  <Command __id="4730" _type="InsertStringCommand" date="Mon Feb 08 16:34:52 EST 2021" starttimestamp="1612813070441" timestamp="7022409" timestamp2="7022409">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4731" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:34:53 EST 2021" starttimestamp="1612813070441" timestamp="7023141" />
  <Command __id="4732" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:34:53 EST 2021" starttimestamp="1612813070441" timestamp="7023537" />
  <Command __id="4733" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:34:54 EST 2021" starttimestamp="1612813070441" timestamp="7023686" />
  <Command __id="4734" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:34:54 EST 2021" starttimestamp="1612813070441" timestamp="7024114" />
  <Command __id="4736" _type="InsertStringCommand" date="Mon Feb 08 16:34:55 EST 2021" starttimestamp="1612813070441" timestamp="7025091" timestamp2="7025091">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4738" _type="InsertStringCommand" date="Mon Feb 08 16:34:55 EST 2021" starttimestamp="1612813070441" timestamp="7025431" timestamp2="7025431">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4739" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:55 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7025473" />
  <Command __id="4741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7025685" />
  <Command __id="4743" _type="InsertStringCommand" date="Mon Feb 08 16:34:56 EST 2021" starttimestamp="1612813070441" timestamp="7025779" timestamp2="7025779">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4745" _type="InsertStringCommand" date="Mon Feb 08 16:34:56 EST 2021" starttimestamp="1612813070441" timestamp="7026103" timestamp2="7026103">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4746" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7026139" />
  <Command __id="4750" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7026806" />
  <Command __id="4752" _type="InsertStringCommand" date="Mon Feb 08 16:34:57 EST 2021" starttimestamp="1612813070441" timestamp="7026820" timestamp2="7026820">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4753" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:34:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7026872" />
  <Command __id="4759" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:34:58 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7028490" />
  <Command __id="4761" _type="InsertStringCommand" date="Mon Feb 08 16:34:58 EST 2021" starttimestamp="1612813070441" timestamp="7028504" timestamp2="7028504">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4762" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:34:59 EST 2021" starttimestamp="1612813070441" timestamp="7029192" />
  <Command __id="4764" _type="InsertStringCommand" date="Mon Feb 08 16:35:00 EST 2021" starttimestamp="1612813070441" timestamp="7029974" timestamp2="7029974">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4765" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:00 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7030016" />
  <Command __id="4769" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:01 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7030658" />
  <Command __id="4771" _type="InsertStringCommand" date="Mon Feb 08 16:35:01 EST 2021" starttimestamp="1612813070441" timestamp="7030672" timestamp2="7030672">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4772" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:01 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7030722" />
  <Command __id="4775" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:01 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7031302" />
  <Command __id="4777" _type="InsertStringCommand" date="Mon Feb 08 16:35:01 EST 2021" starttimestamp="1612813070441" timestamp="7031318" timestamp2="7031318">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4778" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:35:02 EST 2021" starttimestamp="1612813070441" timestamp="7031844" />
  <Command __id="4779" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:35:02 EST 2021" starttimestamp="1612813070441" timestamp="7031948" />
  <DocumentChange __id="4700" _type="Insert" date="Mon Feb 08 16:34:48 EST 2021" docASTNodeCount="4833" docActiveCodeLength="28482" docExpressionCount="3316" docLength="30241" length="11" offset="20729" repeat="8" starttimestamp="1612813070441" timestamp="7018101" timestamp2="7020073">
    <text><![CDATA[;
		filewr]]></text>
  </DocumentChange>
  <DocumentChange __id="4713" _type="Replace" date="Mon Feb 08 16:34:50 EST 2021" docASTNodeCount="4833" docActiveCodeLength="28486" docExpressionCount="3316" docLength="30245" endLine="583" insertionLength="10" int_docASTNodeCount="4930" int_docActiveCodeLength="28476" int_docExpressionCount="3384" int_docLength="30235" length="6" offset="20734" startLine="583" starttimestamp="1612813070441" timestamp="7020296">
    <deletedText><![CDATA[filewr]]></deletedText>
    <insertedText><![CDATA[FileWriter]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4715" _type="Insert" date="Mon Feb 08 16:34:51 EST 2021" docASTNodeCount="4836" docActiveCodeLength="28489" docExpressionCount="3317" docLength="30248" length="3" offset="20744" repeat="3" starttimestamp="1612813070441" timestamp="7021013" timestamp2="7021332">
    <text><![CDATA[ f2]]></text>
  </DocumentChange>
  <DocumentChange __id="4722" _type="Delete" date="Mon Feb 08 16:34:52 EST 2021" docASTNodeCount="4836" docActiveCodeLength="28488" docExpressionCount="3317" docLength="30247" endLine="583" length="1" offset="20746" startLine="583" starttimestamp="1612813070441" timestamp="7021989">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="4724" _type="Insert" date="Mon Feb 08 16:34:52 EST 2021" docASTNodeCount="4935" docActiveCodeLength="28491" docExpressionCount="3386" docLength="30250" length="3" offset="20746" repeat="3" starttimestamp="1612813070441" timestamp="7022099" timestamp2="7022402">
    <text><![CDATA[w2;]]></text>
  </DocumentChange>
  <DocumentChange __id="4735" _type="Insert" date="Mon Feb 08 16:34:55 EST 2021" docASTNodeCount="4836" docActiveCodeLength="28498" docExpressionCount="3317" docLength="30257" length="7" offset="20807" repeat="3" starttimestamp="1612813070441" timestamp="7025079" timestamp2="7025670">
    <text><![CDATA[
			if]]></text>
  </DocumentChange>
  <DocumentChange __id="4742" _type="Replace" date="Mon Feb 08 16:34:56 EST 2021" docASTNodeCount="4938" docActiveCodeLength="28537" docExpressionCount="3387" docLength="30296" endLine="588" insertionLength="41" int_docASTNodeCount="4935" int_docActiveCodeLength="28496" int_docExpressionCount="3386" int_docLength="30255" length="2" offset="20812" startLine="588" starttimestamp="1612813070441" timestamp="7025707">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
				
			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4744" _type="Replace" date="Mon Feb 08 16:34:56 EST 2021" docASTNodeCount="4938" docActiveCodeLength="28516" docExpressionCount="3387" docLength="30275" endLine="588" insertionLength="1" int_docASTNodeCount="4839" int_docActiveCodeLength="28515" int_docExpressionCount="3318" int_docLength="30274" length="22" offset="20816" startLine="588" starttimestamp="1612813070441" timestamp="7026094">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4747" _type="Insert" date="Mon Feb 08 16:34:56 EST 2021" docASTNodeCount="4938" docActiveCodeLength="28519" docExpressionCount="3387" docLength="30278" length="3" offset="20817" repeat="3" starttimestamp="1612813070441" timestamp="7026351" timestamp2="7026622">
    <text><![CDATA[sv2]]></text>
  </DocumentChange>
  <DocumentChange __id="4751" _type="Replace" date="Mon Feb 08 16:34:57 EST 2021" docASTNodeCount="4841" docActiveCodeLength="28520" docExpressionCount="3319" docLength="30279" endLine="588" insertionLength="5" int_docASTNodeCount="4839" int_docActiveCodeLength="28515" int_docExpressionCount="3318" int_docLength="30274" length="4" offset="20816" startLine="588" starttimestamp="1612813070441" timestamp="7026813">
    <deletedText><![CDATA[csv2]]></deletedText>
    <insertedText><![CDATA[csv2.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4754" _type="Insert" date="Mon Feb 08 16:34:57 EST 2021" docASTNodeCount="4940" docActiveCodeLength="28521" docExpressionCount="3389" docLength="30280" length="1" offset="20821" starttimestamp="1612813070441" timestamp="7027132">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="4755" _type="Delete" date="Mon Feb 08 16:34:57 EST 2021" docASTNodeCount="4841" docActiveCodeLength="28520" docExpressionCount="3319" docLength="30279" endLine="588" length="1" offset="20821" startLine="588" starttimestamp="1612813070441" timestamp="7027531">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="4756" _type="Insert" date="Mon Feb 08 16:34:58 EST 2021" docASTNodeCount="4940" docActiveCodeLength="28523" docExpressionCount="3389" docLength="30282" length="3" offset="20821" repeat="3" starttimestamp="1612813070441" timestamp="7027586" timestamp2="7028237">
    <text><![CDATA[exi]]></text>
  </DocumentChange>
  <DocumentChange __id="4760" _type="Replace" date="Mon Feb 08 16:34:58 EST 2021" docASTNodeCount="4940" docActiveCodeLength="28528" docExpressionCount="3389" docLength="30287" endLine="588" insertionLength="8" int_docASTNodeCount="4841" int_docActiveCodeLength="28520" int_docExpressionCount="3319" int_docLength="30279" length="3" offset="20821" startLine="588" starttimestamp="1612813070441" timestamp="7028496">
    <deletedText><![CDATA[exi]]></deletedText>
    <insertedText><![CDATA[exists()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4763" _type="Insert" date="Mon Feb 08 16:35:00 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28532" docExpressionCount="3104" docLength="30291" length="4" offset="20838" repeat="4" starttimestamp="1612813070441" timestamp="7029970" timestamp2="7030458">
    <text><![CDATA[csv2]]></text>
  </DocumentChange>
  <DocumentChange __id="4770" _type="Replace" date="Mon Feb 08 16:35:01 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28533" docExpressionCount="3104" docLength="30292" endLine="589" insertionLength="5" int_docASTNodeCount="4940" int_docActiveCodeLength="28528" int_docExpressionCount="3389" int_docLength="30287" length="4" offset="20838" startLine="589" starttimestamp="1612813070441" timestamp="7030664">
    <deletedText><![CDATA[csv2]]></deletedText>
    <insertedText><![CDATA[csv2.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4773" _type="Insert" date="Mon Feb 08 16:35:01 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28535" docExpressionCount="3104" docLength="30294" length="2" offset="20843" repeat="2" starttimestamp="1612813070441" timestamp="7031038" timestamp2="7031201">
    <text><![CDATA[de]]></text>
  </DocumentChange>
  <DocumentChange __id="4776" _type="Replace" date="Mon Feb 08 16:35:01 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28541" docExpressionCount="3104" docLength="30300" endLine="589" insertionLength="8" int_docASTNodeCount="4510" int_docActiveCodeLength="28533" int_docExpressionCount="3104" int_docLength="30292" length="2" offset="20843" startLine="589" starttimestamp="1612813070441" timestamp="7031309">
    <deletedText><![CDATA[de]]></deletedText>
    <insertedText><![CDATA[delete()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4782" _type="Insert" date="Mon Feb 08 16:35:03 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28550" docExpressionCount="3104" docLength="30309" length="9" offset="20882" repeat="5" starttimestamp="1612813070441" timestamp="7033185" timestamp2="7034343">
    <text><![CDATA[
			csv2]]></text>
  </DocumentChange>
  <DocumentChange __id="4790" _type="Delete" date="Mon Feb 08 16:35:05 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28549" docExpressionCount="3104" docLength="30308" endLine="592" length="1" offset="20890" startLine="592" starttimestamp="1612813070441" timestamp="7034998">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="4791" _type="Insert" date="Mon Feb 08 16:35:05 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28550" docExpressionCount="3104" docLength="30309" length="1" offset="20890" starttimestamp="1612813070441" timestamp="7035488">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="4793" _type="Replace" date="Mon Feb 08 16:35:06 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28551" docExpressionCount="3104" docLength="30310" endLine="592" insertionLength="5" int_docASTNodeCount="4510" int_docActiveCodeLength="28546" int_docExpressionCount="3104" int_docLength="30305" length="4" offset="20887" startLine="592" starttimestamp="1612813070441" timestamp="7035613">
    <deletedText><![CDATA[csv2]]></deletedText>
    <insertedText><![CDATA[csv2.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4796" _type="Insert" date="Mon Feb 08 16:35:06 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28555" docExpressionCount="3104" docLength="30314" length="4" offset="20892" repeat="4" starttimestamp="1612813070441" timestamp="7035967" timestamp2="7036344">
    <text><![CDATA[crea]]></text>
  </DocumentChange>
  <DocumentChange __id="4801" _type="Replace" date="Mon Feb 08 16:35:06 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28566" docExpressionCount="3104" docLength="30325" endLine="592" insertionLength="15" int_docASTNodeCount="4510" int_docActiveCodeLength="28551" int_docExpressionCount="3104" int_docLength="30310" length="4" offset="20892" startLine="592" starttimestamp="1612813070441" timestamp="7036521">
    <deletedText><![CDATA[crea]]></deletedText>
    <insertedText><![CDATA[createNewFile()]]></insertedText>
  </DocumentChange>
  <Command __id="4781" _type="PauseCommand" date="Mon Feb 08 16:35:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7032978">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1030]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4780" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:35:03 EST 2021" starttimestamp="1612813070441" timestamp="7032978" />
  <Command __id="4783" _type="InsertStringCommand" date="Mon Feb 08 16:35:03 EST 2021" starttimestamp="1612813070441" timestamp="7033195" timestamp2="7033195">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4785" _type="InsertStringCommand" date="Mon Feb 08 16:35:04 EST 2021" starttimestamp="1612813070441" timestamp="7033761" timestamp2="7033761">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4786" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7033804" />
  <Command __id="4792" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7035607" />
  <Command __id="4794" _type="InsertStringCommand" date="Mon Feb 08 16:35:06 EST 2021" starttimestamp="1612813070441" timestamp="7035621" timestamp2="7035621">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4795" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7035671" />
  <Command __id="4800" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7036508" />
  <Command __id="4802" _type="InsertStringCommand" date="Mon Feb 08 16:35:06 EST 2021" starttimestamp="1612813070441" timestamp="7036532" timestamp2="7036532">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4804" _type="InsertStringCommand" date="Mon Feb 08 16:35:07 EST 2021" starttimestamp="1612813070441" timestamp="7036739" timestamp2="7036739">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4805" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:35:07 EST 2021" starttimestamp="1612813070441" timestamp="7037447" />
  <Command __id="4806" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:35:08 EST 2021" starttimestamp="1612813070441" timestamp="7037837" />
  <Command __id="4808" _type="InsertStringCommand" date="Mon Feb 08 16:35:09 EST 2021" starttimestamp="1612813070441" timestamp="7038757" timestamp2="7038757">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4810" _type="InsertStringCommand" date="Mon Feb 08 16:35:09 EST 2021" starttimestamp="1612813070441" timestamp="7039081" timestamp2="7039081">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4811" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:09 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7039124" />
  <Command __id="4813" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:10 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7039813" />
  <Command __id="4815" _type="InsertStringCommand" date="Mon Feb 08 16:35:10 EST 2021" starttimestamp="1612813070441" timestamp="7039834" timestamp2="7039834">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4817" _type="InsertStringCommand" date="Mon Feb 08 16:35:10 EST 2021" starttimestamp="1612813070441" timestamp="7040064" timestamp2="7040064">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4819" _type="InsertStringCommand" date="Mon Feb 08 16:35:10 EST 2021" starttimestamp="1612813070441" timestamp="7040142" timestamp2="7040142">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4821" _type="InsertStringCommand" date="Mon Feb 08 16:35:10 EST 2021" starttimestamp="1612813070441" timestamp="7040495" timestamp2="7040495">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4822" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:10 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7040537" />
  <Command __id="4826" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7040801" />
  <Command __id="4828" _type="InsertStringCommand" date="Mon Feb 08 16:35:11 EST 2021" starttimestamp="1612813070441" timestamp="7040877" timestamp2="7040877">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4829" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7040913" />
  <Command __id="4835" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7042040" />
  <Command __id="4838" _type="InsertStringCommand" date="Mon Feb 08 16:35:12 EST 2021" starttimestamp="1612813070441" timestamp="7042218" timestamp2="7042218">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4840" _type="PauseCommand" date="Mon Feb 08 16:35:14 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7043752">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1534]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4839" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:35:14 EST 2021" starttimestamp="1612813070441" timestamp="7043752" />
  <Command __id="4841" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:35:14 EST 2021" starttimestamp="1612813070441" timestamp="7044204" />
  <Command __id="4842" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:35:14 EST 2021" starttimestamp="1612813070441" timestamp="7044380" />
  <Command __id="4843" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:15 EST 2021" starttimestamp="1612813070441" timestamp="7045343" />
  <Command __id="4844" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:15 EST 2021" starttimestamp="1612813070441" timestamp="7045488" />
  <Command __id="4845" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:16 EST 2021" starttimestamp="1612813070441" timestamp="7045611" />
  <Command __id="4846" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:16 EST 2021" starttimestamp="1612813070441" timestamp="7045717" />
  <Command __id="4847" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:16 EST 2021" starttimestamp="1612813070441" timestamp="7045894" />
  <Command __id="4848" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:16 EST 2021" starttimestamp="1612813070441" timestamp="7046044" />
  <Command __id="4849" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:16 EST 2021" starttimestamp="1612813070441" timestamp="7046186" />
  <Command __id="4850" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:16 EST 2021" starttimestamp="1612813070441" timestamp="7046330" />
  <Command __id="4851" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:35:17 EST 2021" starttimestamp="1612813070441" timestamp="7046686" />
  <Command __id="4853" _type="InsertStringCommand" date="Mon Feb 08 16:35:17 EST 2021" starttimestamp="1612813070441" timestamp="7046911" timestamp2="7046911">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="4854" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:35:17 EST 2021" starttimestamp="1612813070441" timestamp="7046992" />
  <Command __id="4856" _type="PauseCommand" date="Mon Feb 08 16:35:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7048173">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1181]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4857" _type="InsertStringCommand" date="Mon Feb 08 16:35:18 EST 2021" starttimestamp="1612813070441" timestamp="7048190" timestamp2="7048190">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4858" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:35:18 EST 2021" starttimestamp="1612813070441" timestamp="7048541" />
  <Command __id="4859" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:35:19 EST 2021" starttimestamp="1612813070441" timestamp="7048701" />
  <Command __id="4861" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:35:19 EST 2021" starttimestamp="1612813070441" timestamp="7049267" />
  <Command __id="4863" _type="InsertStringCommand" date="Mon Feb 08 16:35:20 EST 2021" starttimestamp="1612813070441" timestamp="7049570" timestamp2="7049570">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4864" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7049609" />
  <Command __id="4868" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7050523" />
  <Command __id="4869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:35:21 EST 2021" starttimestamp="1612813070441" timestamp="7051107" />
  <Command __id="4870" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:35:22 EST 2021" starttimestamp="1612813070441" timestamp="7051659" />
  <Command __id="4872" _type="InsertStringCommand" date="Mon Feb 08 16:35:22 EST 2021" starttimestamp="1612813070441" timestamp="7051841" timestamp2="7051841">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4874" _type="InsertStringCommand" date="Mon Feb 08 16:35:22 EST 2021" starttimestamp="1612813070441" timestamp="7052443" timestamp2="7052443">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4875" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:22 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7052486" />
  <Command __id="4882" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7053856" />
  <Command __id="4884" _type="InsertStringCommand" date="Mon Feb 08 16:35:24 EST 2021" starttimestamp="1612813070441" timestamp="7053874" timestamp2="7053874">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4886" _type="InsertStringCommand" date="Mon Feb 08 16:35:24 EST 2021" starttimestamp="1612813070441" timestamp="7054511" timestamp2="7054511">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4888" _type="InsertStringCommand" date="Mon Feb 08 16:35:25 EST 2021" starttimestamp="1612813070441" timestamp="7054652" timestamp2="7054652">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4889" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:25 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7054694" />
  <Command __id="4894" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:26 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7055569" />
  <Command __id="4896" _type="InsertStringCommand" date="Mon Feb 08 16:35:26 EST 2021" starttimestamp="1612813070441" timestamp="7055936" timestamp2="7055936">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4898" _type="InsertStringCommand" date="Mon Feb 08 16:35:26 EST 2021" starttimestamp="1612813070441" timestamp="7056213" timestamp2="7056213">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4900" _type="InsertStringCommand" date="Mon Feb 08 16:35:26 EST 2021" starttimestamp="1612813070441" timestamp="7056340" timestamp2="7056340">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4902" _type="InsertStringCommand" date="Mon Feb 08 16:35:27 EST 2021" starttimestamp="1612813070441" timestamp="7056681" timestamp2="7056681">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4904" _type="InsertStringCommand" date="Mon Feb 08 16:35:27 EST 2021" starttimestamp="1612813070441" timestamp="7056717" timestamp2="7056717">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4905" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:27 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7056758" />
  <Command __id="4908" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:27 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7056989" />
  <Command __id="4910" _type="InsertStringCommand" date="Mon Feb 08 16:35:27 EST 2021" starttimestamp="1612813070441" timestamp="7057117" timestamp2="7057117">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4911" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:27 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7057157" />
  <Command __id="4917" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7058917" />
  <Command __id="4920" _type="InsertStringCommand" date="Mon Feb 08 16:35:29 EST 2021" starttimestamp="1612813070441" timestamp="7059044" timestamp2="7059044">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4922" _type="PauseCommand" date="Mon Feb 08 16:35:30 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7060273">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1229]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4921" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:35:30 EST 2021" starttimestamp="1612813070441" timestamp="7060273" />
  <Command __id="4923" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:35:31 EST 2021" starttimestamp="1612813070441" timestamp="7060687" />
  <Command __id="4924" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:35:31 EST 2021" starttimestamp="1612813070441" timestamp="7060982" />
  <Command __id="4926" _type="InsertStringCommand" date="Mon Feb 08 16:35:31 EST 2021" starttimestamp="1612813070441" timestamp="7061521" timestamp2="7061521">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4927" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:35:32 EST 2021" starttimestamp="1612813070441" timestamp="7062036" />
  <Command __id="4929" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:35:32 EST 2021" starttimestamp="1612813070441" timestamp="7062469" />
  <DocumentChange __id="4803" _type="Insert" date="Mon Feb 08 16:35:07 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28567" docExpressionCount="3104" docLength="30326" length="1" offset="20907" starttimestamp="1612813070441" timestamp="7036732">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4807" _type="Insert" date="Mon Feb 08 16:35:09 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28574" docExpressionCount="3104" docLength="30333" length="7" offset="20938" repeat="3" starttimestamp="1612813070441" timestamp="7038748" timestamp2="7039274">
    <text><![CDATA[
			fw]]></text>
  </DocumentChange>
  <DocumentChange __id="4814" _type="Replace" date="Mon Feb 08 16:35:10 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28575" docExpressionCount="3104" docLength="30334" endLine="594" insertionLength="3" int_docASTNodeCount="4510" int_docActiveCodeLength="28572" int_docExpressionCount="3104" int_docLength="30331" length="2" offset="20943" startLine="594" starttimestamp="1612813070441" timestamp="7039820">
    <deletedText><![CDATA[fw]]></deletedText>
    <insertedText><![CDATA[fw ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4816" _type="Insert" date="Mon Feb 08 16:35:10 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28587" docExpressionCount="3104" docLength="30346" length="12" offset="20946" repeat="12" starttimestamp="1612813070441" timestamp="7040058" timestamp2="7041580">
    <text><![CDATA[= new filewr]]></text>
  </DocumentChange>
  <DocumentChange __id="4836" _type="Replace" date="Mon Feb 08 16:35:12 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28596" docExpressionCount="3104" docLength="30355" endLine="594" insertionLength="10" int_docASTNodeCount="4510" int_docActiveCodeLength="28586" int_docExpressionCount="3104" int_docLength="30345" length="1" offset="20952" startLine="594" starttimestamp="1612813070441" timestamp="7042047">
    <deletedText><![CDATA[f]]></deletedText>
    <insertedText><![CDATA[FileWriter]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4837" _type="Replace" date="Mon Feb 08 16:35:12 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28597" docExpressionCount="3104" docLength="30356" endLine="594" insertionLength="6" int_docASTNodeCount="4510" int_docActiveCodeLength="28591" int_docExpressionCount="3104" int_docLength="30350" length="5" offset="20962" startLine="594" starttimestamp="1612813070441" timestamp="7042065">
    <deletedText><![CDATA[ilewr]]></deletedText>
    <insertedText><![CDATA[(file)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4852" _type="Insert" date="Mon Feb 08 16:35:17 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28598" docExpressionCount="3104" docLength="30357" length="1" offset="20945" starttimestamp="1612813070441" timestamp="7046904">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="4855" _type="Insert" date="Mon Feb 08 16:35:18 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28599" docExpressionCount="3104" docLength="30358" length="1" offset="20969" starttimestamp="1612813070441" timestamp="7048173">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4860" _type="Delete" date="Mon Feb 08 16:35:19 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28595" docExpressionCount="3104" docLength="30354" endLine="594" length="4" offset="20964" startLine="594" starttimestamp="1612813070441" timestamp="7049259">
    <text><![CDATA[file]]></text>
  </DocumentChange>
  <DocumentChange __id="4862" _type="Insert" date="Mon Feb 08 16:35:20 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28599" docExpressionCount="3104" docLength="30358" length="4" offset="20964" repeat="4" starttimestamp="1612813070441" timestamp="7049562" timestamp2="7050011">
    <text><![CDATA[csv2]]></text>
  </DocumentChange>
  <DocumentChange __id="4871" _type="Insert" date="Mon Feb 08 16:35:22 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28606" docExpressionCount="3104" docLength="30365" length="7" offset="21008" repeat="3" starttimestamp="1612813070441" timestamp="7051823" timestamp2="7052710">
    <text><![CDATA[
			cr]]></text>
  </DocumentChange>
  <DocumentChange __id="4877" _type="Delete" date="Mon Feb 08 16:35:23 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28605" docExpressionCount="3104" docLength="30364" endLine="596" length="1" offset="21014" startLine="596" starttimestamp="1612813070441" timestamp="7052968">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="4878" _type="Insert" date="Mon Feb 08 16:35:23 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28609" docExpressionCount="3104" docLength="30368" length="4" offset="21014" repeat="4" starttimestamp="1612813070441" timestamp="7053036" timestamp2="7053578">
    <text><![CDATA[svwr]]></text>
  </DocumentChange>
  <DocumentChange __id="4883" _type="Replace" date="Mon Feb 08 16:35:24 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28613" docExpressionCount="3104" docLength="30372" endLine="596" insertionLength="9" int_docASTNodeCount="4510" int_docActiveCodeLength="28604" int_docExpressionCount="3104" int_docLength="30363" length="5" offset="21013" startLine="596" starttimestamp="1612813070441" timestamp="7053864">
    <deletedText><![CDATA[csvwr]]></deletedText>
    <insertedText><![CDATA[CSVWriter]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4885" _type="Insert" date="Mon Feb 08 16:35:24 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28616" docExpressionCount="3104" docLength="30375" length="3" offset="21022" repeat="3" starttimestamp="1612813070441" timestamp="7054505" timestamp2="7054798">
    <text><![CDATA[ cs]]></text>
  </DocumentChange>
  <DocumentChange __id="4891" _type="Delete" date="Mon Feb 08 16:35:25 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28615" docExpressionCount="3104" docLength="30374" endLine="596" length="1" offset="21024" startLine="596" starttimestamp="1612813070441" timestamp="7055129">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="4892" _type="Insert" date="Mon Feb 08 16:35:25 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28625" docExpressionCount="3104" docLength="30384" length="10" offset="21024" repeat="10" starttimestamp="1612813070441" timestamp="7055313" timestamp2="7057111">
    <text><![CDATA[w2 = new a]]></text>
  </DocumentChange>
  <DocumentChange __id="4912" _type="Delete" date="Mon Feb 08 16:35:28 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28624" docExpressionCount="3104" docLength="30383" endLine="596" length="1" offset="21033" startLine="596" starttimestamp="1612813070441" timestamp="7058077">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="4913" _type="Insert" date="Mon Feb 08 16:35:28 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28637" docExpressionCount="3104" docLength="30396" length="13" offset="21033" repeat="5" starttimestamp="1612813070441" timestamp="7058118" timestamp2="7058924">
    <text><![CDATA[CSVWritercswr]]></text>
  </DocumentChange>
  <DocumentChange __id="4919" _type="Replace" date="Mon Feb 08 16:35:29 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28641" docExpressionCount="3104" docLength="30400" endLine="596" insertionLength="8" int_docASTNodeCount="4510" int_docActiveCodeLength="28633" int_docExpressionCount="3104" int_docLength="30392" length="4" offset="21042" startLine="596" starttimestamp="1612813070441" timestamp="7058932">
    <deletedText><![CDATA[cswr]]></deletedText>
    <insertedText><![CDATA[(writer)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4925" _type="Insert" date="Mon Feb 08 16:35:31 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28642" docExpressionCount="3104" docLength="30401" length="1" offset="21050" starttimestamp="1612813070441" timestamp="7061513">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4928" _type="Delete" date="Mon Feb 08 16:35:32 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28636" docExpressionCount="3104" docLength="30395" endLine="596" length="6" offset="21043" startLine="596" starttimestamp="1612813070441" timestamp="7062461">
    <text><![CDATA[writer]]></text>
  </DocumentChange>
  <DocumentChange __id="4930" _type="Insert" date="Mon Feb 08 16:35:34 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28637" docExpressionCount="3104" docLength="30396" length="1" offset="21043" starttimestamp="1612813070441" timestamp="7063598">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="4934" _type="Delete" date="Mon Feb 08 16:35:34 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28636" docExpressionCount="3104" docLength="30395" endLine="596" length="1" offset="21043" startLine="596" starttimestamp="1612813070441" timestamp="7064063">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="4931" _type="PauseCommand" date="Mon Feb 08 16:35:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7063598">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1129]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4932" _type="InsertStringCommand" date="Mon Feb 08 16:35:34 EST 2021" starttimestamp="1612813070441" timestamp="7063608" timestamp2="7063608">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4933" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:34 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7063645" />
  <Command __id="4936" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:34 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7064177" />
  <Command __id="4938" _type="InsertStringCommand" date="Mon Feb 08 16:35:34 EST 2021" starttimestamp="1612813070441" timestamp="7064239" timestamp2="7064239">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4939" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:34 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7064281" />
  <Command __id="4941" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:35 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7064939" />
  <Command __id="4943" _type="PauseCommand" date="Mon Feb 08 16:35:37 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7067296">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2357]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4942" _type="MoveCaretCommand" caretOffset="1174" date="Mon Feb 08 16:35:37 EST 2021" docOffset="21116" starttimestamp="1612813070441" timestamp="7067296" />
  <Command __id="4945" _type="PauseCommand" date="Mon Feb 08 16:35:39 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7068957">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1661]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4944" _type="MoveCaretCommand" caretOffset="1106" date="Mon Feb 08 16:35:39 EST 2021" docOffset="21048" starttimestamp="1612813070441" timestamp="7068957" />
  <Command __id="4947" _type="PauseCommand" date="Mon Feb 08 16:35:40 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7070215">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1258]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4946" _type="MoveCaretCommand" caretOffset="909" date="Mon Feb 08 16:35:40 EST 2021" docOffset="20851" starttimestamp="1612813070441" timestamp="7070215" />
  <Command __id="4949" _type="InsertStringCommand" date="Mon Feb 08 16:35:41 EST 2021" starttimestamp="1612813070441" timestamp="7070805" timestamp2="7070805">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4951" _type="PauseCommand" date="Mon Feb 08 16:35:42 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7072526">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1721]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4950" _type="MoveCaretCommand" caretOffset="1175" date="Mon Feb 08 16:35:42 EST 2021" docOffset="21117" starttimestamp="1612813070441" timestamp="7072526" />
  <Command __id="4953" _type="PauseCommand" date="Mon Feb 08 16:35:45 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7074677">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2151]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4954" _type="InsertStringCommand" date="Mon Feb 08 16:35:45 EST 2021" starttimestamp="1612813070441" timestamp="7074689" timestamp2="7074689">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4956" _type="InsertStringCommand" date="Mon Feb 08 16:35:45 EST 2021" starttimestamp="1612813070441" timestamp="7075051" timestamp2="7075051">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="4958" _type="InsertStringCommand" date="Mon Feb 08 16:35:45 EST 2021" starttimestamp="1612813070441" timestamp="7075293" timestamp2="7075293">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4960" _type="InsertStringCommand" date="Mon Feb 08 16:35:45 EST 2021" starttimestamp="1612813070441" timestamp="7075315" timestamp2="7075315">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4961" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:45 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7075358" />
  <Command __id="4965" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7075992" />
  <Command __id="4967" _type="InsertStringCommand" date="Mon Feb 08 16:35:46 EST 2021" starttimestamp="1612813070441" timestamp="7076006" timestamp2="7076006">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="4969" _type="InsertStringCommand" date="Mon Feb 08 16:35:46 EST 2021" starttimestamp="1612813070441" timestamp="7076063" timestamp2="7076063">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="4971" _type="InsertStringCommand" date="Mon Feb 08 16:35:46 EST 2021" starttimestamp="1612813070441" timestamp="7076155" timestamp2="7076155">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4973" _type="InsertStringCommand" date="Mon Feb 08 16:35:46 EST 2021" starttimestamp="1612813070441" timestamp="7076502" timestamp2="7076502">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4974" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:46 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7076544" />
  <Command __id="4976" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7076646" />
  <Command __id="4978" _type="InsertStringCommand" date="Mon Feb 08 16:35:47 EST 2021" starttimestamp="1612813070441" timestamp="7076656" timestamp2="7076656">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4979" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7076748" />
  <Command __id="4980" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7076787" />
  <Command __id="4982" _type="InsertStringCommand" date="Mon Feb 08 16:35:47 EST 2021" starttimestamp="1612813070441" timestamp="7076799" timestamp2="7076799">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4983" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7076893" />
  <Command __id="4984" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7076918" />
  <Command __id="4986" _type="InsertStringCommand" date="Mon Feb 08 16:35:47 EST 2021" starttimestamp="1612813070441" timestamp="7076932" timestamp2="7076932">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4988" _type="InsertStringCommand" date="Mon Feb 08 16:35:47 EST 2021" starttimestamp="1612813070441" timestamp="7076995" timestamp2="7076995">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4989" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:35:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7077035" />
  <Command __id="4990" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:35:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7077059" />
  <Command __id="4992" _type="InsertStringCommand" date="Mon Feb 08 16:35:47 EST 2021" starttimestamp="1612813070441" timestamp="7077159" timestamp2="7077159">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4994" _type="InsertStringCommand" date="Mon Feb 08 16:35:47 EST 2021" starttimestamp="1612813070441" timestamp="7077373" timestamp2="7077373">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="4996" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:35:47 EST 2021" starttimestamp="1612813070441" timestamp="7077557" />
  <Command __id="4998" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:35:48 EST 2021" starttimestamp="1612813070441" timestamp="7077683" />
  <Command __id="5000" _type="InsertStringCommand" date="Mon Feb 08 16:35:48 EST 2021" starttimestamp="1612813070441" timestamp="7077797" timestamp2="7077797">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="5002" _type="InsertStringCommand" date="Mon Feb 08 16:35:48 EST 2021" starttimestamp="1612813070441" timestamp="7077842" timestamp2="7077842">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5004" _type="InsertStringCommand" date="Mon Feb 08 16:35:48 EST 2021" starttimestamp="1612813070441" timestamp="7077979" timestamp2="7077979">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5006" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:35:48 EST 2021" starttimestamp="1612813070441" timestamp="7077987" />
  <Command __id="5008" _type="InsertStringCommand" date="Mon Feb 08 16:35:48 EST 2021" starttimestamp="1612813070441" timestamp="7078066" timestamp2="7078066">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5010" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:35:49 EST 2021" starttimestamp="1612813070441" timestamp="7078614" />
  <Command __id="5012" _type="InsertStringCommand" date="Mon Feb 08 16:35:49 EST 2021" starttimestamp="1612813070441" timestamp="7078872" timestamp2="7078872">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5014" _type="InsertStringCommand" date="Mon Feb 08 16:35:49 EST 2021" starttimestamp="1612813070441" timestamp="7078984" timestamp2="7078984">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5016" _type="PauseCommand" date="Mon Feb 08 16:35:50 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7080450">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1465]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5017" _type="InsertStringCommand" date="Mon Feb 08 16:35:50 EST 2021" starttimestamp="1612813070441" timestamp="7080457" timestamp2="7080457">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5019" _type="InsertStringCommand" date="Mon Feb 08 16:35:51 EST 2021" starttimestamp="1612813070441" timestamp="7081389" timestamp2="7081389">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5021" _type="InsertStringCommand" date="Mon Feb 08 16:35:52 EST 2021" starttimestamp="1612813070441" timestamp="7081967" timestamp2="7081967">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="5023" _type="InsertStringCommand" date="Mon Feb 08 16:35:52 EST 2021" starttimestamp="1612813070441" timestamp="7082110" timestamp2="7082110">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5025" _type="InsertStringCommand" date="Mon Feb 08 16:35:52 EST 2021" starttimestamp="1612813070441" timestamp="7082231" timestamp2="7082231">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5027" _type="InsertStringCommand" date="Mon Feb 08 16:35:52 EST 2021" starttimestamp="1612813070441" timestamp="7082520" timestamp2="7082520">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5029" _type="InsertStringCommand" date="Mon Feb 08 16:35:53 EST 2021" starttimestamp="1612813070441" timestamp="7082599" timestamp2="7082599">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5031" _type="PauseCommand" date="Mon Feb 08 16:35:54 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7083801">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1202]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="5030" _type="InsertStringCommand" date="Mon Feb 08 16:35:54 EST 2021" starttimestamp="1612813070441" timestamp="7083801" timestamp2="7083801">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5033" _type="InsertStringCommand" date="Mon Feb 08 16:35:54 EST 2021" starttimestamp="1612813070441" timestamp="7084112" timestamp2="7084112">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="5035" _type="InsertStringCommand" date="Mon Feb 08 16:35:54 EST 2021" starttimestamp="1612813070441" timestamp="7084189" timestamp2="7084189">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5037" _type="PauseCommand" date="Mon Feb 08 16:35:55 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7085276">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1087]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5038" _type="InsertStringCommand" date="Mon Feb 08 16:35:55 EST 2021" starttimestamp="1612813070441" timestamp="7085278" timestamp2="7085278">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5040" _type="InsertStringCommand" date="Mon Feb 08 16:35:56 EST 2021" starttimestamp="1612813070441" timestamp="7085826" timestamp2="7085826">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="5042" _type="InsertStringCommand" date="Mon Feb 08 16:35:56 EST 2021" starttimestamp="1612813070441" timestamp="7085933" timestamp2="7085933">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="5044" _type="InsertStringCommand" date="Mon Feb 08 16:35:56 EST 2021" starttimestamp="1612813070441" timestamp="7086046" timestamp2="7086046">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5045" _type="InsertStringCommand" date="Mon Feb 08 16:35:57 EST 2021" starttimestamp="1612813070441" timestamp="7086576" timestamp2="7086576">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5047" _type="InsertStringCommand" date="Mon Feb 08 16:35:57 EST 2021" starttimestamp="1612813070441" timestamp="7087033" timestamp2="7087033">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="5049" _type="InsertStringCommand" date="Mon Feb 08 16:35:57 EST 2021" starttimestamp="1612813070441" timestamp="7087136" timestamp2="7087136">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5051" _type="InsertStringCommand" date="Mon Feb 08 16:35:58 EST 2021" starttimestamp="1612813070441" timestamp="7088032" timestamp2="7088032">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5053" _type="PauseCommand" date="Mon Feb 08 16:36:02 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7092340">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4308]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5054" _type="InsertStringCommand" date="Mon Feb 08 16:36:02 EST 2021" starttimestamp="1612813070441" timestamp="7092344" timestamp2="7092344">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5056" _type="InsertStringCommand" date="Mon Feb 08 16:36:02 EST 2021" starttimestamp="1612813070441" timestamp="7092557" timestamp2="7092557">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5058" _type="InsertStringCommand" date="Mon Feb 08 16:36:03 EST 2021" starttimestamp="1612813070441" timestamp="7092589" timestamp2="7092589">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5060" _type="InsertStringCommand" date="Mon Feb 08 16:36:03 EST 2021" starttimestamp="1612813070441" timestamp="7092735" timestamp2="7092735">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5062" _type="InsertStringCommand" date="Mon Feb 08 16:36:03 EST 2021" starttimestamp="1612813070441" timestamp="7092935" timestamp2="7092935">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5064" _type="InsertStringCommand" date="Mon Feb 08 16:36:03 EST 2021" starttimestamp="1612813070441" timestamp="7093411" timestamp2="7093411">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="5066" _type="InsertStringCommand" date="Mon Feb 08 16:36:03 EST 2021" starttimestamp="1612813070441" timestamp="7093538" timestamp2="7093538">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5068" _type="InsertStringCommand" date="Mon Feb 08 16:36:04 EST 2021" starttimestamp="1612813070441" timestamp="7093619" timestamp2="7093619">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5070" _type="InsertStringCommand" date="Mon Feb 08 16:36:04 EST 2021" starttimestamp="1612813070441" timestamp="7093724" timestamp2="7093724">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5072" _type="InsertStringCommand" date="Mon Feb 08 16:36:04 EST 2021" starttimestamp="1612813070441" timestamp="7093873" timestamp2="7093873">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5074" _type="PauseCommand" date="Mon Feb 08 16:36:06 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7096135">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2262]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5075" _type="InsertStringCommand" date="Mon Feb 08 16:36:06 EST 2021" starttimestamp="1612813070441" timestamp="7096138" timestamp2="7096138">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="5077" _type="PauseCommand" date="Mon Feb 08 16:36:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7097418">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1280]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5076" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:36:07 EST 2021" starttimestamp="1612813070441" timestamp="7097418" />
  <Command __id="5079" _type="InsertStringCommand" date="Mon Feb 08 16:36:08 EST 2021" starttimestamp="1612813070441" timestamp="7098360" timestamp2="7098360">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="5080" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:09 EST 2021" starttimestamp="1612813070441" timestamp="7099286" />
  <Command __id="5081" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:36:10 EST 2021" starttimestamp="1612813070441" timestamp="7099691" />
  <Command __id="5083" _type="InsertStringCommand" date="Mon Feb 08 16:36:10 EST 2021" starttimestamp="1612813070441" timestamp="7100022" timestamp2="7100022">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5085" _type="PauseCommand" date="Mon Feb 08 16:36:12 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7102198">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2176]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5084" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:12 EST 2021" starttimestamp="1612813070441" timestamp="7102198" />
  <Command __id="5086" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:12 EST 2021" starttimestamp="1612813070441" timestamp="7102353" />
  <Command __id="5087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:12 EST 2021" starttimestamp="1612813070441" timestamp="7102499" />
  <Command __id="5088" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:13 EST 2021" starttimestamp="1612813070441" timestamp="7102649" />
  <Command __id="5089" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:13 EST 2021" starttimestamp="1612813070441" timestamp="7102787" />
  <Command __id="5090" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:13 EST 2021" starttimestamp="1612813070441" timestamp="7102927" />
  <Command __id="5091" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:13 EST 2021" starttimestamp="1612813070441" timestamp="7103080" />
  <Command __id="5092" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:13 EST 2021" starttimestamp="1612813070441" timestamp="7103223" />
  <Command __id="5093" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:13 EST 2021" starttimestamp="1612813070441" timestamp="7103362" />
  <Command __id="5094" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:13 EST 2021" starttimestamp="1612813070441" timestamp="7103508" />
  <Command __id="5095" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:14 EST 2021" starttimestamp="1612813070441" timestamp="7103662" />
  <Command __id="5096" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:14 EST 2021" starttimestamp="1612813070441" timestamp="7103819" />
  <Command __id="5097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:14 EST 2021" starttimestamp="1612813070441" timestamp="7103996" />
  <Command __id="5098" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:14 EST 2021" starttimestamp="1612813070441" timestamp="7104122" />
  <Command __id="5099" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:36:14 EST 2021" starttimestamp="1612813070441" timestamp="7104282" />
  <Command __id="5101" _type="PauseCommand" date="Mon Feb 08 16:36:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7105838">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1556]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5102" _type="InsertStringCommand" date="Mon Feb 08 16:36:16 EST 2021" starttimestamp="1612813070441" timestamp="7105855" timestamp2="7105855">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5104" _type="InsertStringCommand" date="Mon Feb 08 16:36:16 EST 2021" starttimestamp="1612813070441" timestamp="7106413" timestamp2="7106413">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5106" _type="InsertStringCommand" date="Mon Feb 08 16:36:17 EST 2021" starttimestamp="1612813070441" timestamp="7106567" timestamp2="7106567">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5108" _type="InsertStringCommand" date="Mon Feb 08 16:36:17 EST 2021" starttimestamp="1612813070441" timestamp="7106654" timestamp2="7106654">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5110" _type="InsertStringCommand" date="Mon Feb 08 16:36:17 EST 2021" starttimestamp="1612813070441" timestamp="7106721" timestamp2="7106721">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5112" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:36:17 EST 2021" starttimestamp="1612813070441" timestamp="7107325" />
  <Command __id="5114" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:36:17 EST 2021" starttimestamp="1612813070441" timestamp="7107451" />
  <Command __id="5116" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:36:18 EST 2021" starttimestamp="1612813070441" timestamp="7107598" />
  <Command __id="5118" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:36:18 EST 2021" starttimestamp="1612813070441" timestamp="7107720" />
  <Command __id="5120" _type="InsertStringCommand" date="Mon Feb 08 16:36:18 EST 2021" starttimestamp="1612813070441" timestamp="7107892" timestamp2="7107892">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="5122" _type="InsertStringCommand" date="Mon Feb 08 16:36:18 EST 2021" starttimestamp="1612813070441" timestamp="7108090" timestamp2="7108090">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5124" _type="InsertStringCommand" date="Mon Feb 08 16:36:18 EST 2021" starttimestamp="1612813070441" timestamp="7108135" timestamp2="7108135">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5126" _type="InsertStringCommand" date="Mon Feb 08 16:36:18 EST 2021" starttimestamp="1612813070441" timestamp="7108346" timestamp2="7108346">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:36:19 EST 2021" starttimestamp="1612813070441" timestamp="7108670" />
  <Command __id="5130" _type="InsertStringCommand" date="Mon Feb 08 16:36:19 EST 2021" starttimestamp="1612813070441" timestamp="7108747" timestamp2="7108747">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5132" _type="InsertStringCommand" date="Mon Feb 08 16:36:19 EST 2021" starttimestamp="1612813070441" timestamp="7108932" timestamp2="7108932">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5134" _type="InsertStringCommand" date="Mon Feb 08 16:36:19 EST 2021" starttimestamp="1612813070441" timestamp="7109002" timestamp2="7109002">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5136" _type="InsertStringCommand" date="Mon Feb 08 16:36:19 EST 2021" starttimestamp="1612813070441" timestamp="7109280" timestamp2="7109280">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5138" _type="PauseCommand" date="Mon Feb 08 16:36:21 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7110762">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1482]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5139" _type="InsertStringCommand" date="Mon Feb 08 16:36:21 EST 2021" starttimestamp="1612813070441" timestamp="7110768" timestamp2="7110768">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="5141" _type="InsertStringCommand" date="Mon Feb 08 16:36:21 EST 2021" starttimestamp="1612813070441" timestamp="7110954" timestamp2="7110954">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5143" _type="InsertStringCommand" date="Mon Feb 08 16:36:21 EST 2021" starttimestamp="1612813070441" timestamp="7111049" timestamp2="7111049">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5145" _type="InsertStringCommand" date="Mon Feb 08 16:36:21 EST 2021" starttimestamp="1612813070441" timestamp="7111203" timestamp2="7111203">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5147" _type="InsertStringCommand" date="Mon Feb 08 16:36:21 EST 2021" starttimestamp="1612813070441" timestamp="7111433" timestamp2="7111433">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5149" _type="InsertStringCommand" date="Mon Feb 08 16:36:22 EST 2021" starttimestamp="1612813070441" timestamp="7111694" timestamp2="7111694">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="5151" _type="InsertStringCommand" date="Mon Feb 08 16:36:22 EST 2021" starttimestamp="1612813070441" timestamp="7111808" timestamp2="7111808">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5152" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:36:23 EST 2021" starttimestamp="1612813070441" timestamp="7112747" />
  <Command __id="5153" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:36:23 EST 2021" starttimestamp="1612813070441" timestamp="7112883" />
  <Command __id="5154" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:36:23 EST 2021" starttimestamp="1612813070441" timestamp="7113065" />
  <Command __id="5156" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:36:24 EST 2021" starttimestamp="1612813070441" timestamp="7113584" />
  <Command __id="5158" _type="InsertStringCommand" date="Mon Feb 08 16:36:24 EST 2021" starttimestamp="1612813070441" timestamp="7114036" timestamp2="7114036">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5160" _type="InsertStringCommand" date="Mon Feb 08 16:36:24 EST 2021" starttimestamp="1612813070441" timestamp="7114195" timestamp2="7114195">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5162" _type="InsertStringCommand" date="Mon Feb 08 16:36:24 EST 2021" starttimestamp="1612813070441" timestamp="7114339" timestamp2="7114339">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5164" _type="InsertStringCommand" date="Mon Feb 08 16:36:24 EST 2021" starttimestamp="1612813070441" timestamp="7114441" timestamp2="7114441">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5166" _type="InsertStringCommand" date="Mon Feb 08 16:36:24 EST 2021" starttimestamp="1612813070441" timestamp="7114530" timestamp2="7114530">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5168" _type="InsertStringCommand" date="Mon Feb 08 16:36:25 EST 2021" starttimestamp="1612813070441" timestamp="7114577" timestamp2="7114577">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5170" _type="InsertStringCommand" date="Mon Feb 08 16:36:25 EST 2021" starttimestamp="1612813070441" timestamp="7114646" timestamp2="7114646">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5172" _type="InsertStringCommand" date="Mon Feb 08 16:36:25 EST 2021" starttimestamp="1612813070441" timestamp="7114731" timestamp2="7114731">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5174" _type="InsertStringCommand" date="Mon Feb 08 16:36:25 EST 2021" starttimestamp="1612813070441" timestamp="7114900" timestamp2="7114900">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5176" _type="InsertStringCommand" date="Mon Feb 08 16:36:25 EST 2021" starttimestamp="1612813070441" timestamp="7114957" timestamp2="7114957">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5178" _type="InsertStringCommand" date="Mon Feb 08 16:36:25 EST 2021" starttimestamp="1612813070441" timestamp="7114992" timestamp2="7114992">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5180" _type="InsertStringCommand" date="Mon Feb 08 16:36:25 EST 2021" starttimestamp="1612813070441" timestamp="7115078" timestamp2="7115078">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5182" _type="InsertStringCommand" date="Mon Feb 08 16:36:26 EST 2021" starttimestamp="1612813070441" timestamp="7115640" timestamp2="7115640">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="5184" _type="InsertStringCommand" date="Mon Feb 08 16:36:26 EST 2021" starttimestamp="1612813070441" timestamp="7115847" timestamp2="7115847">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5186" _type="InsertStringCommand" date="Mon Feb 08 16:36:26 EST 2021" starttimestamp="1612813070441" timestamp="7115878" timestamp2="7115878">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5188" _type="InsertStringCommand" date="Mon Feb 08 16:36:26 EST 2021" starttimestamp="1612813070441" timestamp="7115937" timestamp2="7115937">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5190" _type="InsertStringCommand" date="Mon Feb 08 16:36:26 EST 2021" starttimestamp="1612813070441" timestamp="7116168" timestamp2="7116168">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5192" _type="InsertStringCommand" date="Mon Feb 08 16:36:26 EST 2021" starttimestamp="1612813070441" timestamp="7116256" timestamp2="7116256">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5194" _type="PauseCommand" date="Mon Feb 08 16:36:42 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7131977">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[15721]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5193" _type="SelectTextCommand" caretOffset="1216" date="Mon Feb 08 16:36:42 EST 2021" end="1216" start="1201" starttimestamp="1612813070441" timestamp="7131977" />
  <Command __id="5196" _type="PauseCommand" date="Mon Feb 08 16:36:43 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7133072">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1095]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5195" _type="MoveCaretCommand" caretOffset="1202" date="Mon Feb 08 16:36:43 EST 2021" docOffset="21144" starttimestamp="1612813070441" timestamp="7133072" />
  <Command __id="5198" _type="PauseCommand" date="Mon Feb 08 16:36:45 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7134999">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1927]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5197" _type="SelectTextCommand" caretOffset="1216" date="Mon Feb 08 16:36:45 EST 2021" end="1216" start="1200" starttimestamp="1612813070441" timestamp="7134999" />
  <Command __id="5200" _type="PauseCommand" date="Mon Feb 08 16:36:47 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7137232">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2233]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="5201" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:36:47 EST 2021" starttimestamp="1612813070441" timestamp="7137239" />
  <Command __id="5203" _type="PauseCommand" date="Mon Feb 08 16:36:48 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7138276">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1037]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5202" _type="MoveCaretCommand" caretOffset="1215" date="Mon Feb 08 16:36:48 EST 2021" docOffset="21157" starttimestamp="1612813070441" timestamp="7138276" />
  <Command __id="5205" _type="PauseCommand" date="Mon Feb 08 16:36:51 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7140563">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2287]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5206" _type="UndoCommand" date="Mon Feb 08 16:36:51 EST 2021" starttimestamp="1612813070441" timestamp="7140567" />
  <Command __id="5207" _type="MoveCaretCommand" caretOffset="1216" date="Mon Feb 08 16:36:51 EST 2021" docOffset="21158" starttimestamp="1612813070441" timestamp="7141109" />
  <Command __id="5209" _type="PauseCommand" date="Mon Feb 08 16:36:59 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7149453">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8344]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5208" _type="SelectTextCommand" caretOffset="1216" date="Mon Feb 08 16:36:59 EST 2021" end="1216" start="1200" starttimestamp="1612813070441" timestamp="7149453" />
  <Command __id="5211" _type="CutCommand" date="Mon Feb 08 16:36:59 EST 2021" starttimestamp="1612813070441" timestamp="7149558" />
  <Command __id="5212" _type="MoveCaretCommand" caretOffset="1214" date="Mon Feb 08 16:37:00 EST 2021" docOffset="21156" starttimestamp="1612813070441" timestamp="7150256" />
  <Command __id="5213" _type="MoveCaretCommand" caretOffset="1215" date="Mon Feb 08 16:37:01 EST 2021" docOffset="21157" starttimestamp="1612813070441" timestamp="7150708" />
  <DocumentChange __id="4935" _type="Insert" date="Mon Feb 08 16:35:34 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28639" docExpressionCount="3104" docLength="30398" length="3" offset="21043" repeat="3" starttimestamp="1612813070441" timestamp="7064158" timestamp2="7064420">
    <text><![CDATA[fw2]]></text>
  </DocumentChange>
  <DocumentChange __id="4948" _type="Insert" date="Mon Feb 08 16:35:41 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28640" docExpressionCount="3405" docLength="30399" length="1" offset="20851" starttimestamp="1612813070441" timestamp="7070798">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4952" _type="Insert" date="Mon Feb 08 16:35:45 EST 2021" docASTNodeCount="4869" docActiveCodeLength="28651" docExpressionCount="3337" docLength="30410" length="11" offset="21117" repeat="7" starttimestamp="1612813070441" timestamp="7074677" timestamp2="7075612">
    <text><![CDATA[
			String]]></text>
  </DocumentChange>
  <DocumentChange __id="4966" _type="Replace" date="Mon Feb 08 16:35:46 EST 2021" docASTNodeCount="4867" docActiveCodeLength="28652" docExpressionCount="3338" docLength="30411" endLine="598" insertionLength="7" int_docASTNodeCount="4964" int_docActiveCodeLength="28645" int_docExpressionCount="3405" int_docLength="30404" length="6" offset="21122" startLine="598" starttimestamp="1612813070441" timestamp="7075998">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String[]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4968" _type="Insert" date="Mon Feb 08 16:35:46 EST 2021" docASTNodeCount="4871" docActiveCodeLength="28662" docExpressionCount="3338" docLength="30421" length="10" offset="21129" repeat="10" starttimestamp="1612813070441" timestamp="7076055" timestamp2="7077366">
    <text><![CDATA[] header 2]]></text>
  </DocumentChange>
  <DocumentChange __id="4995" _type="Delete" date="Mon Feb 08 16:35:47 EST 2021" docASTNodeCount="4871" docActiveCodeLength="28660" docExpressionCount="3338" docLength="30419" endLine="598" length="2" offset="21137" repeat="2" startLine="598" starttimestamp="1612813070441" timestamp="7077554" timestamp2="7077680">
    <text><![CDATA[ 2]]></text>
  </DocumentChange>
  <DocumentChange __id="4999" _type="Insert" date="Mon Feb 08 16:35:48 EST 2021" docASTNodeCount="4969" docActiveCodeLength="28663" docExpressionCount="3407" docLength="30422" length="3" offset="21137" repeat="3" starttimestamp="1612813070441" timestamp="7077792" timestamp2="7077973">
    <text><![CDATA[2 =]]></text>
  </DocumentChange>
  <DocumentChange __id="5005" _type="Delete" date="Mon Feb 08 16:35:48 EST 2021" docASTNodeCount="4871" docActiveCodeLength="28662" docExpressionCount="3338" docLength="30421" endLine="598" length="1" offset="21139" startLine="598" starttimestamp="1612813070441" timestamp="7077985">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="5007" _type="Insert" date="Mon Feb 08 16:35:48 EST 2021" docASTNodeCount="4871" docActiveCodeLength="28663" docExpressionCount="3338" docLength="30422" length="1" offset="21139" starttimestamp="1612813070441" timestamp="7078062">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5009" _type="Delete" date="Mon Feb 08 16:35:49 EST 2021" docASTNodeCount="4871" docActiveCodeLength="28662" docExpressionCount="3338" docLength="30421" endLine="598" length="1" offset="21139" startLine="598" starttimestamp="1612813070441" timestamp="7078611">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5011" _type="Insert" date="Mon Feb 08 16:35:49 EST 2021" docASTNodeCount="4875" docActiveCodeLength="28683" docExpressionCount="3342" docLength="30442" length="21" offset="21139" repeat="18" starttimestamp="1612813070441" timestamp="7078863" timestamp2="7088031">
    <text><![CDATA[= {"Title", "URL", ""]]></text>
  </DocumentChange>
  <DocumentChange __id="5052" _type="Insert" date="Mon Feb 08 16:36:02 EST 2021" docASTNodeCount="4875" docActiveCodeLength="28693" docExpressionCount="3342" docLength="30452" length="10" offset="21159" repeat="10" starttimestamp="1612813070441" timestamp="7092340" timestamp2="7093870">
    <text><![CDATA[Last Visit]]></text>
  </DocumentChange>
  <DocumentChange __id="5073" _type="Insert" date="Mon Feb 08 16:36:06 EST 2021" docASTNodeCount="4875" docActiveCodeLength="28694" docExpressionCount="3342" docLength="30453" length="1" offset="21169" starttimestamp="1612813070441" timestamp="7096135">
    <text><![CDATA[?]]></text>
  </DocumentChange>
  <DocumentChange __id="5078" _type="Insert" date="Mon Feb 08 16:36:08 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28696" docExpressionCount="3411" docLength="30455" length="2" offset="21171" repeat="2" starttimestamp="1612813070441" timestamp="7098352" timestamp2="7100013">
    <text><![CDATA[};]]></text>
  </DocumentChange>
  <DocumentChange __id="5100" _type="Insert" date="Mon Feb 08 16:36:16 EST 2021" docASTNodeCount="4619" docActiveCodeLength="28701" docExpressionCount="3171" docLength="30460" length="5" offset="21158" repeat="5" starttimestamp="1612813070441" timestamp="7105838" timestamp2="7106715">
    <text><![CDATA["sear]]></text>
  </DocumentChange>
  <DocumentChange __id="5111" _type="Delete" date="Mon Feb 08 16:36:17 EST 2021" docASTNodeCount="4619" docActiveCodeLength="28697" docExpressionCount="3171" docLength="30456" endLine="598" length="4" offset="21159" repeat="4" startLine="598" starttimestamp="1612813070441" timestamp="7107319" timestamp2="7107717">
    <text><![CDATA[sear]]></text>
  </DocumentChange>
  <DocumentChange __id="5119" _type="Insert" date="Mon Feb 08 16:36:18 EST 2021" docASTNodeCount="4619" docActiveCodeLength="28701" docExpressionCount="3171" docLength="30460" length="4" offset="21159" repeat="4" starttimestamp="1612813070441" timestamp="7107885" timestamp2="7108340">
    <text><![CDATA[Seac]]></text>
  </DocumentChange>
  <DocumentChange __id="5127" _type="Delete" date="Mon Feb 08 16:36:19 EST 2021" docASTNodeCount="4619" docActiveCodeLength="28700" docExpressionCount="3171" docLength="30459" endLine="598" length="1" offset="21162" startLine="598" starttimestamp="1612813070441" timestamp="7108667">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="5129" _type="Insert" date="Mon Feb 08 16:36:19 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28711" docExpressionCount="3412" docLength="30470" length="11" offset="21162" repeat="11" starttimestamp="1612813070441" timestamp="7108739" timestamp2="7111801">
    <text><![CDATA[rch Word", ]]></text>
  </DocumentChange>
  <DocumentChange __id="5155" _type="Delete" date="Mon Feb 08 16:36:24 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28706" docExpressionCount="3412" docLength="30465" endLine="598" length="5" offset="21179" startLine="598" starttimestamp="1612813070441" timestamp="7113580">
    <text><![CDATA[Visit]]></text>
  </DocumentChange>
  <DocumentChange __id="5157" _type="Insert" date="Mon Feb 08 16:36:24 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28724" docExpressionCount="3412" docLength="30483" length="18" offset="21179" repeat="18" starttimestamp="1612813070441" timestamp="7114028" timestamp2="7116251">
    <text><![CDATA[Page of the Search]]></text>
  </DocumentChange>
  <DocumentChange __id="5199" _type="Delete" date="Mon Feb 08 16:36:47 EST 2021" docASTNodeCount="4973" docActiveCodeLength="28708" docExpressionCount="3410" docLength="30467" endLine="598" length="16" offset="21142" startLine="598" starttimestamp="1612813070441" timestamp="7137232">
    <text><![CDATA["Title", "URL", ]]></text>
  </DocumentChange>
  <DocumentChange __id="5204" _type="Insert" date="Mon Feb 08 16:36:51 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28724" docExpressionCount="3412" docLength="30483" length="16" offset="21142" starttimestamp="1612813070441" timestamp="7140563">
    <text><![CDATA["Title", "URL", ]]></text>
  </DocumentChange>
  <DocumentChange __id="5210" _type="Delete" date="Mon Feb 08 16:36:59 EST 2021" docASTNodeCount="4973" docActiveCodeLength="28708" docExpressionCount="3410" docLength="30467" endLine="598" length="16" offset="21142" startLine="598" starttimestamp="1612813070441" timestamp="7149545">
    <text><![CDATA["Title", "URL", ]]></text>
  </DocumentChange>
  <Command __id="5215" _type="PauseCommand" date="Mon Feb 08 16:37:03 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7153264">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2556]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5216" _type="PasteCommand" date="Mon Feb 08 16:37:03 EST 2021" starttimestamp="1612813070441" timestamp="7153271" />
  <Command __id="5218" _type="PauseCommand" date="Mon Feb 08 16:37:13 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7163115">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[9844]]></rest>
    <prev><![CDATA[PasteCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5217" _type="MoveCaretCommand" caretOffset="1107" date="Mon Feb 08 16:37:13 EST 2021" docOffset="21049" starttimestamp="1612813070441" timestamp="7163115" />
  <Command __id="5220" _type="PauseCommand" date="Mon Feb 08 16:37:30 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7180439">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[17324]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5219" _type="MoveCaretCommand" caretOffset="1465" date="Mon Feb 08 16:37:30 EST 2021" docOffset="21407" starttimestamp="1612813070441" timestamp="7180439" />
  <Command __id="5221" _type="SelectTextCommand" caretOffset="1467" date="Mon Feb 08 16:37:31 EST 2021" end="1467" start="1461" starttimestamp="1612813070441" timestamp="7180605" />
  <Command __id="5223" _type="PauseCommand" date="Mon Feb 08 16:37:32 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7182056">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1451]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5222" _type="MoveCaretCommand" caretOffset="1410" date="Mon Feb 08 16:37:32 EST 2021" docOffset="21352" starttimestamp="1612813070441" timestamp="7182056" />
  <Command __id="5224" _type="SelectTextCommand" caretOffset="1412" date="Mon Feb 08 16:37:32 EST 2021" end="1412" start="1406" starttimestamp="1612813070441" timestamp="7182230" />
  <Command __id="5226" _type="PauseCommand" date="Mon Feb 08 16:37:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7184134">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1904]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5225" _type="MoveCaretCommand" caretOffset="1464" date="Mon Feb 08 16:37:34 EST 2021" docOffset="21406" starttimestamp="1612813070441" timestamp="7184134" />
  <Command __id="5227" _type="SelectTextCommand" caretOffset="1467" date="Mon Feb 08 16:37:34 EST 2021" end="1467" start="1461" starttimestamp="1612813070441" timestamp="7184304" />
  <Command __id="5229" _type="PauseCommand" date="Mon Feb 08 16:37:36 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7185580">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1276]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5228" _type="MoveCaretCommand" caretOffset="1566" date="Mon Feb 08 16:37:36 EST 2021" docOffset="21508" starttimestamp="1612813070441" timestamp="7185580" />
  <Command __id="5231" _type="PauseCommand" date="Mon Feb 08 16:37:40 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7189569">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3989]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5230" _type="MoveCaretCommand" caretOffset="1473" date="Mon Feb 08 16:37:40 EST 2021" docOffset="21415" starttimestamp="1612813070441" timestamp="7189569" />
  <Command __id="5233" _type="PauseCommand" date="Mon Feb 08 16:37:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7190853">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1284]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5232" _type="MoveCaretCommand" caretOffset="1474" date="Mon Feb 08 16:37:41 EST 2021" docOffset="21416" starttimestamp="1612813070441" timestamp="7190853" />
  <Command __id="5235" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:37:42 EST 2021" starttimestamp="1612813070441" timestamp="7191646" />
  <Command __id="5237" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:37:42 EST 2021" starttimestamp="1612813070441" timestamp="7192249" />
  <Command __id="5239" _type="InsertStringCommand" date="Mon Feb 08 16:37:42 EST 2021" starttimestamp="1612813070441" timestamp="7192495" timestamp2="7192495">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5240" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:37:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7192587" />
  <Command __id="5242" _type="PauseCommand" date="Mon Feb 08 16:37:44 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7194125">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1538]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="5241" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:37:44 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7194125" />
  <Command __id="5243" _type="MoveCaretCommand" caretOffset="1407" date="Mon Feb 08 16:37:44 EST 2021" docOffset="21349" starttimestamp="1612813070441" timestamp="7194180" />
  <Command __id="5244" _type="MoveCaretCommand" caretOffset="1463" date="Mon Feb 08 16:37:45 EST 2021" docOffset="21405" starttimestamp="1612813070441" timestamp="7194679" />
  <Command __id="5245" _type="SelectTextCommand" caretOffset="1467" date="Mon Feb 08 16:37:45 EST 2021" end="1467" start="1461" starttimestamp="1612813070441" timestamp="7194845" />
  <Command __id="5247" _type="InsertStringCommand" date="Mon Feb 08 16:37:46 EST 2021" starttimestamp="1612813070441" timestamp="7195809" timestamp2="7195809">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5248" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:37:46 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7195844" />
  <Command __id="5252" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:37:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7196283" />
  <Command __id="5254" _type="InsertStringCommand" date="Mon Feb 08 16:37:46 EST 2021" starttimestamp="1612813070441" timestamp="7196337" timestamp2="7196337">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5256" _type="InsertStringCommand" date="Mon Feb 08 16:37:47 EST 2021" starttimestamp="1612813070441" timestamp="7197253" timestamp2="7197253">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5257" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:37:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7197336" />
  <Command __id="5260" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:37:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7197543" />
  <Command __id="5262" _type="InsertStringCommand" date="Mon Feb 08 16:37:47 EST 2021" starttimestamp="1612813070441" timestamp="7197558" timestamp2="7197558">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5264" _type="PauseCommand" date="Mon Feb 08 16:37:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7198765">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1207]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="5263" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:37:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7198765" />
  <Command __id="5266" _type="PauseCommand" date="Mon Feb 08 16:37:52 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7201748">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2983]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5265" _type="SelectTextCommand" caretOffset="2127" date="Mon Feb 08 16:37:52 EST 2021" end="2127" start="2036" starttimestamp="1612813070441" timestamp="7201748" />
  <Command __id="5268" _type="PauseCommand" date="Mon Feb 08 16:37:56 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7206183">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4435]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5267" _type="MoveCaretCommand" caretOffset="2306" date="Mon Feb 08 16:37:56 EST 2021" docOffset="22248" starttimestamp="1612813070441" timestamp="7206183" />
  <Command __id="5270" _type="PauseCommand" date="Mon Feb 08 16:37:59 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7209017">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2834]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5271" _type="InsertStringCommand" date="Mon Feb 08 16:37:59 EST 2021" starttimestamp="1612813070441" timestamp="7209033" timestamp2="7209033">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5273" _type="InsertStringCommand" date="Mon Feb 08 16:37:59 EST 2021" starttimestamp="1612813070441" timestamp="7209476" timestamp2="7209476">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5274" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:37:59 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7209518" />
  <Command __id="5276" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:00 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7209696" />
  <Command __id="5278" _type="InsertStringCommand" date="Mon Feb 08 16:38:00 EST 2021" starttimestamp="1612813070441" timestamp="7209794" timestamp2="7209794">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5280" _type="PauseCommand" date="Mon Feb 08 16:38:03 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7212793">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2999]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="5281" _type="InsertStringCommand" date="Mon Feb 08 16:38:03 EST 2021" starttimestamp="1612813070441" timestamp="7212810" timestamp2="7212810">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5282" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:03 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7212838" />
  <Command __id="5286" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7213335" />
  <Command __id="5288" _type="InsertStringCommand" date="Mon Feb 08 16:38:03 EST 2021" starttimestamp="1612813070441" timestamp="7213348" timestamp2="7213348">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5290" _type="InsertStringCommand" date="Mon Feb 08 16:38:04 EST 2021" starttimestamp="1612813070441" timestamp="7213774" timestamp2="7213774">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5291" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7213815" />
  <Command __id="5295" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7214653" />
  <Command __id="5297" _type="InsertStringCommand" date="Mon Feb 08 16:38:05 EST 2021" starttimestamp="1612813070441" timestamp="7214786" timestamp2="7214786">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5214" _type="Insert" date="Mon Feb 08 16:37:03 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28724" docExpressionCount="3412" docLength="30483" length="16" offset="21157" starttimestamp="1612813070441" timestamp="7153264">
    <text><![CDATA["Title", "URL", ]]></text>
  </DocumentChange>
  <DocumentChange __id="5234" _type="Delete" date="Mon Feb 08 16:37:42 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28719" docExpressionCount="3412" docLength="30478" endLine="604" length="5" offset="21411" repeat="2" startLine="604" starttimestamp="1612813070441" timestamp="7191642" timestamp2="7192244">
    <text><![CDATA[lastS]]></text>
  </DocumentChange>
  <DocumentChange __id="5238" _type="Insert" date="Mon Feb 08 16:37:42 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28720" docExpressionCount="3412" docLength="30479" length="1" offset="21411" starttimestamp="1612813070441" timestamp="7192489">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5246" _type="Replace" date="Mon Feb 08 16:37:46 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28715" docExpressionCount="3412" docLength="30474" endLine="604" insertionLength="1" int_docASTNodeCount="4875" int_docActiveCodeLength="28714" int_docExpressionCount="3342" int_docLength="30473" length="6" offset="21403" startLine="604" starttimestamp="1612813070441" timestamp="7195800">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5249" _type="Insert" date="Mon Feb 08 16:37:46 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28718" docExpressionCount="3412" docLength="30477" length="3" offset="21404" repeat="3" starttimestamp="1612813070441" timestamp="7195993" timestamp2="7196081">
    <text><![CDATA[ist]]></text>
  </DocumentChange>
  <DocumentChange __id="5253" _type="Replace" date="Mon Feb 08 16:37:46 EST 2021" docASTNodeCount="4978" docActiveCodeLength="28721" docExpressionCount="3413" docLength="30480" endLine="604" insertionLength="7" int_docASTNodeCount="4875" int_docActiveCodeLength="28714" int_docExpressionCount="3342" int_docLength="30473" length="4" offset="21403" startLine="604" starttimestamp="1612813070441" timestamp="7196290">
    <deletedText><![CDATA[list]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5255" _type="Replace" date="Mon Feb 08 16:37:47 EST 2021" docASTNodeCount="4978" docActiveCodeLength="28721" docExpressionCount="3413" docLength="30480" endLine="604" insertionLength="1" int_docASTNodeCount="4878" int_docActiveCodeLength="28720" int_docExpressionCount="3343" int_docLength="30479" length="1" offset="21408" startLine="604" starttimestamp="1612813070441" timestamp="7197244">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5258" _type="Insert" date="Mon Feb 08 16:37:47 EST 2021" docASTNodeCount="4978" docActiveCodeLength="28723" docExpressionCount="3413" docLength="30482" length="2" offset="21409" repeat="2" starttimestamp="1612813070441" timestamp="7197506" timestamp2="7197529">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="5261" _type="Replace" date="Mon Feb 08 16:37:47 EST 2021" docASTNodeCount="4978" docActiveCodeLength="28726" docExpressionCount="3413" docLength="30485" endLine="604" insertionLength="6" int_docASTNodeCount="4878" int_docActiveCodeLength="28720" int_docExpressionCount="3343" int_docLength="30479" length="3" offset="21408" startLine="604" starttimestamp="1612813070441" timestamp="7197549">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5269" _type="Insert" date="Mon Feb 08 16:37:59 EST 2021" docASTNodeCount="4879" docActiveCodeLength="28738" docExpressionCount="3344" docLength="30497" length="12" offset="22248" repeat="3" starttimestamp="1612813070441" timestamp="7209017" timestamp2="7209681">
    <text><![CDATA[
								if]]></text>
  </DocumentChange>
  <DocumentChange __id="5277" _type="Replace" date="Mon Feb 08 16:38:00 EST 2021" docASTNodeCount="4981" docActiveCodeLength="28787" docExpressionCount="3414" docLength="30546" endLine="621" insertionLength="51" int_docASTNodeCount="4978" int_docActiveCodeLength="28736" int_docExpressionCount="3413" int_docLength="30495" length="2" offset="22258" startLine="621" starttimestamp="1612813070441" timestamp="7209719">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
									
								}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5279" _type="Replace" date="Mon Feb 08 16:38:03 EST 2021" docASTNodeCount="4981" docActiveCodeLength="28766" docExpressionCount="3414" docLength="30525" endLine="621" insertionLength="1" int_docASTNodeCount="4882" int_docActiveCodeLength="28765" int_docExpressionCount="3345" int_docLength="30524" length="22" offset="22262" startLine="621" starttimestamp="1612813070441" timestamp="7212793">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5283" _type="Insert" date="Mon Feb 08 16:38:03 EST 2021" docASTNodeCount="4981" docActiveCodeLength="28769" docExpressionCount="3414" docLength="30528" length="3" offset="22263" repeat="3" starttimestamp="1612813070441" timestamp="7213068" timestamp2="7213097">
    <text><![CDATA[ear]]></text>
  </DocumentChange>
  <DocumentChange __id="5287" _type="Replace" date="Mon Feb 08 16:38:03 EST 2021" docASTNodeCount="4981" docActiveCodeLength="28773" docExpressionCount="3414" docLength="30532" endLine="621" insertionLength="8" int_docASTNodeCount="4882" int_docActiveCodeLength="28765" int_docExpressionCount="3345" int_docLength="30524" length="4" offset="22262" startLine="621" starttimestamp="1612813070441" timestamp="7213342">
    <deletedText><![CDATA[sear]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5289" _type="Insert" date="Mon Feb 08 16:38:04 EST 2021" docASTNodeCount="4983" docActiveCodeLength="28777" docExpressionCount="3416" docLength="30536" length="4" offset="22270" repeat="4" starttimestamp="1612813070441" timestamp="7213772" timestamp2="7214304">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5296" _type="Replace" date="Mon Feb 08 16:38:05 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28782" docExpressionCount="3417" docLength="30541" endLine="621" insertionLength="8" int_docASTNodeCount="4884" int_docActiveCodeLength="28774" int_docExpressionCount="3346" int_docLength="30533" length="3" offset="22271" startLine="621" starttimestamp="1612813070441" timestamp="7214658">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5298" _type="Replace" date="Mon Feb 08 16:38:06 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28780" docExpressionCount="3109" docLength="30539" endLine="621" insertionLength="1" int_docASTNodeCount="4983" int_docActiveCodeLength="28779" int_docExpressionCount="3416" int_docLength="30538" length="3" offset="22275" startLine="621" starttimestamp="1612813070441" timestamp="7216446">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5301" _type="Insert" date="Mon Feb 08 16:38:07 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28784" docExpressionCount="3109" docLength="30543" length="4" offset="22276" repeat="4" starttimestamp="1612813070441" timestamp="7216853" timestamp2="7217308">
    <text><![CDATA[comm]]></text>
  </DocumentChange>
  <DocumentChange __id="5309" _type="Delete" date="Mon Feb 08 16:38:08 EST 2021" docASTNodeCount="4983" docActiveCodeLength="28779" docExpressionCount="3416" docLength="30538" endLine="621" length="5" offset="22275" repeat="2" startLine="621" starttimestamp="1612813070441" timestamp="7218080" timestamp2="7218283">
    <text><![CDATA["comm]]></text>
  </DocumentChange>
  <DocumentChange __id="5313" _type="Insert" date="Mon Feb 08 16:38:09 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28783" docExpressionCount="3417" docLength="30542" length="4" offset="22275" repeat="4" starttimestamp="1612813070441" timestamp="7218795" timestamp2="7219226">
    <text><![CDATA[comm]]></text>
  </DocumentChange>
  <DocumentChange __id="5320" _type="Replace" date="Mon Feb 08 16:38:09 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28786" docExpressionCount="3417" docLength="30545" endLine="621" insertionLength="7" int_docASTNodeCount="4983" int_docActiveCodeLength="28779" int_docExpressionCount="3416" int_docLength="30538" length="4" offset="22275" startLine="621" starttimestamp="1612813070441" timestamp="7219506">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5322" _type="Insert" date="Mon Feb 08 16:38:10 EST 2021" docASTNodeCount="4986" docActiveCodeLength="28790" docExpressionCount="3419" docLength="30549" length="4" offset="22282" repeat="4" starttimestamp="1612813070441" timestamp="7219738" timestamp2="7220118">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5329" _type="Replace" date="Mon Feb 08 16:38:10 EST 2021" docASTNodeCount="4986" docActiveCodeLength="28805" docExpressionCount="3419" docLength="30564" endLine="621" insertionLength="18" int_docASTNodeCount="4887" int_docActiveCodeLength="28787" int_docExpressionCount="3349" int_docLength="30546" length="3" offset="22283" startLine="621" starttimestamp="1612813070441" timestamp="7220220">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getAttributesMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5331" _type="Insert" date="Mon Feb 08 16:38:11 EST 2021" docASTNodeCount="4887" docActiveCodeLength="28807" docExpressionCount="3350" docLength="30566" length="2" offset="22301" starttimestamp="1612813070441" timestamp="7221198">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="5299" _type="PauseCommand" date="Mon Feb 08 16:38:06 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7216446">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1660]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="5300" _type="InsertStringCommand" date="Mon Feb 08 16:38:06 EST 2021" starttimestamp="1612813070441" timestamp="7216454" timestamp2="7216454">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5302" _type="InsertStringCommand" date="Mon Feb 08 16:38:07 EST 2021" starttimestamp="1612813070441" timestamp="7216855" timestamp2="7216855">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5304" _type="InsertStringCommand" date="Mon Feb 08 16:38:07 EST 2021" starttimestamp="1612813070441" timestamp="7216991" timestamp2="7216991">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5306" _type="InsertStringCommand" date="Mon Feb 08 16:38:07 EST 2021" starttimestamp="1612813070441" timestamp="7217190" timestamp2="7217190">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5308" _type="InsertStringCommand" date="Mon Feb 08 16:38:07 EST 2021" starttimestamp="1612813070441" timestamp="7217310" timestamp2="7217310">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5310" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:08 EST 2021" starttimestamp="1612813070441" timestamp="7218084" />
  <Command __id="5312" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:08 EST 2021" starttimestamp="1612813070441" timestamp="7218290" />
  <Command __id="5314" _type="InsertStringCommand" date="Mon Feb 08 16:38:09 EST 2021" starttimestamp="1612813070441" timestamp="7218799" timestamp2="7218799">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5315" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:09 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7218888" />
  <Command __id="5319" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:09 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7219501" />
  <Command __id="5321" _type="InsertStringCommand" date="Mon Feb 08 16:38:09 EST 2021" starttimestamp="1612813070441" timestamp="7219514" timestamp2="7219514">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5323" _type="InsertStringCommand" date="Mon Feb 08 16:38:10 EST 2021" starttimestamp="1612813070441" timestamp="7219740" timestamp2="7219740">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5324" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:10 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7219832" />
  <Command __id="5328" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:10 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7220214" />
  <Command __id="5330" _type="InsertStringCommand" date="Mon Feb 08 16:38:10 EST 2021" starttimestamp="1612813070441" timestamp="7220237" timestamp2="7220237">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5332" _type="InsertStringCommand" date="Mon Feb 08 16:38:11 EST 2021" starttimestamp="1612813070441" timestamp="7221201" timestamp2="7221201">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5335" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:12 EST 2021" starttimestamp="1612813070441" timestamp="7221686" />
  <Command __id="5337" _type="InsertStringCommand" date="Mon Feb 08 16:38:12 EST 2021" starttimestamp="1612813070441" timestamp="7221908" timestamp2="7221908">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5338" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:12 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7221999" />
  <Command __id="5342" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7222363" />
  <Command __id="5344" _type="InsertStringCommand" date="Mon Feb 08 16:38:12 EST 2021" starttimestamp="1612813070441" timestamp="7222473" timestamp2="7222473">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5346" _type="InsertStringCommand" date="Mon Feb 08 16:38:13 EST 2021" starttimestamp="1612813070441" timestamp="7223394" timestamp2="7223394">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5348" _type="InsertStringCommand" date="Mon Feb 08 16:38:14 EST 2021" starttimestamp="1612813070441" timestamp="7223992" timestamp2="7223992">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5350" _type="InsertStringCommand" date="Mon Feb 08 16:38:14 EST 2021" starttimestamp="1612813070441" timestamp="7224075" timestamp2="7224075">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:15 EST 2021" starttimestamp="1612813070441" timestamp="7224768" />
  <Command __id="5354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:15 EST 2021" starttimestamp="1612813070441" timestamp="7224921" />
  <Command __id="5356" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:15 EST 2021" starttimestamp="1612813070441" timestamp="7225288" />
  <Command __id="5358" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:15 EST 2021" starttimestamp="1612813070441" timestamp="7225426" />
  <Command __id="5360" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:15 EST 2021" starttimestamp="1612813070441" timestamp="7225557" />
  <Command __id="5362" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:16 EST 2021" starttimestamp="1612813070441" timestamp="7225684" />
  <Command __id="5364" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:16 EST 2021" starttimestamp="1612813070441" timestamp="7225801" />
  <Command __id="5366" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:16 EST 2021" starttimestamp="1612813070441" timestamp="7225929" />
  <Command __id="5368" _type="PauseCommand" date="Mon Feb 08 16:38:23 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7232611">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6682]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5369" _type="InsertStringCommand" date="Mon Feb 08 16:38:23 EST 2021" starttimestamp="1612813070441" timestamp="7232614" timestamp2="7232614">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5371" _type="InsertStringCommand" date="Mon Feb 08 16:38:23 EST 2021" starttimestamp="1612813070441" timestamp="7232675" timestamp2="7232675">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5372" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:23 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7232716" />
  <Command __id="5373" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:23 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7232832" />
  <Command __id="5375" _type="InsertStringCommand" date="Mon Feb 08 16:38:23 EST 2021" starttimestamp="1612813070441" timestamp="7232848" timestamp2="7232848">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5377" _type="InsertStringCommand" date="Mon Feb 08 16:38:23 EST 2021" starttimestamp="1612813070441" timestamp="7233067" timestamp2="7233067">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5378" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:23 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7233159" />
  <Command __id="5382" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7234025" />
  <Command __id="5384" _type="InsertStringCommand" date="Mon Feb 08 16:38:24 EST 2021" starttimestamp="1612813070441" timestamp="7234144" timestamp2="7234144">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5386" _type="InsertStringCommand" date="Mon Feb 08 16:38:24 EST 2021" starttimestamp="1612813070441" timestamp="7234454" timestamp2="7234454">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5388" _type="InsertStringCommand" date="Mon Feb 08 16:38:25 EST 2021" starttimestamp="1612813070441" timestamp="7234839" timestamp2="7234839">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5390" _type="InsertStringCommand" date="Mon Feb 08 16:38:25 EST 2021" starttimestamp="1612813070441" timestamp="7234913" timestamp2="7234913">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5392" _type="InsertStringCommand" date="Mon Feb 08 16:38:25 EST 2021" starttimestamp="1612813070441" timestamp="7235037" timestamp2="7235037">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5394" _type="InsertStringCommand" date="Mon Feb 08 16:38:25 EST 2021" starttimestamp="1612813070441" timestamp="7235247" timestamp2="7235247">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="5396" _type="InsertStringCommand" date="Mon Feb 08 16:38:25 EST 2021" starttimestamp="1612813070441" timestamp="7235344" timestamp2="7235344">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5398" _type="InsertStringCommand" date="Mon Feb 08 16:38:25 EST 2021" starttimestamp="1612813070441" timestamp="7235443" timestamp2="7235443">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5400" _type="InsertStringCommand" date="Mon Feb 08 16:38:26 EST 2021" starttimestamp="1612813070441" timestamp="7235592" timestamp2="7235592">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5402" _type="InsertStringCommand" date="Mon Feb 08 16:38:26 EST 2021" starttimestamp="1612813070441" timestamp="7235977" timestamp2="7235977">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="5404" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:26 EST 2021" starttimestamp="1612813070441" timestamp="7236519" />
  <Command __id="5406" _type="InsertStringCommand" date="Mon Feb 08 16:38:27 EST 2021" starttimestamp="1612813070441" timestamp="7237102" timestamp2="7237102">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5408" _type="PauseCommand" date="Mon Feb 08 16:38:31 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7240700">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3598]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5407" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:31 EST 2021" starttimestamp="1612813070441" timestamp="7240700" />
  <Command __id="5409" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:31 EST 2021" starttimestamp="1612813070441" timestamp="7240850" />
  <Command __id="5410" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:31 EST 2021" starttimestamp="1612813070441" timestamp="7240983" />
  <Command __id="5411" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:31 EST 2021" starttimestamp="1612813070441" timestamp="7241113" />
  <Command __id="5412" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:31 EST 2021" starttimestamp="1612813070441" timestamp="7241263" />
  <Command __id="5413" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:31 EST 2021" starttimestamp="1612813070441" timestamp="7241414" />
  <Command __id="5414" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:32 EST 2021" starttimestamp="1612813070441" timestamp="7241566" />
  <Command __id="5415" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:32 EST 2021" starttimestamp="1612813070441" timestamp="7241723" />
  <Command __id="5416" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:32 EST 2021" starttimestamp="1612813070441" timestamp="7241883" />
  <Command __id="5417" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:32 EST 2021" starttimestamp="1612813070441" timestamp="7242262" />
  <Command __id="5419" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:33 EST 2021" starttimestamp="1612813070441" timestamp="7242766" />
  <Command __id="5421" _type="PauseCommand" date="Mon Feb 08 16:38:34 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7243886">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1120]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5422" _type="InsertStringCommand" date="Mon Feb 08 16:38:34 EST 2021" starttimestamp="1612813070441" timestamp="7243890" timestamp2="7243890">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5424" _type="InsertStringCommand" date="Mon Feb 08 16:38:34 EST 2021" starttimestamp="1612813070441" timestamp="7243966" timestamp2="7243966">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5425" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:34 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7244006" />
  <Command __id="5426" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:34 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7244035" />
  <Command __id="5428" _type="InsertStringCommand" date="Mon Feb 08 16:38:34 EST 2021" starttimestamp="1612813070441" timestamp="7244047" timestamp2="7244047">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5430" _type="InsertStringCommand" date="Mon Feb 08 16:38:34 EST 2021" starttimestamp="1612813070441" timestamp="7244135" timestamp2="7244135">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5431" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:34 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7244175" />
  <Command __id="5432" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:34 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7244204" />
  <Command __id="5434" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:35 EST 2021" starttimestamp="1612813070441" timestamp="7245100" />
  <Command __id="5436" _type="InsertStringCommand" date="Mon Feb 08 16:38:36 EST 2021" starttimestamp="1612813070441" timestamp="7245883" timestamp2="7245883">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5438" _type="InsertStringCommand" date="Mon Feb 08 16:38:36 EST 2021" starttimestamp="1612813070441" timestamp="7245946" timestamp2="7245946">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5440" _type="InsertStringCommand" date="Mon Feb 08 16:38:36 EST 2021" starttimestamp="1612813070441" timestamp="7245978" timestamp2="7245978">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5441" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:36 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7246019" />
  <Command __id="5444" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:37 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7246855" />
  <Command __id="5446" _type="InsertStringCommand" date="Mon Feb 08 16:38:37 EST 2021" starttimestamp="1612813070441" timestamp="7246873" timestamp2="7246873">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5447" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:37 EST 2021" starttimestamp="1612813070441" timestamp="7247380" />
  <Command __id="5448" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:37 EST 2021" starttimestamp="1612813070441" timestamp="7247487" />
  <Command __id="5449" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7247610" />
  <Command __id="5450" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7247738" />
  <Command __id="5451" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7247847" />
  <Command __id="5452" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7247955" />
  <Command __id="5453" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7248081" />
  <Command __id="5454" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7248235" />
  <Command __id="5455" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7248335" />
  <Command __id="5456" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:38:38 EST 2021" starttimestamp="1612813070441" timestamp="7248482" />
  <Command __id="5457" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:38:39 EST 2021" starttimestamp="1612813070441" timestamp="7248917" />
  <Command __id="5458" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:38:39 EST 2021" starttimestamp="1612813070441" timestamp="7249150" />
  <Command __id="5460" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:40 EST 2021" starttimestamp="1612813070441" timestamp="7249566" />
  <Command __id="5461" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:38:40 EST 2021" starttimestamp="1612813070441" timestamp="7250275" />
  <Command __id="5462" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:38:41 EST 2021" starttimestamp="1612813070441" timestamp="7251063" />
  <Command __id="5463" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:38:42 EST 2021" starttimestamp="1612813070441" timestamp="7251611" />
  <Command __id="5464" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:38:42 EST 2021" starttimestamp="1612813070441" timestamp="7251890" />
  <Command __id="5465" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:38:42 EST 2021" starttimestamp="1612813070441" timestamp="7252035" />
  <Command __id="5466" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:38:42 EST 2021" starttimestamp="1612813070441" timestamp="7252164" />
  <Command __id="5468" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:42 EST 2021" starttimestamp="1612813070441" timestamp="7252541" />
  <Command __id="5469" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:38:43 EST 2021" starttimestamp="1612813070441" timestamp="7253195" />
  <Command __id="5470" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:38:44 EST 2021" starttimestamp="1612813070441" timestamp="7253724" />
  <Command __id="5472" _type="PauseCommand" date="Mon Feb 08 16:38:46 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7255671">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1947]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5471" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:38:46 EST 2021" starttimestamp="1612813070441" timestamp="7255671" />
  <Command __id="5473" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:38:46 EST 2021" starttimestamp="1612813070441" timestamp="7256019" />
  <Command __id="5475" _type="InsertStringCommand" date="Mon Feb 08 16:38:47 EST 2021" starttimestamp="1612813070441" timestamp="7256909" timestamp2="7256909">
    <data><![CDATA[)]]></data>
  </Command>
  <DocumentChange __id="5333" _type="Delete" date="Mon Feb 08 16:38:12 EST 2021" docASTNodeCount="4986" docActiveCodeLength="28805" docExpressionCount="3419" docLength="30564" endLine="621" length="2" offset="22301" repeat="2" startLine="621" starttimestamp="1612813070441" timestamp="7221670" timestamp2="7221679">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="5336" _type="Insert" date="Mon Feb 08 16:38:12 EST 2021" docASTNodeCount="4988" docActiveCodeLength="28809" docExpressionCount="3421" docLength="30568" length="4" offset="22301" repeat="4" starttimestamp="1612813070441" timestamp="7221905" timestamp2="7222290">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5343" _type="Replace" date="Mon Feb 08 16:38:12 EST 2021" docASTNodeCount="4989" docActiveCodeLength="28814" docExpressionCount="3422" docLength="30573" endLine="621" insertionLength="8" int_docASTNodeCount="4889" int_docActiveCodeLength="28806" int_docExpressionCount="3352" int_docLength="30565" length="3" offset="22302" startLine="621" starttimestamp="1612813070441" timestamp="7222370">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5345" _type="Replace" date="Mon Feb 08 16:38:13 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28812" docExpressionCount="3109" docLength="30571" endLine="621" insertionLength="1" int_docASTNodeCount="4988" int_docActiveCodeLength="28811" int_docExpressionCount="3421" int_docLength="30570" length="3" offset="22306" startLine="621" starttimestamp="1612813070441" timestamp="7223384">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5347" _type="Insert" date="Mon Feb 08 16:38:14 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28814" docExpressionCount="3109" docLength="30573" length="2" offset="22307" repeat="2" starttimestamp="1612813070441" timestamp="7223989" timestamp2="7224073">
    <text><![CDATA[ty]]></text>
  </DocumentChange>
  <DocumentChange __id="5351" _type="Delete" date="Mon Feb 08 16:38:15 EST 2021" docASTNodeCount="4887" docActiveCodeLength="28791" docExpressionCount="3350" docLength="30550" endLine="621" length="23" offset="22286" repeat="8" startLine="621" starttimestamp="1612813070441" timestamp="7224765" timestamp2="7225925">
    <text><![CDATA[AttributesMap().get("ty]]></text>
  </DocumentChange>
  <DocumentChange __id="5367" _type="Insert" date="Mon Feb 08 16:38:23 EST 2021" docASTNodeCount="4887" docActiveCodeLength="28793" docExpressionCount="3350" docLength="30552" length="2" offset="22286" repeat="2" starttimestamp="1612813070441" timestamp="7232611" timestamp2="7232673">
    <text><![CDATA[da]]></text>
  </DocumentChange>
  <DocumentChange __id="5374" _type="Replace" date="Mon Feb 08 16:38:23 EST 2021" docASTNodeCount="4887" docActiveCodeLength="28800" docExpressionCount="3350" docLength="30559" endLine="621" insertionLength="12" int_docASTNodeCount="4887" int_docActiveCodeLength="28788" int_docExpressionCount="3349" int_docLength="30547" length="5" offset="22283" startLine="621" starttimestamp="1612813070441" timestamp="7232840">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5376" _type="Insert" date="Mon Feb 08 16:38:23 EST 2021" docASTNodeCount="4889" docActiveCodeLength="28804" docExpressionCount="3352" docLength="30563" length="4" offset="22295" repeat="4" starttimestamp="1612813070441" timestamp="7233065" timestamp2="7233458">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5383" _type="Replace" date="Mon Feb 08 16:38:24 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28809" docExpressionCount="3353" docLength="30568" endLine="621" insertionLength="8" int_docASTNodeCount="4889" int_docActiveCodeLength="28801" int_docExpressionCount="3352" int_docLength="30560" length="3" offset="22296" startLine="621" starttimestamp="1612813070441" timestamp="7234033">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5385" _type="Replace" date="Mon Feb 08 16:38:24 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28807" docExpressionCount="3109" docLength="30566" endLine="621" insertionLength="1" int_docASTNodeCount="4889" int_docActiveCodeLength="28806" int_docExpressionCount="3352" int_docLength="30565" length="3" offset="22300" startLine="621" starttimestamp="1612813070441" timestamp="7234444">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5387" _type="Insert" date="Mon Feb 08 16:38:25 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28815" docExpressionCount="3109" docLength="30574" length="8" offset="22301" repeat="8" starttimestamp="1612813070441" timestamp="7234836" timestamp2="7235975">
    <text><![CDATA[keyword:]]></text>
  </DocumentChange>
  <DocumentChange __id="5403" _type="Delete" date="Mon Feb 08 16:38:26 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28814" docExpressionCount="3109" docLength="30573" endLine="621" length="1" offset="22308" startLine="621" starttimestamp="1612813070441" timestamp="7236516">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="5405" _type="Insert" date="Mon Feb 08 16:38:27 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28815" docExpressionCount="3353" docLength="30574" length="1" offset="22308" starttimestamp="1612813070441" timestamp="7237095">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="5418" _type="Delete" date="Mon Feb 08 16:38:33 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28808" docExpressionCount="3353" docLength="30567" endLine="621" length="7" offset="22275" startLine="621" starttimestamp="1612813070441" timestamp="7242759">
    <text><![CDATA[command]]></text>
  </DocumentChange>
  <DocumentChange __id="5420" _type="Insert" date="Mon Feb 08 16:38:34 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28812" docExpressionCount="3353" docLength="30571" length="4" offset="22275" repeat="4" starttimestamp="1612813070441" timestamp="7243886" timestamp2="7244132">
    <text><![CDATA[kast]]></text>
  </DocumentChange>
  <DocumentChange __id="5433" _type="Delete" date="Mon Feb 08 16:38:35 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28808" docExpressionCount="3353" docLength="30567" endLine="621" length="4" offset="22275" startLine="621" starttimestamp="1612813070441" timestamp="7245095">
    <text><![CDATA[kast]]></text>
  </DocumentChange>
  <DocumentChange __id="5435" _type="Insert" date="Mon Feb 08 16:38:36 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28813" docExpressionCount="3353" docLength="30572" length="5" offset="22275" repeat="5" starttimestamp="1612813070441" timestamp="7245879" timestamp2="7246258">
    <text><![CDATA[lasts]]></text>
  </DocumentChange>
  <DocumentChange __id="5445" _type="Replace" date="Mon Feb 08 16:38:37 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28818" docExpressionCount="3353" docLength="30577" endLine="621" insertionLength="10" int_docASTNodeCount="4890" int_docActiveCodeLength="28808" int_docExpressionCount="3353" int_docLength="30567" length="5" offset="22275" startLine="621" starttimestamp="1612813070441" timestamp="7246861">
    <deletedText><![CDATA[lasts]]></deletedText>
    <insertedText><![CDATA[lastSearch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5459" _type="Delete" date="Mon Feb 08 16:38:40 EST 2021" docASTNodeCount="4989" docActiveCodeLength="28817" docExpressionCount="3422" docLength="30576" endLine="621" length="1" offset="22314" startLine="621" starttimestamp="1612813070441" timestamp="7249560">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="5467" _type="Delete" date="Mon Feb 08 16:38:42 EST 2021" docASTNodeCount="4891" docActiveCodeLength="28816" docExpressionCount="3353" docLength="30575" endLine="621" length="1" offset="22313" startLine="621" starttimestamp="1612813070441" timestamp="7252534">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="5474" _type="Insert" date="Mon Feb 08 16:38:47 EST 2021" docASTNodeCount="4989" docActiveCodeLength="28817" docExpressionCount="3422" docLength="30576" length="1" offset="22313" starttimestamp="1612813070441" timestamp="7256901">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="5489" _type="Delete" date="Mon Feb 08 16:38:56 EST 2021" docASTNodeCount="4890" docActiveCodeLength="28814" docExpressionCount="3353" docLength="30573" endLine="621" length="3" offset="22271" startLine="621" starttimestamp="1612813070441" timestamp="7266534">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="5491" _type="Insert" date="Mon Feb 08 16:38:57 EST 2021" docASTNodeCount="4989" docActiveCodeLength="28817" docExpressionCount="3422" docLength="30576" length="3" offset="22271" repeat="3" starttimestamp="1612813070441" timestamp="7266803" timestamp2="7267038">
    <text><![CDATA[con]]></text>
  </DocumentChange>
  <Command __id="5477" _type="PauseCommand" date="Mon Feb 08 16:38:54 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7264445">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[7536]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5476" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:54 EST 2021" starttimestamp="1612813070441" timestamp="7264445" />
  <Command __id="5478" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7264594" />
  <Command __id="5479" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7264716" />
  <Command __id="5480" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7264848" />
  <Command __id="5481" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7264971" />
  <Command __id="5482" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7265095" />
  <Command __id="5483" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7265235" />
  <Command __id="5484" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7265364" />
  <Command __id="5485" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:55 EST 2021" starttimestamp="1612813070441" timestamp="7265495" />
  <Command __id="5486" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:56 EST 2021" starttimestamp="1612813070441" timestamp="7265640" />
  <Command __id="5487" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:56 EST 2021" starttimestamp="1612813070441" timestamp="7265792" />
  <Command __id="5488" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:38:56 EST 2021" starttimestamp="1612813070441" timestamp="7266121" />
  <Command __id="5490" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:38:56 EST 2021" starttimestamp="1612813070441" timestamp="7266538" />
  <Command __id="5492" _type="InsertStringCommand" date="Mon Feb 08 16:38:57 EST 2021" starttimestamp="1612813070441" timestamp="7266808" timestamp2="7266808">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5493" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:38:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7266847" />
  <Command __id="5496" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:38:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7267456" />
  <Command __id="5498" _type="InsertStringCommand" date="Mon Feb 08 16:38:58 EST 2021" starttimestamp="1612813070441" timestamp="7267600" timestamp2="7267600">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5500" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:38:58 EST 2021" starttimestamp="1612813070441" timestamp="7268116" />
  <Command __id="5502" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 16:38:59 EST 2021" starttimestamp="1612813070441" timestamp="7268566" />
  <Command __id="5504" _type="PauseCommand" date="Mon Feb 08 16:39:00 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7269724">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1158]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="5505" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 16:39:00 EST 2021" starttimestamp="1612813070441" timestamp="7269735" />
  <Command __id="5507" _type="PauseCommand" date="Mon Feb 08 16:39:01 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7270896">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1161]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5508" _type="UndoCommand" date="Mon Feb 08 16:39:01 EST 2021" starttimestamp="1612813070441" timestamp="7270903" />
  <Command __id="5510" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:39:02 EST 2021" starttimestamp="1612813070441" timestamp="7271833" />
  <Command __id="5511" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:39:03 EST 2021" starttimestamp="1612813070441" timestamp="7272759" />
  <Command __id="5513" _type="PauseCommand" date="Mon Feb 08 16:39:06 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7275777">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3018]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5512" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:39:06 EST 2021" starttimestamp="1612813070441" timestamp="7275777" />
  <Command __id="5515" _type="PauseCommand" date="Mon Feb 08 16:39:08 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7278175">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2398]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5514" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:39:08 EST 2021" starttimestamp="1612813070441" timestamp="7278175" />
  <Command __id="5516" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:39:08 EST 2021" starttimestamp="1612813070441" timestamp="7278493" />
  <Command __id="5517" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:39:09 EST 2021" starttimestamp="1612813070441" timestamp="7279218" />
  <Command __id="5518" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:39:09 EST 2021" starttimestamp="1612813070441" timestamp="7279359" />
  <Command __id="5519" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:39:09 EST 2021" starttimestamp="1612813070441" timestamp="7279487" />
  <Command __id="5520" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:39:10 EST 2021" starttimestamp="1612813070441" timestamp="7279617" />
  <Command __id="5521" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:39:10 EST 2021" starttimestamp="1612813070441" timestamp="7279762" />
  <Command __id="5523" _type="InsertStringCommand" date="Mon Feb 08 16:39:10 EST 2021" starttimestamp="1612813070441" timestamp="7280555" timestamp2="7280555">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="5524" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:39:11 EST 2021" starttimestamp="1612813070441" timestamp="7280785" />
  <Command __id="5526" _type="PauseCommand" date="Mon Feb 08 16:39:13 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7283071">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2286]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5527" _type="InsertStringCommand" date="Mon Feb 08 16:39:13 EST 2021" starttimestamp="1612813070441" timestamp="7283078" timestamp2="7283078">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5528" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7283118" />
  <Command __id="5531" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7284284" />
  <Command __id="5533" _type="InsertStringCommand" date="Mon Feb 08 16:39:14 EST 2021" starttimestamp="1612813070441" timestamp="7284298" timestamp2="7284298">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5535" _type="InsertStringCommand" date="Mon Feb 08 16:39:15 EST 2021" starttimestamp="1612813070441" timestamp="7284777" timestamp2="7284777">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5536" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:15 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7284819" />
  <Command __id="5539" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:15 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7285420" />
  <Command __id="5541" _type="InsertStringCommand" date="Mon Feb 08 16:39:15 EST 2021" starttimestamp="1612813070441" timestamp="7285547" timestamp2="7285547">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5543" _type="PauseCommand" date="Mon Feb 08 16:39:18 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7287820">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2273]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="5544" _type="InsertStringCommand" date="Mon Feb 08 16:39:18 EST 2021" starttimestamp="1612813070441" timestamp="7287836" timestamp2="7287836">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5546" _type="InsertStringCommand" date="Mon Feb 08 16:39:18 EST 2021" starttimestamp="1612813070441" timestamp="7287893" timestamp2="7287893">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5547" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7287935" />
  <Command __id="5551" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7288996" />
  <Command __id="5553" _type="InsertStringCommand" date="Mon Feb 08 16:39:19 EST 2021" starttimestamp="1612813070441" timestamp="7289021" timestamp2="7289021">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5555" _type="InsertStringCommand" date="Mon Feb 08 16:39:19 EST 2021" starttimestamp="1612813070441" timestamp="7289288" timestamp2="7289288">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5556" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7289380" />
  <Command __id="5562" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7290705" />
  <Command __id="5564" _type="InsertStringCommand" date="Mon Feb 08 16:39:21 EST 2021" starttimestamp="1612813070441" timestamp="7290722" timestamp2="7290722">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5566" _type="InsertStringCommand" date="Mon Feb 08 16:39:21 EST 2021" starttimestamp="1612813070441" timestamp="7291046" timestamp2="7291046">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5567" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7291136" />
  <Command __id="5571" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:22 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7291639" />
  <Command __id="5573" _type="InsertStringCommand" date="Mon Feb 08 16:39:22 EST 2021" starttimestamp="1612813070441" timestamp="7291751" timestamp2="7291751">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5575" _type="InsertStringCommand" date="Mon Feb 08 16:39:22 EST 2021" starttimestamp="1612813070441" timestamp="7292040" timestamp2="7292040">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5577" _type="InsertStringCommand" date="Mon Feb 08 16:39:23 EST 2021" starttimestamp="1612813070441" timestamp="7292581" timestamp2="7292581">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5579" _type="InsertStringCommand" date="Mon Feb 08 16:39:23 EST 2021" starttimestamp="1612813070441" timestamp="7292714" timestamp2="7292714">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5581" _type="InsertStringCommand" date="Mon Feb 08 16:39:23 EST 2021" starttimestamp="1612813070441" timestamp="7292843" timestamp2="7292843">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5583" _type="InsertStringCommand" date="Mon Feb 08 16:39:23 EST 2021" starttimestamp="1612813070441" timestamp="7293007" timestamp2="7293007">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="5585" _type="InsertStringCommand" date="Mon Feb 08 16:39:23 EST 2021" starttimestamp="1612813070441" timestamp="7293131" timestamp2="7293131">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5587" _type="InsertStringCommand" date="Mon Feb 08 16:39:23 EST 2021" starttimestamp="1612813070441" timestamp="7293249" timestamp2="7293249">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5589" _type="InsertStringCommand" date="Mon Feb 08 16:39:23 EST 2021" starttimestamp="1612813070441" timestamp="7293408" timestamp2="7293408">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5591" _type="InsertStringCommand" date="Mon Feb 08 16:39:24 EST 2021" starttimestamp="1612813070441" timestamp="7293726" timestamp2="7293726">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5593" _type="PauseCommand" date="Mon Feb 08 16:39:25 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7294727">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1001]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="5592" _type="InsertStringCommand" date="Mon Feb 08 16:39:25 EST 2021" starttimestamp="1612813070441" timestamp="7294727" timestamp2="7294727">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5594" _type="InsertStringCommand" date="Mon Feb 08 16:39:25 EST 2021" starttimestamp="1612813070441" timestamp="7295212" timestamp2="7295212">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5596" _type="PauseCommand" date="Mon Feb 08 16:39:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7297051">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1839]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="5597" _type="InsertStringCommand" date="Mon Feb 08 16:39:27 EST 2021" starttimestamp="1612813070441" timestamp="7297063" timestamp2="7297063">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5599" _type="InsertStringCommand" date="Mon Feb 08 16:39:27 EST 2021" starttimestamp="1612813070441" timestamp="7297132" timestamp2="7297132">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5601" _type="InsertStringCommand" date="Mon Feb 08 16:39:27 EST 2021" starttimestamp="1612813070441" timestamp="7297175" timestamp2="7297175">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="5602" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:27 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7297209" />
  <Command __id="5604" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:27 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7297396" />
  <Command __id="5606" _type="InsertStringCommand" date="Mon Feb 08 16:39:27 EST 2021" starttimestamp="1612813070441" timestamp="7297477" timestamp2="7297477">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5607" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:28 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7297566" />
  <Command __id="5612" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:28 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7298495" />
  <Command __id="5615" _type="InsertStringCommand" date="Mon Feb 08 16:39:28 EST 2021" starttimestamp="1612813070441" timestamp="7298535" timestamp2="7298535">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5617" _type="PauseCommand" date="Mon Feb 08 16:39:30 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7299684">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1149]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5616" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:39:30 EST 2021" starttimestamp="1612813070441" timestamp="7299684" />
  <Command __id="5619" _type="InsertStringCommand" date="Mon Feb 08 16:39:30 EST 2021" starttimestamp="1612813070441" timestamp="7299972" timestamp2="7299972">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:39:30 EST 2021" starttimestamp="1612813070441" timestamp="7300548" />
  <Command __id="5622" _type="PauseCommand" date="Mon Feb 08 16:39:32 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7302408">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1860]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5621" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:39:32 EST 2021" starttimestamp="1612813070441" timestamp="7302408" />
  <Command __id="5624" _type="PauseCommand" date="Mon Feb 08 16:39:46 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7316438">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[14030]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5623" _type="MoveCaretCommand" caretOffset="2490" date="Mon Feb 08 16:39:46 EST 2021" docOffset="22432" starttimestamp="1612813070441" timestamp="7316438" />
  <DocumentChange __id="5497" _type="Replace" date="Mon Feb 08 16:38:57 EST 2021" docASTNodeCount="4893" docActiveCodeLength="28830" docExpressionCount="3356" docLength="30589" endLine="621" insertionLength="16" int_docASTNodeCount="4890" int_docActiveCodeLength="28814" int_docExpressionCount="3353" int_docLength="30573" length="3" offset="22271" startLine="621" starttimestamp="1612813070441" timestamp="7267464">
    <deletedText><![CDATA[con]]></deletedText>
    <insertedText><![CDATA[containsKey(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5499" _type="Delete" date="Mon Feb 08 16:38:58 EST 2021" docASTNodeCount="4989" docActiveCodeLength="28825" docExpressionCount="3422" docLength="30584" endLine="621" length="5" offset="22283" repeat="3" startLine="621" starttimestamp="1612813070441" timestamp="7268110" timestamp2="7269724">
    <text><![CDATA[key)(]]></text>
  </DocumentChange>
  <DocumentChange __id="5506" _type="Insert" date="Mon Feb 08 16:39:01 EST 2021" docASTNodeCount="4892" docActiveCodeLength="28827" docExpressionCount="3355" docLength="30586" length="2" offset="22283" starttimestamp="1612813070441" timestamp="7270896">
    <text><![CDATA[)(]]></text>
  </DocumentChange>
  <DocumentChange __id="5509" _type="Delete" date="Mon Feb 08 16:39:02 EST 2021" docASTNodeCount="4989" docActiveCodeLength="28825" docExpressionCount="3422" docLength="30584" endLine="621" length="2" offset="22283" startLine="621" starttimestamp="1612813070441" timestamp="7271819">
    <text><![CDATA[)(]]></text>
  </DocumentChange>
  <DocumentChange __id="5522" _type="Insert" date="Mon Feb 08 16:39:10 EST 2021" docASTNodeCount="4990" docActiveCodeLength="28826" docExpressionCount="3423" docLength="30585" length="1" offset="22262" starttimestamp="1612813070441" timestamp="7280551">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="5525" _type="Insert" date="Mon Feb 08 16:39:13 EST 2021" docASTNodeCount="4893" docActiveCodeLength="28829" docExpressionCount="3355" docLength="30588" length="3" offset="22337" repeat="3" starttimestamp="1612813070441" timestamp="7283071" timestamp2="7283647">
    <text><![CDATA[sea]]></text>
  </DocumentChange>
  <DocumentChange __id="5532" _type="Replace" date="Mon Feb 08 16:39:14 EST 2021" docASTNodeCount="4893" docActiveCodeLength="28834" docExpressionCount="3355" docLength="30593" endLine="622" insertionLength="8" int_docASTNodeCount="4990" int_docActiveCodeLength="28826" int_docExpressionCount="3423" int_docLength="30585" length="3" offset="22337" startLine="622" starttimestamp="1612813070441" timestamp="7284291">
    <deletedText><![CDATA[sea]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5534" _type="Insert" date="Mon Feb 08 16:39:15 EST 2021" docASTNodeCount="4895" docActiveCodeLength="28837" docExpressionCount="3357" docLength="30596" length="3" offset="22345" repeat="3" starttimestamp="1612813070441" timestamp="7284771" timestamp2="7285243">
    <text><![CDATA[.pu]]></text>
  </DocumentChange>
  <DocumentChange __id="5540" _type="Replace" date="Mon Feb 08 16:39:15 EST 2021" docASTNodeCount="4897" docActiveCodeLength="28850" docExpressionCount="3359" docLength="30609" endLine="622" insertionLength="15" int_docASTNodeCount="4884" int_docActiveCodeLength="28835" int_docExpressionCount="3351" int_docLength="30594" length="2" offset="22346" startLine="622" starttimestamp="1612813070441" timestamp="7285427">
    <deletedText><![CDATA[pu]]></deletedText>
    <insertedText><![CDATA[put(key, value)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5542" _type="Replace" date="Mon Feb 08 16:39:18 EST 2021" docASTNodeCount="4897" docActiveCodeLength="28848" docExpressionCount="3359" docLength="30607" endLine="622" insertionLength="1" int_docASTNodeCount="4896" int_docActiveCodeLength="28847" int_docExpressionCount="3358" int_docLength="30606" length="3" offset="22350" startLine="622" starttimestamp="1612813070441" timestamp="7287820">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5545" _type="Insert" date="Mon Feb 08 16:39:18 EST 2021" docASTNodeCount="4897" docActiveCodeLength="28852" docExpressionCount="3359" docLength="30611" length="4" offset="22351" repeat="4" starttimestamp="1612813070441" timestamp="7287891" timestamp2="7288551">
    <text><![CDATA[asts]]></text>
  </DocumentChange>
  <DocumentChange __id="5552" _type="Replace" date="Mon Feb 08 16:39:19 EST 2021" docASTNodeCount="4897" docActiveCodeLength="28857" docExpressionCount="3359" docLength="30616" endLine="622" insertionLength="10" int_docASTNodeCount="4896" int_docActiveCodeLength="28847" int_docExpressionCount="3358" int_docLength="30606" length="5" offset="22350" startLine="622" starttimestamp="1612813070441" timestamp="7289012">
    <deletedText><![CDATA[lasts]]></deletedText>
    <insertedText><![CDATA[lastSearch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5554" _type="Insert" date="Mon Feb 08 16:39:19 EST 2021" docASTNodeCount="4899" docActiveCodeLength="28863" docExpressionCount="3361" docLength="30622" length="6" offset="22360" repeat="6" starttimestamp="1612813070441" timestamp="7289287" timestamp2="7290508">
    <text><![CDATA[.getda]]></text>
  </DocumentChange>
  <DocumentChange __id="5563" _type="Replace" date="Mon Feb 08 16:39:21 EST 2021" docASTNodeCount="4899" docActiveCodeLength="28870" docExpressionCount="3361" docLength="30629" endLine="622" insertionLength="12" int_docASTNodeCount="4898" int_docActiveCodeLength="28858" int_docExpressionCount="3360" int_docLength="30617" length="5" offset="22361" startLine="622" starttimestamp="1612813070441" timestamp="7290711">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5565" _type="Insert" date="Mon Feb 08 16:39:21 EST 2021" docASTNodeCount="4901" docActiveCodeLength="28874" docExpressionCount="3363" docLength="30633" length="4" offset="22373" repeat="4" starttimestamp="1612813070441" timestamp="7291042" timestamp2="7291590">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5572" _type="Replace" date="Mon Feb 08 16:39:22 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28879" docExpressionCount="3364" docLength="30638" endLine="622" insertionLength="8" int_docASTNodeCount="4900" int_docActiveCodeLength="28871" int_docExpressionCount="3362" int_docLength="30630" length="3" offset="22374" startLine="622" starttimestamp="1612813070441" timestamp="7291645">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5574" _type="Replace" date="Mon Feb 08 16:39:22 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28877" docExpressionCount="3104" docLength="30636" endLine="622" insertionLength="1" int_docASTNodeCount="4901" int_docActiveCodeLength="28876" int_docExpressionCount="3363" int_docLength="30635" length="3" offset="22378" startLine="622" starttimestamp="1612813070441" timestamp="7292032">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5576" _type="Insert" date="Mon Feb 08 16:39:23 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28885" docExpressionCount="3364" docLength="30644" length="8" offset="22379" repeat="8" starttimestamp="1612813070441" timestamp="7292579" timestamp2="7293719">
    <text><![CDATA[keyword"]]></text>
  </DocumentChange>
  <DocumentChange __id="5595" _type="Replace" date="Mon Feb 08 16:39:27 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28881" docExpressionCount="3364" docLength="30640" endLine="622" insertionLength="1" int_docASTNodeCount="4891" int_docActiveCodeLength="28880" int_docExpressionCount="3358" int_docLength="30639" length="5" offset="22390" startLine="622" starttimestamp="1612813070441" timestamp="7297051">
    <deletedText><![CDATA[value]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5598" _type="Insert" date="Mon Feb 08 16:39:27 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28889" docExpressionCount="3364" docLength="30648" length="8" offset="22391" repeat="8" starttimestamp="1612813070441" timestamp="7297130" timestamp2="7298484">
    <text><![CDATA[ew arrli]]></text>
  </DocumentChange>
  <DocumentChange __id="5613" _type="Replace" date="Mon Feb 08 16:39:28 EST 2021" docASTNodeCount="4906" docActiveCodeLength="28899" docExpressionCount="3366" docLength="30658" endLine="622" insertionLength="11" int_docASTNodeCount="4902" int_docActiveCodeLength="28888" int_docExpressionCount="3364" int_docLength="30647" length="1" offset="22394" startLine="622" starttimestamp="1612813070441" timestamp="7298505">
    <deletedText><![CDATA[a]]></deletedText>
    <insertedText><![CDATA[ArrayList<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5614" _type="Replace" date="Mon Feb 08 16:39:28 EST 2021" docASTNodeCount="4905" docActiveCodeLength="28897" docExpressionCount="3365" docLength="30656" endLine="622" insertionLength="2" int_docASTNodeCount="4784" int_docActiveCodeLength="28895" int_docExpressionCount="3277" int_docLength="30654" length="4" offset="22405" startLine="622" starttimestamp="1612813070441" timestamp="7298526">
    <deletedText><![CDATA[rrli]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5618" _type="Insert" date="Mon Feb 08 16:39:30 EST 2021" docASTNodeCount="5004" docActiveCodeLength="28898" docExpressionCount="3434" docLength="30657" length="1" offset="22408" starttimestamp="1612813070441" timestamp="7299961">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5625" _type="Insert" date="Mon Feb 08 16:39:47 EST 2021" docASTNodeCount="4988" docActiveCodeLength="28801" docExpressionCount="3419" docLength="30659" length="2" offset="22422" starttimestamp="1612813070441" timestamp="7317494">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="5626" _type="PauseCommand" date="Mon Feb 08 16:39:47 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7317494">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1056]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5627" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:39:47 EST 2021" starttimestamp="1612813070441" timestamp="7317528" />
  <Command __id="5628" _type="MoveCaretCommand" caretOffset="2506" date="Mon Feb 08 16:39:48 EST 2021" docOffset="22448" starttimestamp="1612813070441" timestamp="7318394" />
  <Command __id="5629" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:39:49 EST 2021" starttimestamp="1612813070441" timestamp="7319135" />
  <Command __id="5631" _type="InsertStringCommand" date="Mon Feb 08 16:39:49 EST 2021" starttimestamp="1612813070441" timestamp="7319498" timestamp2="7319498">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5633" _type="InsertStringCommand" date="Mon Feb 08 16:39:50 EST 2021" starttimestamp="1612813070441" timestamp="7320412" timestamp2="7320412">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5634" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:50 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7320456" />
  <Command __id="5639" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7321182" />
  <Command __id="5641" _type="InsertStringCommand" date="Mon Feb 08 16:39:51 EST 2021" starttimestamp="1612813070441" timestamp="7321194" timestamp2="7321194">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5643" _type="InsertStringCommand" date="Mon Feb 08 16:39:51 EST 2021" starttimestamp="1612813070441" timestamp="7321408" timestamp2="7321408">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5644" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7321449" />
  <Command __id="5648" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:53 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7322987" />
  <Command __id="5650" _type="InsertStringCommand" date="Mon Feb 08 16:39:53 EST 2021" starttimestamp="1612813070441" timestamp="7323114" timestamp2="7323114">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5652" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:39:54 EST 2021" starttimestamp="1612813070441" timestamp="7324072" />
  <Command __id="5654" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:39:54 EST 2021" starttimestamp="1612813070441" timestamp="7324238" />
  <Command __id="5656" _type="PauseCommand" date="Mon Feb 08 16:39:55 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7325358">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1120]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5657" _type="InsertStringCommand" date="Mon Feb 08 16:39:55 EST 2021" starttimestamp="1612813070441" timestamp="7325362" timestamp2="7325362">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5659" _type="PauseCommand" date="Mon Feb 08 16:39:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7326556">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1194]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="5660" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 16:39:57 EST 2021" starttimestamp="1612813070441" timestamp="7326564" />
  <Command __id="5662" _type="PauseCommand" date="Mon Feb 08 16:39:58 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7327881">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1317]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5663" _type="InsertStringCommand" date="Mon Feb 08 16:39:58 EST 2021" starttimestamp="1612813070441" timestamp="7327890" timestamp2="7327890">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5664" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:58 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7327928" />
  <Command __id="5669" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:39:59 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7328806" />
  <Command __id="5671" _type="InsertStringCommand" date="Mon Feb 08 16:39:59 EST 2021" starttimestamp="1612813070441" timestamp="7328821" timestamp2="7328821">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5673" _type="InsertStringCommand" date="Mon Feb 08 16:39:59 EST 2021" starttimestamp="1612813070441" timestamp="7329030" timestamp2="7329030">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5674" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:39:59 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7329071" />
  <Command __id="5680" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:40:00 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7329926" />
  <Command __id="5682" _type="InsertStringCommand" date="Mon Feb 08 16:40:00 EST 2021" starttimestamp="1612813070441" timestamp="7329941" timestamp2="7329941">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5684" _type="InsertStringCommand" date="Mon Feb 08 16:40:00 EST 2021" starttimestamp="1612813070441" timestamp="7330231" timestamp2="7330231">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5685" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:40:00 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7330272" />
  <Command __id="5689" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:40:01 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7330929" />
  <Command __id="5691" _type="InsertStringCommand" date="Mon Feb 08 16:40:01 EST 2021" starttimestamp="1612813070441" timestamp="7331052" timestamp2="7331052">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5693" _type="InsertStringCommand" date="Mon Feb 08 16:40:02 EST 2021" starttimestamp="1612813070441" timestamp="7331569" timestamp2="7331569">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5694" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:40:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7331653" />
  <Command __id="5701" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:40:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7332672" />
  <Command __id="5703" _type="InsertStringCommand" date="Mon Feb 08 16:40:03 EST 2021" starttimestamp="1612813070441" timestamp="7332968" timestamp2="7332968">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="5705" _type="InsertStringCommand" date="Mon Feb 08 16:40:03 EST 2021" starttimestamp="1612813070441" timestamp="7333045" timestamp2="7333045">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5707" _type="InsertStringCommand" date="Mon Feb 08 16:40:03 EST 2021" starttimestamp="1612813070441" timestamp="7333148" timestamp2="7333148">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5709" _type="InsertStringCommand" date="Mon Feb 08 16:40:03 EST 2021" starttimestamp="1612813070441" timestamp="7333340" timestamp2="7333340">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="5711" _type="InsertStringCommand" date="Mon Feb 08 16:40:03 EST 2021" starttimestamp="1612813070441" timestamp="7333421" timestamp2="7333421">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5713" _type="InsertStringCommand" date="Mon Feb 08 16:40:03 EST 2021" starttimestamp="1612813070441" timestamp="7333521" timestamp2="7333521">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5715" _type="InsertStringCommand" date="Mon Feb 08 16:40:04 EST 2021" starttimestamp="1612813070441" timestamp="7333662" timestamp2="7333662">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5716" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:40:04 EST 2021" starttimestamp="1612813070441" timestamp="7334367" />
  <Command __id="5718" _type="InsertStringCommand" date="Mon Feb 08 16:40:05 EST 2021" starttimestamp="1612813070441" timestamp="7335141" timestamp2="7335141">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5719" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:40:05 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7335180" />
  <Command __id="5721" _type="PauseCommand" date="Mon Feb 08 16:40:06 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7336264">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1084]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5724" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:40:07 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7336672" />
  <Command __id="5726" _type="InsertStringCommand" date="Mon Feb 08 16:40:07 EST 2021" starttimestamp="1612813070441" timestamp="7336792" timestamp2="7336792">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5728" _type="PauseCommand" date="Mon Feb 08 16:40:09 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7338948">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2156]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="5729" _type="InsertStringCommand" date="Mon Feb 08 16:40:09 EST 2021" starttimestamp="1612813070441" timestamp="7338957" timestamp2="7338957">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5731" _type="InsertStringCommand" date="Mon Feb 08 16:40:09 EST 2021" starttimestamp="1612813070441" timestamp="7338996" timestamp2="7338996">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5732" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:40:09 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7339035" />
  <Command __id="5737" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:40:10 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7340191" />
  <Command __id="5739" _type="InsertStringCommand" date="Mon Feb 08 16:40:10 EST 2021" starttimestamp="1612813070441" timestamp="7340207" timestamp2="7340207">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5630" _type="Insert" date="Mon Feb 08 16:39:49 EST 2021" docASTNodeCount="4990" docActiveCodeLength="28816" docExpressionCount="3419" docLength="30674" length="15" offset="22521" repeat="6" starttimestamp="1612813070441" timestamp="7319485" timestamp2="7320945">
    <text><![CDATA[
								searc]]></text>
  </DocumentChange>
  <DocumentChange __id="5640" _type="Replace" date="Mon Feb 08 16:39:51 EST 2021" docASTNodeCount="4990" docActiveCodeLength="28819" docExpressionCount="3419" docLength="30677" endLine="625" insertionLength="8" int_docASTNodeCount="4988" int_docActiveCodeLength="28811" int_docExpressionCount="3419" int_docLength="30669" length="5" offset="22531" startLine="625" starttimestamp="1612813070441" timestamp="7321187">
    <deletedText><![CDATA[searc]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5642" _type="Insert" date="Mon Feb 08 16:39:51 EST 2021" docASTNodeCount="4992" docActiveCodeLength="28823" docExpressionCount="3421" docLength="30681" length="4" offset="22539" repeat="4" starttimestamp="1612813070441" timestamp="7321401" timestamp2="7322379">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5649" _type="Replace" date="Mon Feb 08 16:39:53 EST 2021" docASTNodeCount="4894" docActiveCodeLength="28828" docExpressionCount="3354" docLength="30686" endLine="625" insertionLength="8" int_docASTNodeCount="4990" int_docActiveCodeLength="28820" int_docExpressionCount="3421" int_docLength="30678" length="3" offset="22540" startLine="625" starttimestamp="1612813070441" timestamp="7322994">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5651" _type="Delete" date="Mon Feb 08 16:39:54 EST 2021" docASTNodeCount="4893" docActiveCodeLength="28824" docExpressionCount="3352" docLength="30682" endLine="625" length="4" offset="22543" repeat="2" startLine="625" starttimestamp="1612813070441" timestamp="7324066" timestamp2="7324223">
    <text><![CDATA[(key]]></text>
  </DocumentChange>
  <DocumentChange __id="5655" _type="Insert" date="Mon Feb 08 16:39:55 EST 2021" docASTNodeCount="4893" docActiveCodeLength="28826" docExpressionCount="3353" docLength="30684" length="2" offset="22543" starttimestamp="1612813070441" timestamp="7325358">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="5658" _type="Delete" date="Mon Feb 08 16:39:56 EST 2021" docASTNodeCount="4893" docActiveCodeLength="28825" docExpressionCount="3353" docLength="30683" endLine="625" length="1" offset="22544" startLine="625" starttimestamp="1612813070441" timestamp="7326556">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="5661" _type="Insert" date="Mon Feb 08 16:39:58 EST 2021" docASTNodeCount="4894" docActiveCodeLength="28830" docExpressionCount="3354" docLength="30688" length="5" offset="22544" repeat="5" starttimestamp="1612813070441" timestamp="7327881" timestamp2="7328544">
    <text><![CDATA[lasse]]></text>
  </DocumentChange>
  <DocumentChange __id="5670" _type="Replace" date="Mon Feb 08 16:39:59 EST 2021" docASTNodeCount="4894" docActiveCodeLength="28835" docExpressionCount="3354" docLength="30693" endLine="625" insertionLength="10" int_docASTNodeCount="4893" int_docActiveCodeLength="28825" int_docExpressionCount="3353" int_docLength="30683" length="5" offset="22544" startLine="625" starttimestamp="1612813070441" timestamp="7328814">
    <deletedText><![CDATA[lasse]]></deletedText>
    <insertedText><![CDATA[lastSearch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5672" _type="Insert" date="Mon Feb 08 16:39:59 EST 2021" docASTNodeCount="4896" docActiveCodeLength="28841" docExpressionCount="3356" docLength="30699" length="6" offset="22554" repeat="6" starttimestamp="1612813070441" timestamp="7329023" timestamp2="7329688">
    <text><![CDATA[.getda]]></text>
  </DocumentChange>
  <DocumentChange __id="5681" _type="Replace" date="Mon Feb 08 16:40:00 EST 2021" docASTNodeCount="4896" docActiveCodeLength="28848" docExpressionCount="3356" docLength="30706" endLine="625" insertionLength="12" int_docASTNodeCount="4865" int_docActiveCodeLength="28836" int_docExpressionCount="3329" int_docLength="30694" length="5" offset="22555" startLine="625" starttimestamp="1612813070441" timestamp="7329934">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5683" _type="Insert" date="Mon Feb 08 16:40:00 EST 2021" docASTNodeCount="4898" docActiveCodeLength="28852" docExpressionCount="3358" docLength="30710" length="4" offset="22567" repeat="4" starttimestamp="1612813070441" timestamp="7330225" timestamp2="7330651">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5690" _type="Replace" date="Mon Feb 08 16:40:01 EST 2021" docASTNodeCount="4899" docActiveCodeLength="28857" docExpressionCount="3359" docLength="30715" endLine="625" insertionLength="8" int_docASTNodeCount="4865" int_docActiveCodeLength="28849" int_docExpressionCount="3329" int_docLength="30707" length="3" offset="22568" startLine="625" starttimestamp="1612813070441" timestamp="7330936">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5692" _type="Replace" date="Mon Feb 08 16:40:02 EST 2021" docASTNodeCount="4899" docActiveCodeLength="28855" docExpressionCount="3359" docLength="30713" endLine="625" insertionLength="1" int_docASTNodeCount="4898" int_docActiveCodeLength="28854" int_docExpressionCount="3358" int_docLength="30712" length="3" offset="22572" startLine="625" starttimestamp="1612813070441" timestamp="7331559">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[k]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5695" _type="Insert" date="Mon Feb 08 16:40:02 EST 2021" docASTNodeCount="4899" docActiveCodeLength="28857" docExpressionCount="3359" docLength="30715" length="2" offset="22573" repeat="2" starttimestamp="1612813070441" timestamp="7331797" timestamp2="7331846">
    <text><![CDATA[ey]]></text>
  </DocumentChange>
  <DocumentChange __id="5697" _type="Delete" date="Mon Feb 08 16:40:02 EST 2021" docASTNodeCount="4898" docActiveCodeLength="28854" docExpressionCount="3358" docLength="30712" endLine="625" length="3" offset="22572" repeat="3" startLine="625" starttimestamp="1612813070441" timestamp="7332119" timestamp2="7332372">
    <text><![CDATA[key]]></text>
  </DocumentChange>
  <DocumentChange __id="5700" _type="Insert" date="Mon Feb 08 16:40:03 EST 2021" docASTNodeCount="4899" docActiveCodeLength="28863" docExpressionCount="3359" docLength="30721" length="9" offset="22572" repeat="8" starttimestamp="1612813070441" timestamp="7332662" timestamp2="7333661">
    <text><![CDATA["keyword"]]></text>
  </DocumentChange>
  <DocumentChange __id="5717" _type="Insert" date="Mon Feb 08 16:40:05 EST 2021" docASTNodeCount="4903" docActiveCodeLength="28867" docExpressionCount="3363" docLength="30725" length="4" offset="22583" repeat="4" starttimestamp="1612813070441" timestamp="7335133" timestamp2="7336547">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <DocumentChange __id="5725" _type="Replace" date="Mon Feb 08 16:40:07 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28870" docExpressionCount="3362" docLength="30728" endLine="625" insertionLength="6" int_docASTNodeCount="4998" int_docActiveCodeLength="28864" int_docExpressionCount="3429" int_docLength="30722" length="3" offset="22584" startLine="625" starttimestamp="1612813070441" timestamp="7336677">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5727" _type="Replace" date="Mon Feb 08 16:40:09 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28870" docExpressionCount="3362" docLength="30728" endLine="625" insertionLength="1" int_docASTNodeCount="4901" int_docActiveCodeLength="28869" int_docExpressionCount="3361" int_docLength="30727" length="1" offset="22588" startLine="625" starttimestamp="1612813070441" timestamp="7338948">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5730" _type="Insert" date="Mon Feb 08 16:40:09 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28875" docExpressionCount="3362" docLength="30733" length="5" offset="22589" repeat="5" starttimestamp="1612813070441" timestamp="7338992" timestamp2="7340018">
    <text><![CDATA[astpa]]></text>
  </DocumentChange>
  <DocumentChange __id="5738" _type="Replace" date="Mon Feb 08 16:40:10 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28877" docExpressionCount="3362" docLength="30735" endLine="625" insertionLength="8" int_docASTNodeCount="4901" int_docActiveCodeLength="28869" int_docExpressionCount="3361" int_docLength="30727" length="6" offset="22588" startLine="625" starttimestamp="1612813070441" timestamp="7340198">
    <deletedText><![CDATA[lastpa]]></deletedText>
    <insertedText><![CDATA[lastPage]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5740" _type="Insert" date="Mon Feb 08 16:40:11 EST 2021" docASTNodeCount="4904" docActiveCodeLength="28883" docExpressionCount="3364" docLength="30741" length="6" offset="22596" repeat="6" starttimestamp="1612813070441" timestamp="7341460" timestamp2="7342940">
    <text><![CDATA[.getda]]></text>
  </DocumentChange>
  <DocumentChange __id="5750" _type="Replace" date="Mon Feb 08 16:40:13 EST 2021" docASTNodeCount="4904" docActiveCodeLength="28890" docExpressionCount="3364" docLength="30748" endLine="625" insertionLength="12" int_docASTNodeCount="4865" int_docActiveCodeLength="28878" int_docExpressionCount="3329" int_docLength="30736" length="5" offset="22597" startLine="625" starttimestamp="1612813070441" timestamp="7343524">
    <deletedText><![CDATA[getda]]></deletedText>
    <insertedText><![CDATA[getDataMap()]]></insertedText>
  </DocumentChange>
  <Command __id="5741" _type="PauseCommand" date="Mon Feb 08 16:40:11 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7341460">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1253]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5742" _type="InsertStringCommand" date="Mon Feb 08 16:40:11 EST 2021" starttimestamp="1612813070441" timestamp="7341462" timestamp2="7341462">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5743" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:40:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7341553" />
  <Command __id="5749" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:40:13 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7343516" />
  <Command __id="5751" _type="InsertStringCommand" date="Mon Feb 08 16:40:13 EST 2021" starttimestamp="1612813070441" timestamp="7343533" timestamp2="7343533">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5753" _type="InsertStringCommand" date="Mon Feb 08 16:40:14 EST 2021" starttimestamp="1612813070441" timestamp="7343794" timestamp2="7343794">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5754" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:40:14 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7343884" />
  <Command __id="5758" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:40:15 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7344832" />
  <Command __id="5760" _type="InsertStringCommand" date="Mon Feb 08 16:40:15 EST 2021" starttimestamp="1612813070441" timestamp="7344970" timestamp2="7344970">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5762" _type="InsertStringCommand" date="Mon Feb 08 16:40:15 EST 2021" starttimestamp="1612813070441" timestamp="7345388" timestamp2="7345388">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5764" _type="InsertStringCommand" date="Mon Feb 08 16:40:16 EST 2021" starttimestamp="1612813070441" timestamp="7345979" timestamp2="7345979">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="5766" _type="InsertStringCommand" date="Mon Feb 08 16:40:16 EST 2021" starttimestamp="1612813070441" timestamp="7346078" timestamp2="7346078">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="5768" _type="InsertStringCommand" date="Mon Feb 08 16:40:16 EST 2021" starttimestamp="1612813070441" timestamp="7346183" timestamp2="7346183">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5770" _type="InsertStringCommand" date="Mon Feb 08 16:40:17 EST 2021" starttimestamp="1612813070441" timestamp="7346596" timestamp2="7346596">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5771" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:40:17 EST 2021" starttimestamp="1612813070441" timestamp="7347339" />
  <Command __id="5773" _type="InsertStringCommand" date="Mon Feb 08 16:40:18 EST 2021" starttimestamp="1612813070441" timestamp="7347670" timestamp2="7347670">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5775" _type="PauseCommand" date="Mon Feb 08 16:40:29 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7359061">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[11391]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5774" _type="MoveCaretCommand" caretOffset="1423" date="Mon Feb 08 16:40:29 EST 2021" docOffset="21365" starttimestamp="1612813070441" timestamp="7359061" />
  <Command __id="5777" _type="PauseCommand" date="Mon Feb 08 16:40:35 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7365245">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6184]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5776" _type="MoveCaretCommand" caretOffset="2040" date="Mon Feb 08 16:40:35 EST 2021" docOffset="21982" starttimestamp="1612813070441" timestamp="7365245" />
  <Command __id="5779" _type="PauseCommand" date="Mon Feb 08 16:40:43 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7372775">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[7530]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5778" _type="MoveCaretCommand" caretOffset="2056" date="Mon Feb 08 16:40:43 EST 2021" docOffset="21998" starttimestamp="1612813070441" timestamp="7372775" />
  <Command __id="5781" _type="PauseCommand" date="Mon Feb 08 16:40:45 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7375072">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2297]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5780" _type="SelectTextCommand" caretOffset="2002" date="Mon Feb 08 16:40:45 EST 2021" end="2138" start="2002" starttimestamp="1612813070441" timestamp="7375072" />
  <Command __id="5782" _type="MoveCaretCommand" caretOffset="2138" date="Mon Feb 08 16:40:46 EST 2021" docOffset="22080" starttimestamp="1612813070441" timestamp="7375655" />
  <Command __id="5784" _type="PauseCommand" date="Mon Feb 08 16:40:51 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7381219">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5564]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5783" _type="SelectTextCommand" caretOffset="2002" date="Mon Feb 08 16:40:51 EST 2021" end="2138" start="2002" starttimestamp="1612813070441" timestamp="7381219" />
  <Command __id="5785" _type="MoveCaretCommand" caretOffset="2227" date="Mon Feb 08 16:40:52 EST 2021" docOffset="22169" starttimestamp="1612813070441" timestamp="7381781" />
  <Command __id="5787" _type="PauseCommand" date="Mon Feb 08 16:40:56 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7386420">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4639]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5786" _type="SelectTextCommand" caretOffset="2002" date="Mon Feb 08 16:40:56 EST 2021" end="2138" start="2002" starttimestamp="1612813070441" timestamp="7386420" />
  <Command __id="5789" _type="PauseCommand" date="Mon Feb 08 16:41:01 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7391410">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4990]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5788" _type="SelectTextCommand" caretOffset="2478" date="Mon Feb 08 16:41:01 EST 2021" end="2478" start="2316" starttimestamp="1612813070441" timestamp="7391410" />
  <Command __id="5790" _type="MoveCaretCommand" caretOffset="2398" date="Mon Feb 08 16:41:02 EST 2021" docOffset="22340" starttimestamp="1612813070441" timestamp="7391842" />
  <Command __id="5791" _type="SelectTextCommand" caretOffset="2403" date="Mon Feb 08 16:41:02 EST 2021" end="2403" start="2395" starttimestamp="1612813070441" timestamp="7391996" />
  <Command __id="5792" _type="SelectTextCommand" caretOffset="2469" date="Mon Feb 08 16:41:02 EST 2021" end="2469" start="2386" starttimestamp="1612813070441" timestamp="7392149" />
  <Command __id="5794" _type="PauseCommand" date="Mon Feb 08 16:41:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7393511">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1362]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="5793" _type="CopyCommand" date="Mon Feb 08 16:41:03 EST 2021" starttimestamp="1612813070441" timestamp="7393511" />
  <Command __id="5796" _type="PauseCommand" date="Mon Feb 08 16:41:18 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7407784">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[14273]]></rest>
    <prev><![CDATA[CopyCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5795" _type="MoveCaretCommand" caretOffset="2042" date="Mon Feb 08 16:41:18 EST 2021" docOffset="21984" starttimestamp="1612813070441" timestamp="7407784" />
  <Command __id="5797" _type="SelectTextCommand" caretOffset="2048" date="Mon Feb 08 16:41:18 EST 2021" end="2048" start="2036" starttimestamp="1612813070441" timestamp="7407948" />
  <Command __id="5799" _type="PauseCommand" date="Mon Feb 08 16:41:23 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7412765">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4817]]></rest>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5798" _type="SelectTextCommand" caretOffset="2002" date="Mon Feb 08 16:41:23 EST 2021" end="2138" start="2002" starttimestamp="1612813070441" timestamp="7412765" />
  <Command __id="5803" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:41:24 EST 2021" starttimestamp="1612813070441" timestamp="7413731" />
  <Command __id="5804" _type="MoveCaretCommand" caretOffset="2170" date="Mon Feb 08 16:41:24 EST 2021" docOffset="22112" starttimestamp="1612813070441" timestamp="7414235" />
  <Command __id="5806" _type="PauseCommand" date="Mon Feb 08 16:41:28 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7417634">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3399]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5805" _type="MoveCaretCommand" caretOffset="2158" date="Mon Feb 08 16:41:28 EST 2021" docOffset="22100" starttimestamp="1612813070441" timestamp="7417634" />
  <Command __id="5808" _type="PauseCommand" date="Mon Feb 08 16:41:30 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7419891">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2257]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5809" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:41:30 EST 2021" starttimestamp="1612813070441" timestamp="7419924" />
  <Command __id="5810" _type="MoveCaretCommand" caretOffset="2704" date="Mon Feb 08 16:41:30 EST 2021" docOffset="22646" starttimestamp="1612813070441" timestamp="7420182" />
  <Command __id="5812" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:41:30 EST 2021" starttimestamp="1612813070441" timestamp="7420311" />
  <Command __id="5813" _type="MoveCaretCommand" caretOffset="2729" date="Mon Feb 08 16:41:31 EST 2021" docOffset="22671" starttimestamp="1612813070441" timestamp="7420746" />
  <Command __id="5814" _type="MoveCaretCommand" caretOffset="2719" date="Mon Feb 08 16:41:31 EST 2021" docOffset="22661" starttimestamp="1612813070441" timestamp="7421191" />
  <Command __id="5816" _type="PauseCommand" date="Mon Feb 08 16:41:37 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7427159">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5968]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5815" _type="MoveCaretCommand" caretOffset="2659" date="Mon Feb 08 16:41:37 EST 2021" docOffset="22601" starttimestamp="1612813070441" timestamp="7427159" />
  <Command __id="5818" _type="PauseCommand" date="Mon Feb 08 16:41:41 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7431030">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3871]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5817" _type="MoveCaretCommand" caretOffset="2656" date="Mon Feb 08 16:41:41 EST 2021" docOffset="22598" starttimestamp="1612813070441" timestamp="7431030" />
  <Command __id="5819" _type="SelectTextCommand" caretOffset="2662" date="Mon Feb 08 16:41:41 EST 2021" end="2662" start="2654" starttimestamp="1612813070441" timestamp="7431183" />
  <Command __id="5821" _type="InsertStringCommand" date="Mon Feb 08 16:41:42 EST 2021" starttimestamp="1612813070441" timestamp="7431978" timestamp2="7431978">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="5822" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:41:42 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7432015" />
  <Command __id="5825" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:41:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7432592" />
  <Command __id="5827" _type="InsertStringCommand" date="Mon Feb 08 16:41:43 EST 2021" starttimestamp="1612813070441" timestamp="7432669" timestamp2="7432669">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5828" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:41:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7432707" />
  <Command __id="5831" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:41:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7433088" />
  <Command __id="5833" _type="InsertStringCommand" date="Mon Feb 08 16:41:43 EST 2021" starttimestamp="1612813070441" timestamp="7433105" timestamp2="7433105">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5835" _type="PauseCommand" date="Mon Feb 08 16:41:54 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7443856">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[10751]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5834" _type="MoveCaretCommand" caretOffset="1555" date="Mon Feb 08 16:41:54 EST 2021" docOffset="21497" starttimestamp="1612813070441" timestamp="7443856" />
  <Command __id="5837" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:41:55 EST 2021" starttimestamp="1612813070441" timestamp="7444638" />
  <Command __id="5839" _type="PauseCommand" date="Mon Feb 08 16:41:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7445805">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1167]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5838" _type="MoveCaretCommand" caretOffset="1426" date="Mon Feb 08 16:41:56 EST 2021" docOffset="21368" starttimestamp="1612813070441" timestamp="7445805" />
  <Command __id="5841" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:41:56 EST 2021" starttimestamp="1612813070441" timestamp="7445997" />
  <Command __id="5842" _type="MoveCaretCommand" caretOffset="1612" date="Mon Feb 08 16:41:56 EST 2021" docOffset="21554" starttimestamp="1612813070441" timestamp="7446246" />
  <Command __id="5844" _type="PauseCommand" date="Mon Feb 08 16:42:01 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7450746">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4500]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5843" _type="MoveCaretCommand" caretOffset="2722" date="Mon Feb 08 16:42:01 EST 2021" docOffset="22664" starttimestamp="1612813070441" timestamp="7450746" />
  <Command __id="5846" _type="PauseCommand" date="Mon Feb 08 16:42:06 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7456312">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5566]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5845" _type="MoveCaretCommand" caretOffset="2722" date="Mon Feb 08 16:42:06 EST 2021" docOffset="22664" starttimestamp="1612813070441" timestamp="7456312" />
  <Command __id="5848" _type="PauseCommand" date="Mon Feb 08 16:44:07 EST 2021" range="2m-5m" starttimestamp="1612813070441" timestamp="7576687">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[120375]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5847" _type="MoveCaretCommand" caretOffset="2732" date="Mon Feb 08 16:44:07 EST 2021" docOffset="22674" starttimestamp="1612813070441" timestamp="7576687" />
  <Command __id="5850" _type="PauseCommand" date="Mon Feb 08 16:44:25 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7595325">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[18638]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5849" _type="MoveCaretCommand" caretOffset="3452" date="Mon Feb 08 16:44:25 EST 2021" docOffset="23394" starttimestamp="1612813070441" timestamp="7595325" />
  <Command __id="5852" _type="PauseCommand" date="Mon Feb 08 16:44:26 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7596330">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1005]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5851" _type="MoveCaretCommand" caretOffset="3484" date="Mon Feb 08 16:44:26 EST 2021" docOffset="23426" starttimestamp="1612813070441" timestamp="7596330" />
  <Command __id="5854" _type="PauseCommand" date="Mon Feb 08 16:44:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7597484">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1154]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5855" _type="InsertStringCommand" date="Mon Feb 08 16:44:27 EST 2021" starttimestamp="1612813070441" timestamp="7597494" timestamp2="7597494">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5857" _type="InsertStringCommand" date="Mon Feb 08 16:44:28 EST 2021" starttimestamp="1612813070441" timestamp="7597611" timestamp2="7597611">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5859" _type="PauseCommand" date="Mon Feb 08 16:44:34 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7604062">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[6451]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5860" _type="InsertStringCommand" date="Mon Feb 08 16:44:34 EST 2021" starttimestamp="1612813070441" timestamp="7604067" timestamp2="7604067">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5861" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:44:34 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7604102" />
  <Command __id="5865" _type="PauseCommand" date="Mon Feb 08 16:44:36 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7605748">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1496]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5867" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:44:36 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7606065" />
  <Command __id="5869" _type="InsertStringCommand" date="Mon Feb 08 16:44:36 EST 2021" starttimestamp="1612813070441" timestamp="7606123" timestamp2="7606123">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5871" _type="PauseCommand" date="Mon Feb 08 16:44:39 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7608578">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2455]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="5870" _type="InsertStringCommand" date="Mon Feb 08 16:44:39 EST 2021" starttimestamp="1612813070441" timestamp="7608578" timestamp2="7608578">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5873" _type="InsertStringCommand" date="Mon Feb 08 16:44:39 EST 2021" starttimestamp="1612813070441" timestamp="7608892" timestamp2="7608892">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5874" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:44:39 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7608930" />
  <Command __id="5875" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:44:39 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7609277" />
  <Command __id="5876" _type="InsertStringCommand" date="Mon Feb 08 16:44:40 EST 2021" starttimestamp="1612813070441" timestamp="7609699" timestamp2="7609699">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="5878" _type="PauseCommand" date="Mon Feb 08 16:44:43 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7613392">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3693]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="5879" _type="InsertStringCommand" date="Mon Feb 08 16:44:43 EST 2021" starttimestamp="1612813070441" timestamp="7613402" timestamp2="7613402">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5880" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:44:43 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7613437" />
  <DocumentChange __id="5752" _type="Insert" date="Mon Feb 08 16:40:14 EST 2021" docASTNodeCount="4906" docActiveCodeLength="28894" docExpressionCount="3366" docLength="30752" length="4" offset="22609" repeat="4" starttimestamp="1612813070441" timestamp="7343791" timestamp2="7344212">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5759" _type="Replace" date="Mon Feb 08 16:40:15 EST 2021" docASTNodeCount="4907" docActiveCodeLength="28899" docExpressionCount="3367" docLength="30757" endLine="625" insertionLength="8" int_docASTNodeCount="4865" int_docActiveCodeLength="28891" int_docExpressionCount="3329" int_docLength="30749" length="3" offset="22610" startLine="625" starttimestamp="1612813070441" timestamp="7344847">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5761" _type="Replace" date="Mon Feb 08 16:40:15 EST 2021" docASTNodeCount="4510" docActiveCodeLength="28897" docExpressionCount="3104" docLength="30755" endLine="625" insertionLength="1" int_docASTNodeCount="4906" int_docActiveCodeLength="28896" int_docExpressionCount="3366" int_docLength="30754" length="3" offset="22614" startLine="625" starttimestamp="1612813070441" timestamp="7345378">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5763" _type="Insert" date="Mon Feb 08 16:40:16 EST 2021" docASTNodeCount="4907" docActiveCodeLength="28901" docExpressionCount="3367" docLength="30759" length="4" offset="22615" repeat="4" starttimestamp="1612813070441" timestamp="7345975" timestamp2="7346589">
    <text><![CDATA[URL"]]></text>
  </DocumentChange>
  <DocumentChange __id="5772" _type="Insert" date="Mon Feb 08 16:40:18 EST 2021" docASTNodeCount="5006" docActiveCodeLength="28902" docExpressionCount="3436" docLength="30760" length="1" offset="22621" starttimestamp="1612813070441" timestamp="7347651">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5800" _type="Insert" date="Mon Feb 08 16:41:24 EST 2021" docASTNodeCount="4918" docActiveCodeLength="28871" docExpressionCount="3369" docLength="30762" length="2" offset="21936" starttimestamp="1612813070441" timestamp="7413690">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5801" _type="Insert" date="Mon Feb 08 16:41:24 EST 2021" docASTNodeCount="4902" docActiveCodeLength="28771" docExpressionCount="3354" docLength="30764" length="2" offset="21971" starttimestamp="1612813070441" timestamp="7413696">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5802" _type="Insert" date="Mon Feb 08 16:41:24 EST 2021" docASTNodeCount="4985" docActiveCodeLength="28762" docExpressionCount="3418" docLength="30766" length="2" offset="22075" starttimestamp="1612813070441" timestamp="7413699">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5807" _type="Insert" date="Mon Feb 08 16:41:30 EST 2021" docASTNodeCount="4981" docActiveCodeLength="28738" docExpressionCount="3415" docLength="30768" length="2" offset="22088" starttimestamp="1612813070441" timestamp="7419891">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5811" _type="Insert" date="Mon Feb 08 16:41:30 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28711" docExpressionCount="3412" docLength="30770" length="2" offset="22632" starttimestamp="1612813070441" timestamp="7420282">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5820" _type="Replace" date="Mon Feb 08 16:41:42 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28704" docExpressionCount="3412" docLength="30763" endLine="625" insertionLength="1" int_docASTNodeCount="4877" int_docActiveCodeLength="28703" int_docExpressionCount="3342" int_docLength="30762" length="8" offset="22596" startLine="625" starttimestamp="1612813070441" timestamp="7431970">
    <deletedText><![CDATA[lastPage]]></deletedText>
    <insertedText><![CDATA[v]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5823" _type="Delete" date="Mon Feb 08 16:41:42 EST 2021" docASTNodeCount="4877" docActiveCodeLength="28703" docExpressionCount="3342" docLength="30762" endLine="625" length="1" offset="22596" startLine="625" starttimestamp="1612813070441" timestamp="7432423">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="5824" _type="Insert" date="Mon Feb 08 16:41:43 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28707" docExpressionCount="3412" docLength="30766" length="4" offset="22596" repeat="4" starttimestamp="1612813070441" timestamp="7432577" timestamp2="7432936">
    <text><![CDATA[comm]]></text>
  </DocumentChange>
  <DocumentChange __id="5832" _type="Replace" date="Mon Feb 08 16:41:43 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28710" docExpressionCount="3412" docLength="30769" endLine="625" insertionLength="7" int_docASTNodeCount="4877" int_docActiveCodeLength="28703" int_docExpressionCount="3342" int_docLength="30762" length="4" offset="22596" startLine="625" starttimestamp="1612813070441" timestamp="7433094">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5836" _type="Insert" date="Mon Feb 08 16:41:55 EST 2021" docASTNodeCount="4971" docActiveCodeLength="28680" docExpressionCount="3409" docLength="30771" length="2" offset="21480" starttimestamp="1612813070441" timestamp="7444607">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5840" _type="Insert" date="Mon Feb 08 16:41:56 EST 2021" docASTNodeCount="4957" docActiveCodeLength="28627" docExpressionCount="3403" docLength="30773" length="2" offset="21333" starttimestamp="1612813070441" timestamp="7445966">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5853" _type="Insert" date="Mon Feb 08 16:44:27 EST 2021" docASTNodeCount="4957" docActiveCodeLength="28637" docExpressionCount="3403" docLength="30783" length="10" offset="23426" repeat="2" starttimestamp="1612813070441" timestamp="7597484" timestamp2="7597603">
    <text><![CDATA[
			
			]]></text>
  </DocumentChange>
  <DocumentChange __id="5858" _type="Insert" date="Mon Feb 08 16:44:34 EST 2021" docASTNodeCount="4858" docActiveCodeLength="28642" docExpressionCount="3334" docLength="30788" length="5" offset="23436" repeat="5" starttimestamp="1612813070441" timestamp="7604062" timestamp2="7605818">
    <text><![CDATA[forea]]></text>
  </DocumentChange>
  <DocumentChange __id="5868" _type="Replace" date="Mon Feb 08 16:44:36 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28680" docExpressionCount="3406" docLength="30826" endLine="650" insertionLength="43" int_docASTNodeCount="4957" int_docActiveCodeLength="28637" int_docExpressionCount="3403" int_docLength="30783" length="5" offset="23436" startLine="650" starttimestamp="1612813070441" timestamp="7606112">
    <deletedText><![CDATA[forea]]></deletedText>
    <insertedText><![CDATA[for (String string : header2) {
				
			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5872" _type="Replace" date="Mon Feb 08 16:44:39 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28675" docExpressionCount="3406" docLength="30821" endLine="650" insertionLength="1" int_docASTNodeCount="4858" int_docActiveCodeLength="28674" int_docExpressionCount="3334" int_docLength="30820" length="6" offset="23448" startLine="650" starttimestamp="1612813070441" timestamp="7608885">
    <deletedText><![CDATA[string]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5877" _type="Replace" date="Mon Feb 08 16:44:43 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28669" docExpressionCount="3406" docLength="30815" endLine="650" insertionLength="1" int_docASTNodeCount="4858" int_docActiveCodeLength="28668" int_docExpressionCount="3334" int_docLength="30814" length="7" offset="23452" startLine="650" starttimestamp="1612813070441" timestamp="7613392">
    <deletedText><![CDATA[header2]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5881" _type="Insert" date="Mon Feb 08 16:44:44 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28672" docExpressionCount="3406" docLength="30818" length="3" offset="23453" repeat="3" starttimestamp="1612813070441" timestamp="7613659" timestamp2="7613689">
    <text><![CDATA[era]]></text>
  </DocumentChange>
  <DocumentChange __id="5884" _type="Delete" date="Mon Feb 08 16:44:45 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28670" docExpressionCount="3406" docLength="30816" endLine="650" length="2" offset="23454" repeat="2" startLine="650" starttimestamp="1612813070441" timestamp="7614903" timestamp2="7615038">
    <text><![CDATA[ra]]></text>
  </DocumentChange>
  <DocumentChange __id="5887" _type="Insert" date="Mon Feb 08 16:44:45 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28673" docExpressionCount="3406" docLength="30819" length="3" offset="23454" repeat="3" starttimestamp="1612813070441" timestamp="7615422" timestamp2="7615839">
    <text><![CDATA[arc]]></text>
  </DocumentChange>
  <Command __id="5885" _type="PauseCommand" date="Mon Feb 08 16:44:45 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7614903">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1214]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="5890" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:44:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7616250" />
  <Command __id="5892" _type="InsertStringCommand" date="Mon Feb 08 16:44:46 EST 2021" starttimestamp="1612813070441" timestamp="7616265" timestamp2="7616265">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5894" _type="InsertStringCommand" date="Mon Feb 08 16:44:47 EST 2021" starttimestamp="1612813070441" timestamp="7616580" timestamp2="7616580">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5895" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:44:47 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7616620" />
  <Command __id="5898" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:44:47 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7617280" />
  <Command __id="5900" _type="InsertStringCommand" date="Mon Feb 08 16:44:47 EST 2021" starttimestamp="1612813070441" timestamp="7617294" timestamp2="7617294">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5902" _type="PauseCommand" date="Mon Feb 08 16:44:53 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7623310">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[6016]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5901" _type="MoveCaretCommand" caretOffset="1216" date="Mon Feb 08 16:44:53 EST 2021" docOffset="21158" starttimestamp="1612813070441" timestamp="7623310" />
  <Command __id="5904" _type="PauseCommand" date="Mon Feb 08 16:44:55 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7625282">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1972]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5903" _type="SelectTextCommand" caretOffset="1221" date="Mon Feb 08 16:44:55 EST 2021" end="1221" start="1215" starttimestamp="1612813070441" timestamp="7625282" />
  <Command __id="5905" _type="MoveCaretCommand" caretOffset="1285" date="Mon Feb 08 16:44:56 EST 2021" docOffset="21227" starttimestamp="1612813070441" timestamp="7625641" />
  <Command __id="5907" _type="PauseCommand" date="Mon Feb 08 16:45:02 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7632358">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[6717]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5906" _type="MoveCaretCommand" caretOffset="3542" date="Mon Feb 08 16:45:02 EST 2021" docOffset="23484" starttimestamp="1612813070441" timestamp="7632358" />
  <Command __id="5908" _type="MoveCaretCommand" caretOffset="3536" date="Mon Feb 08 16:45:03 EST 2021" docOffset="23478" starttimestamp="1612813070441" timestamp="7632763" />
  <Command __id="5910" _type="PauseCommand" date="Mon Feb 08 16:45:11 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7640764">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8001]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5909" _type="MoveCaretCommand" caretOffset="1231" date="Mon Feb 08 16:45:11 EST 2021" docOffset="21173" starttimestamp="1612813070441" timestamp="7640764" />
  <Command __id="5912" _type="PauseCommand" date="Mon Feb 08 16:45:12 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7641783">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1019]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5913" _type="InsertStringCommand" date="Mon Feb 08 16:45:12 EST 2021" starttimestamp="1612813070441" timestamp="7641793" timestamp2="7641793">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5915" _type="InsertStringCommand" date="Mon Feb 08 16:45:12 EST 2021" starttimestamp="1612813070441" timestamp="7642055" timestamp2="7642055">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5917" _type="InsertStringCommand" date="Mon Feb 08 16:45:13 EST 2021" starttimestamp="1612813070441" timestamp="7642899" timestamp2="7642899">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="5919" _type="InsertStringCommand" date="Mon Feb 08 16:45:13 EST 2021" starttimestamp="1612813070441" timestamp="7643493" timestamp2="7643493">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5920" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:45:14 EST 2021" starttimestamp="1612813070441" timestamp="7643645" />
  <Command __id="5921" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:45:14 EST 2021" starttimestamp="1612813070441" timestamp="7643786" />
  <Command __id="5922" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:45:14 EST 2021" starttimestamp="1612813070441" timestamp="7643934" />
  <Command __id="5924" _type="InsertStringCommand" date="Mon Feb 08 16:45:14 EST 2021" starttimestamp="1612813070441" timestamp="7644388" timestamp2="7644388">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5926" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:45:15 EST 2021" starttimestamp="1612813070441" timestamp="7644834" />
  <Command __id="5928" _type="InsertStringCommand" date="Mon Feb 08 16:45:15 EST 2021" starttimestamp="1612813070441" timestamp="7644937" timestamp2="7644937">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="5930" _type="InsertStringCommand" date="Mon Feb 08 16:45:15 EST 2021" starttimestamp="1612813070441" timestamp="7645125" timestamp2="7645125">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5932" _type="InsertStringCommand" date="Mon Feb 08 16:45:15 EST 2021" starttimestamp="1612813070441" timestamp="7645255" timestamp2="7645255">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="5934" _type="InsertStringCommand" date="Mon Feb 08 16:45:15 EST 2021" starttimestamp="1612813070441" timestamp="7645464" timestamp2="7645464">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5936" _type="InsertStringCommand" date="Mon Feb 08 16:45:16 EST 2021" starttimestamp="1612813070441" timestamp="7645655" timestamp2="7645655">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5938" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:45:16 EST 2021" starttimestamp="1612813070441" timestamp="7645886" />
  <Command __id="5940" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:45:16 EST 2021" starttimestamp="1612813070441" timestamp="7645991" />
  <Command __id="5942" _type="InsertStringCommand" date="Mon Feb 08 16:45:16 EST 2021" starttimestamp="1612813070441" timestamp="7646285" timestamp2="7646285">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5944" _type="InsertStringCommand" date="Mon Feb 08 16:45:16 EST 2021" starttimestamp="1612813070441" timestamp="7646422" timestamp2="7646422">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5946" _type="InsertStringCommand" date="Mon Feb 08 16:45:16 EST 2021" starttimestamp="1612813070441" timestamp="7646537" timestamp2="7646537">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5948" _type="InsertStringCommand" date="Mon Feb 08 16:45:17 EST 2021" starttimestamp="1612813070441" timestamp="7646723" timestamp2="7646723">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5950" _type="InsertStringCommand" date="Mon Feb 08 16:45:17 EST 2021" starttimestamp="1612813070441" timestamp="7646786" timestamp2="7646786">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5952" _type="PauseCommand" date="Mon Feb 08 16:45:21 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7651255">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4469]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5951" _type="MoveCaretCommand" caretOffset="3548" date="Mon Feb 08 16:45:21 EST 2021" docOffset="23490" starttimestamp="1612813070441" timestamp="7651255" />
  <Command __id="5954" _type="PauseCommand" date="Mon Feb 08 16:45:25 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7654681">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3426]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5955" _type="InsertStringCommand" date="Mon Feb 08 16:45:25 EST 2021" starttimestamp="1612813070441" timestamp="7654687" timestamp2="7654687">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5956" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:25 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7654728" />
  <Command __id="5959" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:25 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7655286" />
  <Command __id="5961" _type="InsertStringCommand" date="Mon Feb 08 16:45:25 EST 2021" starttimestamp="1612813070441" timestamp="7655300" timestamp2="7655300">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5963" _type="InsertStringCommand" date="Mon Feb 08 16:45:25 EST 2021" starttimestamp="1612813070441" timestamp="7655388" timestamp2="7655388">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5965" _type="InsertStringCommand" date="Mon Feb 08 16:45:25 EST 2021" starttimestamp="1612813070441" timestamp="7655542" timestamp2="7655542">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5966" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:26 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7655584" />
  <Command __id="5968" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:26 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7655684" />
  <Command __id="5970" _type="InsertStringCommand" date="Mon Feb 08 16:45:26 EST 2021" starttimestamp="1612813070441" timestamp="7655724" timestamp2="7655724">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5971" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:26 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7655767" />
  <Command __id="5972" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:26 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7655795" />
  <Command __id="5974" _type="InsertStringCommand" date="Mon Feb 08 16:45:26 EST 2021" starttimestamp="1612813070441" timestamp="7655850" timestamp2="7655850">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5975" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:26 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7655944" />
  <Command __id="5976" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:26 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7655968" />
  <Command __id="5978" _type="PauseCommand" date="Mon Feb 08 16:45:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7657141">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1173]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5979" _type="InsertStringCommand" date="Mon Feb 08 16:45:27 EST 2021" starttimestamp="1612813070441" timestamp="7657146" timestamp2="7657146">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5981" _type="InsertStringCommand" date="Mon Feb 08 16:45:27 EST 2021" starttimestamp="1612813070441" timestamp="7657370" timestamp2="7657370">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5982" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:27 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7657461" />
  <Command __id="5983" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:27 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7657487" />
  <Command __id="5985" _type="InsertStringCommand" date="Mon Feb 08 16:45:27 EST 2021" starttimestamp="1612813070441" timestamp="7657498" timestamp2="7657498">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5987" _type="InsertStringCommand" date="Mon Feb 08 16:45:28 EST 2021" starttimestamp="1612813070441" timestamp="7657591" timestamp2="7657591">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5988" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:28 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7657633" />
  <Command __id="5989" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:28 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7657658" />
  <Command __id="5991" _type="InsertStringCommand" date="Mon Feb 08 16:45:28 EST 2021" starttimestamp="1612813070441" timestamp="7657684" timestamp2="7657684">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5993" _type="InsertStringCommand" date="Mon Feb 08 16:45:28 EST 2021" starttimestamp="1612813070441" timestamp="7657769" timestamp2="7657769">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5995" _type="InsertStringCommand" date="Mon Feb 08 16:45:28 EST 2021" starttimestamp="1612813070441" timestamp="7657866" timestamp2="7657866">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5997" _type="PauseCommand" date="Mon Feb 08 16:45:30 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7659568">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1702]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5998" _type="InsertStringCommand" date="Mon Feb 08 16:45:30 EST 2021" starttimestamp="1612813070441" timestamp="7659575" timestamp2="7659575">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="6000" _type="InsertStringCommand" date="Mon Feb 08 16:45:30 EST 2021" starttimestamp="1612813070441" timestamp="7659639" timestamp2="7659639">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6001" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:30 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7659680" />
  <Command __id="6002" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7659817" />
  <Command __id="6004" _type="InsertStringCommand" date="Mon Feb 08 16:45:30 EST 2021" starttimestamp="1612813070441" timestamp="7659837" timestamp2="7659837">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6006" _type="InsertStringCommand" date="Mon Feb 08 16:45:30 EST 2021" starttimestamp="1612813070441" timestamp="7659845" timestamp2="7659845">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6008" _type="InsertStringCommand" date="Mon Feb 08 16:45:30 EST 2021" starttimestamp="1612813070441" timestamp="7660034" timestamp2="7660034">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6010" _type="PauseCommand" date="Mon Feb 08 16:45:31 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7661363">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1329]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6011" _type="InsertStringCommand" date="Mon Feb 08 16:45:31 EST 2021" starttimestamp="1612813070441" timestamp="7661369" timestamp2="7661369">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6012" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7661411" />
  <Command __id="6014" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:32 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7661585" />
  <Command __id="6016" _type="InsertStringCommand" date="Mon Feb 08 16:45:32 EST 2021" starttimestamp="1612813070441" timestamp="7661678" timestamp2="7661678">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6018" _type="InsertStringCommand" date="Mon Feb 08 16:45:32 EST 2021" starttimestamp="1612813070441" timestamp="7662514" timestamp2="7662514">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6019" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:32 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7662550" />
  <Command __id="6020" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:33 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7662753" />
  <Command __id="6022" _type="InsertStringCommand" date="Mon Feb 08 16:45:33 EST 2021" starttimestamp="1612813070441" timestamp="7662768" timestamp2="7662768">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6023" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:33 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7662819" />
  <Command __id="6025" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:45:34 EST 2021" starttimestamp="1612813070441" timestamp="7663619" />
  <DocumentChange __id="5891" _type="Replace" date="Mon Feb 08 16:44:46 EST 2021" docASTNodeCount="4964" docActiveCodeLength="28676" docExpressionCount="3406" docLength="30822" endLine="650" insertionLength="8" int_docASTNodeCount="4858" int_docActiveCodeLength="28668" int_docExpressionCount="3334" int_docLength="30814" length="5" offset="23452" startLine="650" starttimestamp="1612813070441" timestamp="7616257">
    <deletedText><![CDATA[searc]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5893" _type="Insert" date="Mon Feb 08 16:44:47 EST 2021" docASTNodeCount="4966" docActiveCodeLength="28679" docExpressionCount="3408" docLength="30825" length="3" offset="23460" repeat="3" starttimestamp="1612813070441" timestamp="7616578" timestamp2="7616940">
    <text><![CDATA[.ke]]></text>
  </DocumentChange>
  <DocumentChange __id="5899" _type="Replace" date="Mon Feb 08 16:44:47 EST 2021" docASTNodeCount="4966" docActiveCodeLength="28685" docExpressionCount="3408" docLength="30831" endLine="650" insertionLength="8" int_docASTNodeCount="4858" int_docActiveCodeLength="28677" int_docExpressionCount="3334" int_docLength="30823" length="2" offset="23461" startLine="650" starttimestamp="1612813070441" timestamp="7617286">
    <deletedText><![CDATA[ke]]></deletedText>
    <insertedText><![CDATA[keySet()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5911" _type="Insert" date="Mon Feb 08 16:45:12 EST 2021" docASTNodeCount="4967" docActiveCodeLength="28690" docExpressionCount="3409" docLength="30836" length="5" offset="21173" repeat="5" starttimestamp="1612813070441" timestamp="7641783" timestamp2="7644381">
    <text><![CDATA["s", ]]></text>
  </DocumentChange>
  <DocumentChange __id="5925" _type="Delete" date="Mon Feb 08 16:45:15 EST 2021" docASTNodeCount="4967" docActiveCodeLength="28689" docExpressionCount="3409" docLength="30835" endLine="598" length="1" offset="21174" startLine="598" starttimestamp="1612813070441" timestamp="7644831">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5927" _type="Insert" date="Mon Feb 08 16:45:15 EST 2021" docASTNodeCount="4967" docActiveCodeLength="28694" docExpressionCount="3409" docLength="30840" length="5" offset="21174" repeat="5" starttimestamp="1612813070441" timestamp="7644930" timestamp2="7645647">
    <text><![CDATA[Seqye]]></text>
  </DocumentChange>
  <DocumentChange __id="5937" _type="Delete" date="Mon Feb 08 16:45:16 EST 2021" docASTNodeCount="4967" docActiveCodeLength="28692" docExpressionCount="3409" docLength="30838" endLine="598" length="2" offset="21177" repeat="2" startLine="598" starttimestamp="1612813070441" timestamp="7645883" timestamp2="7645989">
    <text><![CDATA[ye]]></text>
  </DocumentChange>
  <DocumentChange __id="5941" _type="Insert" date="Mon Feb 08 16:45:16 EST 2021" docASTNodeCount="4967" docActiveCodeLength="28697" docExpressionCount="3409" docLength="30843" length="5" offset="21177" repeat="5" starttimestamp="1612813070441" timestamp="7646279" timestamp2="7646779">
    <text><![CDATA[uence]]></text>
  </DocumentChange>
  <DocumentChange __id="5953" _type="Insert" date="Mon Feb 08 16:45:25 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28700" docExpressionCount="3335" docLength="30846" length="3" offset="23490" repeat="3" starttimestamp="1612813070441" timestamp="7654681" timestamp2="7654902">
    <text><![CDATA[boo]]></text>
  </DocumentChange>
  <DocumentChange __id="5960" _type="Replace" date="Mon Feb 08 16:45:25 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28704" docExpressionCount="3335" docLength="30850" endLine="651" insertionLength="7" int_docASTNodeCount="4967" int_docActiveCodeLength="28697" int_docExpressionCount="3409" int_docLength="30843" length="3" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7655293">
    <deletedText><![CDATA[boo]]></deletedText>
    <insertedText><![CDATA[boolean]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5962" _type="Insert" date="Mon Feb 08 16:45:25 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28718" docExpressionCount="3335" docLength="30864" length="14" offset="23497" repeat="14" starttimestamp="1612813070441" timestamp="7655380" timestamp2="7659633">
    <text><![CDATA[ lastPage = fa]]></text>
  </DocumentChange>
  <DocumentChange __id="6003" _type="Replace" date="Mon Feb 08 16:45:30 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28721" docExpressionCount="3335" docLength="30867" endLine="651" insertionLength="5" int_docASTNodeCount="4859" int_docActiveCodeLength="28716" int_docExpressionCount="3335" int_docLength="30862" length="2" offset="23509" startLine="651" starttimestamp="1612813070441" timestamp="7659823">
    <deletedText><![CDATA[fa]]></deletedText>
    <insertedText><![CDATA[false]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6005" _type="Insert" date="Mon Feb 08 16:45:30 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28730" docExpressionCount="3335" docLength="30876" length="9" offset="23514" repeat="4" starttimestamp="1612813070441" timestamp="7659840" timestamp2="7661571">
    <text><![CDATA[;
				if]]></text>
  </DocumentChange>
  <DocumentChange __id="6015" _type="Replace" date="Mon Feb 08 16:45:32 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28757" docExpressionCount="3412" docLength="30903" endLine="652" insertionLength="29" int_docASTNodeCount="4972" int_docActiveCodeLength="28728" int_docExpressionCount="3411" int_docLength="30874" length="2" offset="23521" startLine="652" starttimestamp="1612813070441" timestamp="7661607">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (lastPage) {
					
				}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6017" _type="Replace" date="Mon Feb 08 16:45:32 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28750" docExpressionCount="3412" docLength="30896" endLine="652" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28749" int_docExpressionCount="3335" int_docLength="30895" length="8" offset="23525" startLine="652" starttimestamp="1612813070441" timestamp="7662505">
    <deletedText><![CDATA[lastPage]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6021" _type="Replace" date="Mon Feb 08 16:45:33 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28751" docExpressionCount="3335" docLength="30897" endLine="652" insertionLength="2" int_docASTNodeCount="4859" int_docActiveCodeLength="28749" int_docExpressionCount="3335" int_docLength="30895" length="1" offset="23525" startLine="652" starttimestamp="1612813070441" timestamp="7662761">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[s.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6024" _type="Delete" date="Mon Feb 08 16:45:34 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28749" docExpressionCount="3335" docLength="30895" endLine="652" length="2" offset="23525" repeat="2" startLine="652" starttimestamp="1612813070441" timestamp="7663615" timestamp2="7663953">
    <text><![CDATA[s.]]></text>
  </DocumentChange>
  <DocumentChange __id="6027" _type="Insert" date="Mon Feb 08 16:45:36 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28753" docExpressionCount="3412" docLength="30899" length="4" offset="23525" repeat="4" starttimestamp="1612813070441" timestamp="7665853" timestamp2="7666158">
    <text><![CDATA[sear]]></text>
  </DocumentChange>
  <DocumentChange __id="6033" _type="Replace" date="Mon Feb 08 16:45:37 EST 2021" docASTNodeCount="4975" docActiveCodeLength="28757" docExpressionCount="3412" docLength="30903" endLine="652" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28749" int_docExpressionCount="3335" int_docLength="30895" length="4" offset="23525" startLine="652" starttimestamp="1612813070441" timestamp="7666721">
    <deletedText><![CDATA[sear]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6035" _type="Insert" date="Mon Feb 08 16:45:37 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28761" docExpressionCount="3414" docLength="30907" length="4" offset="23533" repeat="4" starttimestamp="1612813070441" timestamp="7666897" timestamp2="7667265">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6042" _type="Replace" date="Mon Feb 08 16:45:37 EST 2021" docASTNodeCount="4978" docActiveCodeLength="28766" docExpressionCount="3415" docLength="30912" endLine="652" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28758" int_docExpressionCount="3335" int_docLength="30904" length="3" offset="23534" startLine="652" starttimestamp="1612813070441" timestamp="7667352">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6044" _type="Replace" date="Mon Feb 08 16:45:38 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28764" docExpressionCount="3109" docLength="30910" endLine="652" insertionLength="1" int_docASTNodeCount="4977" int_docActiveCodeLength="28763" int_docExpressionCount="3414" int_docLength="30909" length="3" offset="23538" startLine="652" starttimestamp="1612813070441" timestamp="7668060">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6046" _type="Insert" date="Mon Feb 08 16:45:38 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28766" docExpressionCount="3109" docLength="30912" length="2" offset="23539" repeat="2" starttimestamp="1612813070441" timestamp="7668211" timestamp2="7668441">
    <text><![CDATA[s']]></text>
  </DocumentChange>
  <DocumentChange __id="6050" _type="Delete" date="Mon Feb 08 16:45:39 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28765" docExpressionCount="3109" docLength="30911" endLine="652" length="1" offset="23540" startLine="652" starttimestamp="1612813070441" timestamp="7668977">
    <text><![CDATA[']]></text>
  </DocumentChange>
  <Command __id="6028" _type="PauseCommand" date="Mon Feb 08 16:45:36 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7665853">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1900]]></rest>
    <prev><![CDATA[Delete]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6032" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:37 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7666714" />
  <Command __id="6034" _type="InsertStringCommand" date="Mon Feb 08 16:45:37 EST 2021" starttimestamp="1612813070441" timestamp="7666728" timestamp2="7666728">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6036" _type="InsertStringCommand" date="Mon Feb 08 16:45:37 EST 2021" starttimestamp="1612813070441" timestamp="7666900" timestamp2="7666900">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6037" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7666940" />
  <Command __id="6041" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:37 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7667345" />
  <Command __id="6043" _type="InsertStringCommand" date="Mon Feb 08 16:45:37 EST 2021" starttimestamp="1612813070441" timestamp="7667479" timestamp2="7667479">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6045" _type="InsertStringCommand" date="Mon Feb 08 16:45:38 EST 2021" starttimestamp="1612813070441" timestamp="7668068" timestamp2="7668068">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6047" _type="InsertStringCommand" date="Mon Feb 08 16:45:38 EST 2021" starttimestamp="1612813070441" timestamp="7668213" timestamp2="7668213">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6049" _type="InsertStringCommand" date="Mon Feb 08 16:45:38 EST 2021" starttimestamp="1612813070441" timestamp="7668443" timestamp2="7668443">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="6051" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:45:39 EST 2021" starttimestamp="1612813070441" timestamp="7668980" />
  <Command __id="6053" _type="InsertStringCommand" date="Mon Feb 08 16:45:39 EST 2021" starttimestamp="1612813070441" timestamp="7669215" timestamp2="7669215">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6055" _type="PauseCommand" date="Mon Feb 08 16:45:41 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7671142">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1927]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6054" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:45:41 EST 2021" starttimestamp="1612813070441" timestamp="7671142" />
  <Command __id="6057" _type="PauseCommand" date="Mon Feb 08 16:45:44 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7673881">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2739]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6056" _type="SelectTextCommand" caretOffset="3617" date="Mon Feb 08 16:45:44 EST 2021" end="3617" start="3548" starttimestamp="1612813070441" timestamp="7673881" />
  <Command __id="6059" _type="InsertStringCommand" date="Mon Feb 08 16:45:44 EST 2021" starttimestamp="1612813070441" timestamp="7674527" timestamp2="7674527">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="6060" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7674556" />
  <Command __id="6065" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:46 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7675616" />
  <Command __id="6067" _type="InsertStringCommand" date="Mon Feb 08 16:45:46 EST 2021" starttimestamp="1612813070441" timestamp="7675655" timestamp2="7675655">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6069" _type="PauseCommand" date="Mon Feb 08 16:45:48 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7678347">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2692]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="6068" _type="InsertStringCommand" date="Mon Feb 08 16:45:48 EST 2021" starttimestamp="1612813070441" timestamp="7678347" timestamp2="7678347">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6071" _type="InsertStringCommand" date="Mon Feb 08 16:45:49 EST 2021" starttimestamp="1612813070441" timestamp="7678854" timestamp2="7678854">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6072" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7678892" />
  <Command __id="6076" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:50 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7680257" />
  <Command __id="6078" _type="InsertStringCommand" date="Mon Feb 08 16:45:50 EST 2021" starttimestamp="1612813070441" timestamp="7680265" timestamp2="7680265">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6079" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:50 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7680358" />
  <Command __id="6080" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:50 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7680397" />
  <Command __id="6082" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:45:51 EST 2021" starttimestamp="1612813070441" timestamp="7680682" />
  <Command __id="6084" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:45:51 EST 2021" starttimestamp="1612813070441" timestamp="7680809" />
  <Command __id="6086" _type="InsertStringCommand" date="Mon Feb 08 16:45:51 EST 2021" starttimestamp="1612813070441" timestamp="7681277" timestamp2="7681277">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6088" _type="InsertStringCommand" date="Mon Feb 08 16:45:51 EST 2021" starttimestamp="1612813070441" timestamp="7681361" timestamp2="7681361">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6089" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7681404" />
  <Command __id="6090" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7681430" />
  <Command __id="6091" _type="InsertStringCommand" date="Mon Feb 08 16:45:52 EST 2021" starttimestamp="1612813070441" timestamp="7682257" timestamp2="7682257">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="6093" _type="PauseCommand" date="Mon Feb 08 16:45:54 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7683656">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1399]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="6094" _type="InsertStringCommand" date="Mon Feb 08 16:45:54 EST 2021" starttimestamp="1612813070441" timestamp="7683667" timestamp2="7683667">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6095" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:54 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7683752" />
  <Command __id="6101" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:55 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7685387" />
  <Command __id="6103" _type="InsertStringCommand" date="Mon Feb 08 16:45:55 EST 2021" starttimestamp="1612813070441" timestamp="7685401" timestamp2="7685401">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6105" _type="InsertStringCommand" date="Mon Feb 08 16:45:56 EST 2021" starttimestamp="1612813070441" timestamp="7685615" timestamp2="7685615">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6106" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7685658" />
  <Command __id="6110" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7686148" />
  <Command __id="6112" _type="InsertStringCommand" date="Mon Feb 08 16:45:56 EST 2021" starttimestamp="1612813070441" timestamp="7686268" timestamp2="7686268">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6114" _type="InsertStringCommand" date="Mon Feb 08 16:45:57 EST 2021" starttimestamp="1612813070441" timestamp="7686621" timestamp2="7686621">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6115" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:45:57 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7686708" />
  <Command __id="6118" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:45:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7687152" />
  <Command __id="6120" _type="InsertStringCommand" date="Mon Feb 08 16:45:57 EST 2021" starttimestamp="1612813070441" timestamp="7687454" timestamp2="7687454">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6121" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:45:58 EST 2021" starttimestamp="1612813070441" timestamp="7688157" />
  <Command __id="6122" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:45:58 EST 2021" starttimestamp="1612813070441" timestamp="7688357" />
  <Command __id="6124" _type="PauseCommand" date="Mon Feb 08 16:45:59 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7689452">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1095]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6123" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:45:59 EST 2021" starttimestamp="1612813070441" timestamp="7689452" />
  <Command __id="6126" _type="PauseCommand" date="Mon Feb 08 16:46:05 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7695376">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5924]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6125" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:46:05 EST 2021" starttimestamp="1612813070441" timestamp="7695376" />
  <Command __id="6127" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:46:06 EST 2021" starttimestamp="1612813070441" timestamp="7695966" />
  <Command __id="6129" _type="PauseCommand" date="Mon Feb 08 16:46:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7696969">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1003]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6128" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:07 EST 2021" starttimestamp="1612813070441" timestamp="7696969" />
  <Command __id="6130" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:07 EST 2021" starttimestamp="1612813070441" timestamp="7697116" />
  <Command __id="6131" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:46:07 EST 2021" starttimestamp="1612813070441" timestamp="7697395" />
  <Command __id="6132" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:46:07 EST 2021" starttimestamp="1612813070441" timestamp="7697524" />
  <Command __id="6133" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:46:08 EST 2021" starttimestamp="1612813070441" timestamp="7698169" />
  <Command __id="6134" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:46:08 EST 2021" starttimestamp="1612813070441" timestamp="7698294" />
  <Command __id="6136" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:09 EST 2021" starttimestamp="1612813070441" timestamp="7698763" />
  <Command __id="6138" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:09 EST 2021" starttimestamp="1612813070441" timestamp="7698886" />
  <Command __id="6140" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:09 EST 2021" starttimestamp="1612813070441" timestamp="7699019" />
  <Command __id="6142" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:09 EST 2021" starttimestamp="1612813070441" timestamp="7699128" />
  <Command __id="6144" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:09 EST 2021" starttimestamp="1612813070441" timestamp="7699248" />
  <Command __id="6146" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:09 EST 2021" starttimestamp="1612813070441" timestamp="7699380" />
  <Command __id="6148" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:09 EST 2021" starttimestamp="1612813070441" timestamp="7699507" />
  <Command __id="6150" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:10 EST 2021" starttimestamp="1612813070441" timestamp="7699622" />
  <Command __id="6152" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:10 EST 2021" starttimestamp="1612813070441" timestamp="7699761" />
  <Command __id="6154" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:10 EST 2021" starttimestamp="1612813070441" timestamp="7699983" />
  <Command __id="6156" _type="InsertStringCommand" date="Mon Feb 08 16:46:11 EST 2021" starttimestamp="1612813070441" timestamp="7700787" timestamp2="7700787">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6157" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7700826" />
  <Command __id="6161" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7701060" />
  <Command __id="6163" _type="InsertStringCommand" date="Mon Feb 08 16:46:11 EST 2021" starttimestamp="1612813070441" timestamp="7701069" timestamp2="7701069">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6164" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7701162" />
  <Command __id="6165" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7701262" />
  <Command __id="6167" _type="InsertStringCommand" date="Mon Feb 08 16:46:11 EST 2021" starttimestamp="1612813070441" timestamp="7701278" timestamp2="7701278">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="6052" _type="Insert" date="Mon Feb 08 16:45:39 EST 2021" docASTNodeCount="4978" docActiveCodeLength="28766" docExpressionCount="3415" docLength="30912" length="1" offset="23540" starttimestamp="1612813070441" timestamp="7669207">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="6058" _type="Replace" date="Mon Feb 08 16:45:44 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28698" docExpressionCount="3335" docLength="30844" endLine="654" insertionLength="1" int_docASTNodeCount="4967" int_docActiveCodeLength="28697" int_docExpressionCount="3409" int_docLength="30843" length="69" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7674512">
    <deletedText><![CDATA[boolean lastPage = false;
				if (searches.get("s")) {
					
				}]]></deletedText>
    <insertedText><![CDATA[f]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6061" _type="Insert" date="Mon Feb 08 16:45:45 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28702" docExpressionCount="3335" docLength="30848" length="4" offset="23491" repeat="4" starttimestamp="1612813070441" timestamp="7674701" timestamp2="7675506">
    <text><![CDATA[orea]]></text>
  </DocumentChange>
  <DocumentChange __id="6066" _type="Replace" date="Mon Feb 08 16:45:46 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28742" docExpressionCount="3412" docLength="30888" endLine="651" insertionLength="45" int_docASTNodeCount="4967" int_docActiveCodeLength="28697" int_docExpressionCount="3409" int_docLength="30843" length="5" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7675644">
    <deletedText><![CDATA[forea]]></deletedText>
    <insertedText><![CDATA[for (String string : header2) {
					
				}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6070" _type="Replace" date="Mon Feb 08 16:45:49 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28737" docExpressionCount="3412" docLength="30883" endLine="651" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28736" int_docExpressionCount="3335" int_docLength="30882" length="6" offset="23502" startLine="651" starttimestamp="1612813070441" timestamp="7678848">
    <deletedText><![CDATA[string]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6073" _type="Delete" date="Mon Feb 08 16:45:50 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28736" docExpressionCount="3335" docLength="30882" endLine="651" length="1" offset="23502" startLine="651" starttimestamp="1612813070441" timestamp="7679794">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6074" _type="Insert" date="Mon Feb 08 16:45:50 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28739" docExpressionCount="3412" docLength="30885" length="3" offset="23502" repeat="3" starttimestamp="1612813070441" timestamp="7680158" timestamp2="7680263">
    <text><![CDATA[utr]]></text>
  </DocumentChange>
  <DocumentChange __id="6081" _type="Delete" date="Mon Feb 08 16:45:51 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28737" docExpressionCount="3412" docLength="30883" endLine="651" length="2" offset="23503" repeat="2" startLine="651" starttimestamp="1612813070441" timestamp="7680679" timestamp2="7680806">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="6085" _type="Insert" date="Mon Feb 08 16:45:51 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28739" docExpressionCount="3412" docLength="30885" length="2" offset="23503" repeat="2" starttimestamp="1612813070441" timestamp="7681274" timestamp2="7681360">
    <text><![CDATA[rl]]></text>
  </DocumentChange>
  <DocumentChange __id="6092" _type="Replace" date="Mon Feb 08 16:45:54 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28733" docExpressionCount="3412" docLength="30879" endLine="651" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28732" int_docExpressionCount="3335" int_docLength="30878" length="7" offset="23508" startLine="651" starttimestamp="1612813070441" timestamp="7683656">
    <deletedText><![CDATA[header2]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6096" _type="Delete" date="Mon Feb 08 16:45:54 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28732" docExpressionCount="3335" docLength="30878" endLine="651" length="1" offset="23508" startLine="651" starttimestamp="1612813070441" timestamp="7684264">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6097" _type="Insert" date="Mon Feb 08 16:45:55 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28736" docExpressionCount="3412" docLength="30882" length="4" offset="23508" repeat="4" starttimestamp="1612813070441" timestamp="7684892" timestamp2="7685102">
    <text><![CDATA[sear]]></text>
  </DocumentChange>
  <DocumentChange __id="6102" _type="Replace" date="Mon Feb 08 16:45:55 EST 2021" docASTNodeCount="4974" docActiveCodeLength="28740" docExpressionCount="3412" docLength="30886" endLine="651" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28732" int_docExpressionCount="3335" int_docLength="30878" length="4" offset="23508" startLine="651" starttimestamp="1612813070441" timestamp="7685394">
    <deletedText><![CDATA[sear]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6104" _type="Insert" date="Mon Feb 08 16:45:56 EST 2021" docASTNodeCount="4976" docActiveCodeLength="28744" docExpressionCount="3414" docLength="30890" length="4" offset="23516" repeat="4" starttimestamp="1612813070441" timestamp="7685615" timestamp2="7686008">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6111" _type="Replace" date="Mon Feb 08 16:45:56 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28749" docExpressionCount="3415" docLength="30895" endLine="651" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28741" int_docExpressionCount="3335" int_docLength="30887" length="3" offset="23517" startLine="651" starttimestamp="1612813070441" timestamp="7686154">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6113" _type="Replace" date="Mon Feb 08 16:45:57 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28747" docExpressionCount="3415" docLength="30893" endLine="651" insertionLength="1" int_docASTNodeCount="4976" int_docActiveCodeLength="28746" int_docExpressionCount="3414" int_docLength="30892" length="3" offset="23521" startLine="651" starttimestamp="1612813070441" timestamp="7686612">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6116" _type="Delete" date="Mon Feb 08 16:45:57 EST 2021" docASTNodeCount="4976" docActiveCodeLength="28746" docExpressionCount="3414" docLength="30892" endLine="651" length="1" offset="23521" startLine="651" starttimestamp="1612813070441" timestamp="7686939">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6117" _type="Insert" date="Mon Feb 08 16:45:57 EST 2021" docASTNodeCount="4977" docActiveCodeLength="28749" docExpressionCount="3415" docLength="30895" length="3" offset="23521" repeat="2" starttimestamp="1612813070441" timestamp="7687138" timestamp2="7687451">
    <text><![CDATA["s"]]></text>
  </DocumentChange>
  <DocumentChange __id="6135" _type="Delete" date="Mon Feb 08 16:46:09 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28719" docExpressionCount="3335" docLength="30865" endLine="651" length="30" offset="23495" repeat="10" startLine="651" starttimestamp="1612813070441" timestamp="7698754" timestamp2="7699975">
    <text><![CDATA[String url : searches.get("s")]]></text>
  </DocumentChange>
  <DocumentChange __id="6155" _type="Insert" date="Mon Feb 08 16:46:11 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28724" docExpressionCount="3335" docLength="30870" length="5" offset="23495" repeat="5" starttimestamp="1612813070441" timestamp="7700778" timestamp2="7701064">
    <text><![CDATA[int i]]></text>
  </DocumentChange>
  <DocumentChange __id="6166" _type="Replace" date="Mon Feb 08 16:46:11 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28725" docExpressionCount="3335" docLength="30871" endLine="651" insertionLength="2" int_docASTNodeCount="4859" int_docActiveCodeLength="28723" int_docExpressionCount="3335" int_docLength="30869" length="1" offset="23499" startLine="651" starttimestamp="1612813070441" timestamp="7701270">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[i ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6168" _type="Insert" date="Mon Feb 08 16:46:12 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28731" docExpressionCount="3335" docLength="30877" length="6" offset="23501" repeat="6" starttimestamp="1612813070441" timestamp="7701886" timestamp2="7703350">
    <text><![CDATA[= 0; i]]></text>
  </DocumentChange>
  <DocumentChange __id="6182" _type="Replace" date="Mon Feb 08 16:46:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28750" docExpressionCount="3335" docLength="30896" endLine="651" insertionLength="20" int_docASTNodeCount="4859" int_docActiveCodeLength="28730" int_docExpressionCount="3335" int_docLength="30876" length="1" offset="23506" startLine="651" starttimestamp="1612813070441" timestamp="7703565">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[isException(command)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6184" _type="Replace" date="Mon Feb 08 16:46:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28744" docExpressionCount="3335" docLength="30890" endLine="651" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28743" int_docExpressionCount="3335" int_docLength="30889" length="7" offset="23518" startLine="651" starttimestamp="1612813070441" timestamp="7703705">
    <deletedText><![CDATA[command]]></deletedText>
    <insertedText><![CDATA[<]]></insertedText>
  </DocumentChange>
  <Command __id="6169" _type="InsertStringCommand" date="Mon Feb 08 16:46:12 EST 2021" starttimestamp="1612813070441" timestamp="7701891" timestamp2="7701891">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6171" _type="InsertStringCommand" date="Mon Feb 08 16:46:12 EST 2021" starttimestamp="1612813070441" timestamp="7701999" timestamp2="7701999">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6173" _type="InsertStringCommand" date="Mon Feb 08 16:46:12 EST 2021" starttimestamp="1612813070441" timestamp="7702170" timestamp2="7702170">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="6175" _type="InsertStringCommand" date="Mon Feb 08 16:46:13 EST 2021" starttimestamp="1612813070441" timestamp="7702854" timestamp2="7702854">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6177" _type="InsertStringCommand" date="Mon Feb 08 16:46:13 EST 2021" starttimestamp="1612813070441" timestamp="7702940" timestamp2="7702940">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6179" _type="InsertStringCommand" date="Mon Feb 08 16:46:13 EST 2021" starttimestamp="1612813070441" timestamp="7703356" timestamp2="7703356">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6180" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7703397" />
  <Command __id="6181" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:13 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7703558" />
  <Command __id="6183" _type="InsertStringCommand" date="Mon Feb 08 16:46:14 EST 2021" starttimestamp="1612813070441" timestamp="7703686" timestamp2="7703686">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6185" _type="InsertStringCommand" date="Mon Feb 08 16:46:14 EST 2021" starttimestamp="1612813070441" timestamp="7703716" timestamp2="7703716">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="6187" _type="InsertStringCommand" date="Mon Feb 08 16:46:14 EST 2021" starttimestamp="1612813070441" timestamp="7703734" timestamp2="7703734">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6190" _type="UndoCommand" date="Mon Feb 08 16:46:14 EST 2021" starttimestamp="1612813070441" timestamp="7704465" />
  <Command __id="6192" _type="UndoCommand" date="Mon Feb 08 16:46:15 EST 2021" starttimestamp="1612813070441" timestamp="7704608" />
  <Command __id="6193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:46:16 EST 2021" starttimestamp="1612813070441" timestamp="7705566" />
  <Command __id="6195" _type="InsertStringCommand" date="Mon Feb 08 16:46:16 EST 2021" starttimestamp="1612813070441" timestamp="7705777" timestamp2="7705777">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6197" _type="InsertStringCommand" date="Mon Feb 08 16:46:16 EST 2021" starttimestamp="1612813070441" timestamp="7706341" timestamp2="7706341">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="6199" _type="InsertStringCommand" date="Mon Feb 08 16:46:16 EST 2021" starttimestamp="1612813070441" timestamp="7706400" timestamp2="7706400">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6201" _type="PauseCommand" date="Mon Feb 08 16:46:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7708338">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1938]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6202" _type="InsertStringCommand" date="Mon Feb 08 16:46:18 EST 2021" starttimestamp="1612813070441" timestamp="7708343" timestamp2="7708343">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6203" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7708384" />
  <Command __id="6207" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7709112" />
  <Command __id="6209" _type="InsertStringCommand" date="Mon Feb 08 16:46:19 EST 2021" starttimestamp="1612813070441" timestamp="7709127" timestamp2="7709127">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6211" _type="InsertStringCommand" date="Mon Feb 08 16:46:19 EST 2021" starttimestamp="1612813070441" timestamp="7709341" timestamp2="7709341">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6212" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7709382" />
  <Command __id="6216" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7710232" />
  <Command __id="6218" _type="InsertStringCommand" date="Mon Feb 08 16:46:20 EST 2021" starttimestamp="1612813070441" timestamp="7710374" timestamp2="7710374">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6220" _type="InsertStringCommand" date="Mon Feb 08 16:46:21 EST 2021" starttimestamp="1612813070441" timestamp="7710862" timestamp2="7710862">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6222" _type="PauseCommand" date="Mon Feb 08 16:46:23 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7712710">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1848]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6223" _type="InsertStringCommand" date="Mon Feb 08 16:46:23 EST 2021" starttimestamp="1612813070441" timestamp="7712713" timestamp2="7712713">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6225" _type="InsertStringCommand" date="Mon Feb 08 16:46:23 EST 2021" starttimestamp="1612813070441" timestamp="7713135" timestamp2="7713135">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6226" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:46:24 EST 2021" starttimestamp="1612813070441" timestamp="7713957" />
  <Command __id="6228" _type="InsertStringCommand" date="Mon Feb 08 16:46:24 EST 2021" starttimestamp="1612813070441" timestamp="7714287" timestamp2="7714287">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6229" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:24 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7714328" />
  <Command __id="6231" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7714476" />
  <Command __id="6233" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:46:25 EST 2021" starttimestamp="1612813070441" timestamp="7714825" />
  <Command __id="6235" _type="PauseCommand" date="Mon Feb 08 16:46:26 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7715982">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1157]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6236" _type="InsertStringCommand" date="Mon Feb 08 16:46:26 EST 2021" starttimestamp="1612813070441" timestamp="7715988" timestamp2="7715988">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6237" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:26 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7716029" />
  <Command __id="6239" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:27 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7716809" />
  <Command __id="6241" _type="InsertStringCommand" date="Mon Feb 08 16:46:27 EST 2021" starttimestamp="1612813070441" timestamp="7716834" timestamp2="7716834">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6243" _type="InsertStringCommand" date="Mon Feb 08 16:46:27 EST 2021" starttimestamp="1612813070441" timestamp="7717492" timestamp2="7717492">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6245" _type="InsertStringCommand" date="Mon Feb 08 16:46:28 EST 2021" starttimestamp="1612813070441" timestamp="7717580" timestamp2="7717580">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6247" _type="InsertStringCommand" date="Mon Feb 08 16:46:28 EST 2021" starttimestamp="1612813070441" timestamp="7717836" timestamp2="7717836">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6248" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:28 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7717868" />
  <Command __id="6250" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:28 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7718365" />
  <Command __id="6252" _type="InsertStringCommand" date="Mon Feb 08 16:46:28 EST 2021" starttimestamp="1612813070441" timestamp="7718468" timestamp2="7718468">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6253" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:46:29 EST 2021" starttimestamp="1612813070441" timestamp="7719055" />
  <Command __id="6255" _type="PauseCommand" date="Mon Feb 08 16:46:32 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7722454">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3399]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6254" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:46:32 EST 2021" starttimestamp="1612813070441" timestamp="7722454" />
  <Command __id="6256" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:46:33 EST 2021" starttimestamp="1612813070441" timestamp="7722781" />
  <Command __id="6257" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 08 16:46:33 EST 2021" starttimestamp="1612813070441" timestamp="7722881" />
  <Command __id="6258" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:33 EST 2021" starttimestamp="1612813070441" timestamp="7723076" />
  <Command __id="6259" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:33 EST 2021" starttimestamp="1612813070441" timestamp="7723224" />
  <Command __id="6260" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:33 EST 2021" starttimestamp="1612813070441" timestamp="7723359" />
  <Command __id="6261" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:33 EST 2021" starttimestamp="1612813070441" timestamp="7723488" />
  <Command __id="6262" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:34 EST 2021" starttimestamp="1612813070441" timestamp="7723616" />
  <Command __id="6263" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 08 16:46:34 EST 2021" starttimestamp="1612813070441" timestamp="7723755" />
  <Command __id="6265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:46:34 EST 2021" starttimestamp="1612813070441" timestamp="7724362" />
  <Command __id="6267" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:46:34 EST 2021" starttimestamp="1612813070441" timestamp="7724472" />
  <Command __id="6269" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 16:46:35 EST 2021" starttimestamp="1612813070441" timestamp="7724686" />
  <Command __id="6271" _type="InsertStringCommand" date="Mon Feb 08 16:46:35 EST 2021" starttimestamp="1612813070441" timestamp="7724775" timestamp2="7724775">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6272" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:35 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7724811" />
  <Command __id="6273" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:36 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7725565" />
  <Command __id="6274" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:46:36 EST 2021" starttimestamp="1612813070441" timestamp="7725709" />
  <Command __id="6276" _type="InsertStringCommand" date="Mon Feb 08 16:46:37 EST 2021" starttimestamp="1612813070441" timestamp="7726619" timestamp2="7726619">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6277" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7726661" />
  <Command __id="6278" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:37 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7727312" />
  <Command __id="6280" _type="InsertStringCommand" date="Mon Feb 08 16:46:37 EST 2021" starttimestamp="1612813070441" timestamp="7727339" timestamp2="7727339">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6281" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7727390" />
  <Command __id="6286" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:38 EST 2021" starttimestamp="1612813070441" timestamp="7728535" />
  <Command __id="6288" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:39 EST 2021" starttimestamp="1612813070441" timestamp="7728635" />
  <Command __id="6291" _type="PauseCommand" date="Mon Feb 08 16:46:43 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7733018">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3987]]></rest>
    <prev><![CDATA[Delete]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="6290" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:43 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7733018" />
  <Command __id="6292" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:46:43 EST 2021" starttimestamp="1612813070441" timestamp="7733450" />
  <Command __id="6293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:46:44 EST 2021" starttimestamp="1612813070441" timestamp="7733672" />
  <Command __id="6294" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:46:44 EST 2021" starttimestamp="1612813070441" timestamp="7734260" />
  <Command __id="6296" _type="InsertStringCommand" date="Mon Feb 08 16:46:44 EST 2021" starttimestamp="1612813070441" timestamp="7734489" timestamp2="7734489">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6186" _type="Insert" date="Mon Feb 08 16:46:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28745" docExpressionCount="3335" docLength="30891" length="1" offset="23519" starttimestamp="1612813070441" timestamp="7703728">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6188" _type="Delete" date="Mon Feb 08 16:46:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28744" docExpressionCount="3335" docLength="30890" endLine="651" length="1" offset="23519" startLine="651" starttimestamp="1612813070441" timestamp="7704426">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6189" _type="Replace" date="Mon Feb 08 16:46:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28750" docExpressionCount="3335" docLength="30896" endLine="651" insertionLength="7" int_docASTNodeCount="4859" int_docActiveCodeLength="28743" int_docExpressionCount="3335" int_docLength="30889" length="1" offset="23518" startLine="651" starttimestamp="1612813070441" timestamp="7704434">
    <deletedText><![CDATA[<]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6191" _type="Replace" date="Mon Feb 08 16:46:15 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28731" docExpressionCount="3335" docLength="30877" endLine="651" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28730" int_docExpressionCount="3335" int_docLength="30876" length="20" offset="23506" startLine="651" starttimestamp="1612813070441" timestamp="7704576">
    <deletedText><![CDATA[isException(command)]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6194" _type="Insert" date="Mon Feb 08 16:46:16 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28738" docExpressionCount="3335" docLength="30884" length="7" offset="23507" repeat="7" starttimestamp="1612813070441" timestamp="7705772" timestamp2="7708613">
    <text><![CDATA[ < sear]]></text>
  </DocumentChange>
  <DocumentChange __id="6208" _type="Replace" date="Mon Feb 08 16:46:19 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28742" docExpressionCount="3335" docLength="30888" endLine="651" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28734" int_docExpressionCount="3335" int_docLength="30880" length="4" offset="23510" startLine="651" starttimestamp="1612813070441" timestamp="7709120">
    <deletedText><![CDATA[sear]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6210" _type="Insert" date="Mon Feb 08 16:46:19 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28746" docExpressionCount="3335" docLength="30892" length="4" offset="23518" repeat="4" starttimestamp="1612813070441" timestamp="7709335" timestamp2="7709746">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6217" _type="Replace" date="Mon Feb 08 16:46:20 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28751" docExpressionCount="3335" docLength="30897" endLine="651" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28743" int_docExpressionCount="3335" int_docLength="30889" length="3" offset="23519" startLine="651" starttimestamp="1612813070441" timestamp="7710240">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6219" _type="Replace" date="Mon Feb 08 16:46:21 EST 2021" docASTNodeCount="4523" docActiveCodeLength="28749" docExpressionCount="3109" docLength="30895" endLine="651" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28748" int_docExpressionCount="3335" int_docLength="30894" length="3" offset="23523" startLine="651" starttimestamp="1612813070441" timestamp="7710853">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6221" _type="Insert" date="Mon Feb 08 16:46:23 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28751" docExpressionCount="3335" docLength="30897" length="2" offset="23524" repeat="2" starttimestamp="1612813070441" timestamp="7712710" timestamp2="7713127">
    <text><![CDATA[s"]]></text>
  </DocumentChange>
  <DocumentChange __id="6227" _type="Insert" date="Mon Feb 08 16:46:24 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28753" docExpressionCount="3335" docLength="30899" length="2" offset="23527" repeat="2" starttimestamp="1612813070441" timestamp="7714280" timestamp2="7714448">
    <text><![CDATA[. ]]></text>
  </DocumentChange>
  <DocumentChange __id="6232" _type="Delete" date="Mon Feb 08 16:46:25 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28752" docExpressionCount="3335" docLength="30898" endLine="651" length="1" offset="23528" startLine="651" starttimestamp="1612813070441" timestamp="7714818">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6234" _type="Insert" date="Mon Feb 08 16:46:26 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28754" docExpressionCount="3335" docLength="30900" length="2" offset="23528" repeat="2" starttimestamp="1612813070441" timestamp="7715982" timestamp2="7716193">
    <text><![CDATA[si]]></text>
  </DocumentChange>
  <DocumentChange __id="6240" _type="Replace" date="Mon Feb 08 16:46:27 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28758" docExpressionCount="3335" docLength="30904" endLine="651" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28752" int_docExpressionCount="3335" int_docLength="30898" length="2" offset="23528" startLine="651" starttimestamp="1612813070441" timestamp="7716817">
    <deletedText><![CDATA[si]]></deletedText>
    <insertedText><![CDATA[size()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6242" _type="Insert" date="Mon Feb 08 16:46:27 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28763" docExpressionCount="3422" docLength="30909" length="5" offset="23534" repeat="5" starttimestamp="1612813070441" timestamp="7717486" timestamp2="7718461">
    <text><![CDATA[; i++]]></text>
  </DocumentChange>
  <DocumentChange __id="6264" _type="Delete" date="Mon Feb 08 16:46:34 EST 2021" docASTNodeCount="4983" docActiveCodeLength="28760" docExpressionCount="3421" docLength="30906" endLine="651" length="3" offset="23523" repeat="3" startLine="651" starttimestamp="1612813070441" timestamp="7724359" timestamp2="7724678">
    <text><![CDATA["s"]]></text>
  </DocumentChange>
  <DocumentChange __id="6270" _type="Insert" date="Mon Feb 08 16:46:35 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28761" docExpressionCount="3422" docLength="30907" length="1" offset="23523" starttimestamp="1612813070441" timestamp="7724763">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6275" _type="Insert" date="Mon Feb 08 16:46:37 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28762" docExpressionCount="3335" docLength="30908" length="1" offset="23547" starttimestamp="1612813070441" timestamp="7726613">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="6279" _type="Replace" date="Mon Feb 08 16:46:37 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28763" docExpressionCount="3335" docLength="30909" endLine="652" insertionLength="2" int_docASTNodeCount="4984" int_docActiveCodeLength="28761" int_docExpressionCount="3422" int_docLength="30907" length="1" offset="23547" startLine="652" starttimestamp="1612813070441" timestamp="7727319">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[s.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6282" _type="Insert" date="Mon Feb 08 16:46:38 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28766" docExpressionCount="3335" docLength="30912" length="3" offset="23549" repeat="3" starttimestamp="1612813070441" timestamp="7727895" timestamp2="7728101">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="6285" _type="Delete" date="Mon Feb 08 16:46:38 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28761" docExpressionCount="3422" docLength="30907" endLine="652" length="5" offset="23547" repeat="3" startLine="652" starttimestamp="1612813070441" timestamp="7728532" timestamp2="7729031">
    <text><![CDATA[s.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6295" _type="Insert" date="Mon Feb 08 16:46:44 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28767" docExpressionCount="3422" docLength="30913" length="6" offset="23484" starttimestamp="1612813070441" timestamp="7734475">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="6297" _type="Insert" date="Mon Feb 08 16:46:48 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28773" docExpressionCount="3335" docLength="30919" length="6" offset="23490" repeat="6" starttimestamp="1612813070441" timestamp="7737965" timestamp2="7738495">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <DocumentChange __id="6308" _type="Replace" date="Mon Feb 08 16:46:49 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28774" docExpressionCount="3335" docLength="30920" endLine="651" insertionLength="7" int_docASTNodeCount="4984" int_docActiveCodeLength="28767" int_docExpressionCount="3422" int_docLength="30913" length="6" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7738915">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String[]]></insertedText>
  </DocumentChange>
  <Command __id="6298" _type="PauseCommand" date="Mon Feb 08 16:46:48 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7737965">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3476]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6299" _type="InsertStringCommand" date="Mon Feb 08 16:46:48 EST 2021" starttimestamp="1612813070441" timestamp="7737971" timestamp2="7737971">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="6301" _type="InsertStringCommand" date="Mon Feb 08 16:46:48 EST 2021" starttimestamp="1612813070441" timestamp="7738215" timestamp2="7738215">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6302" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:48 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7738254" />
  <Command __id="6307" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:49 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7738909" />
  <Command __id="6309" _type="InsertStringCommand" date="Mon Feb 08 16:46:49 EST 2021" starttimestamp="1612813070441" timestamp="7738923" timestamp2="7738923">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="6311" _type="InsertStringCommand" date="Mon Feb 08 16:46:49 EST 2021" starttimestamp="1612813070441" timestamp="7738942" timestamp2="7738942">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="6313" _type="InsertStringCommand" date="Mon Feb 08 16:46:49 EST 2021" starttimestamp="1612813070441" timestamp="7739076" timestamp2="7739076">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6315" _type="InsertStringCommand" date="Mon Feb 08 16:46:49 EST 2021" starttimestamp="1612813070441" timestamp="7739346" timestamp2="7739346">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6316" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:49 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7739389" />
  <Command __id="6319" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:50 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7739610" />
  <Command __id="6321" _type="InsertStringCommand" date="Mon Feb 08 16:46:50 EST 2021" starttimestamp="1612813070441" timestamp="7739867" timestamp2="7739867">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6322" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:50 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7739909" />
  <Command __id="6323" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:50 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7739935" />
  <Command __id="6325" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:46:50 EST 2021" starttimestamp="1612813070441" timestamp="7740343" />
  <Command __id="6327" _type="InsertStringCommand" date="Mon Feb 08 16:46:50 EST 2021" starttimestamp="1612813070441" timestamp="7740471" timestamp2="7740471">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6328" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7740565" />
  <Command __id="6329" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7740597" />
  <Command __id="6331" _type="InsertStringCommand" date="Mon Feb 08 16:46:51 EST 2021" starttimestamp="1612813070441" timestamp="7740775" timestamp2="7740775">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="6333" _type="InsertStringCommand" date="Mon Feb 08 16:46:51 EST 2021" starttimestamp="1612813070441" timestamp="7740919" timestamp2="7740919">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6335" _type="InsertStringCommand" date="Mon Feb 08 16:46:51 EST 2021" starttimestamp="1612813070441" timestamp="7740977" timestamp2="7740977">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6336" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7741019" />
  <Command __id="6337" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7741043" />
  <Command __id="6339" _type="InsertStringCommand" date="Mon Feb 08 16:46:51 EST 2021" starttimestamp="1612813070441" timestamp="7741055" timestamp2="7741055">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6340" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7741147" />
  <Command __id="6341" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:46:51 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7741173" />
  <Command __id="6343" _type="InsertStringCommand" date="Mon Feb 08 16:46:51 EST 2021" starttimestamp="1612813070441" timestamp="7741277" timestamp2="7741277">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6345" _type="InsertStringCommand" date="Mon Feb 08 16:46:51 EST 2021" starttimestamp="1612813070441" timestamp="7741422" timestamp2="7741422">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6347" _type="InsertStringCommand" date="Mon Feb 08 16:46:51 EST 2021" starttimestamp="1612813070441" timestamp="7741499" timestamp2="7741499">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6349" _type="InsertStringCommand" date="Mon Feb 08 16:46:52 EST 2021" starttimestamp="1612813070441" timestamp="7742171" timestamp2="7742171">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="6351" _type="PauseCommand" date="Mon Feb 08 16:46:56 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7745614">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3443]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="6352" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:56 EST 2021" starttimestamp="1612813070441" timestamp="7745620" />
  <Command __id="6354" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:56 EST 2021" starttimestamp="1612813070441" timestamp="7745767" />
  <Command __id="6356" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:56 EST 2021" starttimestamp="1612813070441" timestamp="7745904" />
  <Command __id="6358" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:56 EST 2021" starttimestamp="1612813070441" timestamp="7746046" />
  <Command __id="6360" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:57 EST 2021" starttimestamp="1612813070441" timestamp="7746604" />
  <Command __id="6362" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:46:57 EST 2021" starttimestamp="1612813070441" timestamp="7746769" />
  <Command __id="6364" _type="InsertStringCommand" date="Mon Feb 08 16:46:57 EST 2021" starttimestamp="1612813070441" timestamp="7747558" timestamp2="7747558">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6366" _type="InsertStringCommand" date="Mon Feb 08 16:46:58 EST 2021" starttimestamp="1612813070441" timestamp="7747628" timestamp2="7747628">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6367" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:46:58 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7747670" />
  <Command __id="6373" _type="PauseCommand" date="Mon Feb 08 16:46:59 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7749408">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1001]]></rest>
    <prev><![CDATA[Delete]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6377" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:00 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7749710" />
  <Command __id="6379" _type="InsertStringCommand" date="Mon Feb 08 16:47:00 EST 2021" starttimestamp="1612813070441" timestamp="7749724" timestamp2="7749724">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6381" _type="UndoCommand" date="Mon Feb 08 16:47:00 EST 2021" starttimestamp="1612813070441" timestamp="7750493" />
  <Command __id="6383" _type="InsertStringCommand" date="Mon Feb 08 16:47:01 EST 2021" starttimestamp="1612813070441" timestamp="7751039" timestamp2="7751039">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="6385" _type="InsertStringCommand" date="Mon Feb 08 16:47:01 EST 2021" starttimestamp="1612813070441" timestamp="7751137" timestamp2="7751137">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6386" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:01 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7751178" />
  <Command __id="6389" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:02 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7751595" />
  <Command __id="6391" _type="InsertStringCommand" date="Mon Feb 08 16:47:02 EST 2021" starttimestamp="1612813070441" timestamp="7751637" timestamp2="7751637">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6393" _type="PauseCommand" date="Mon Feb 08 16:47:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7752723">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1086]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="6394" _type="InsertStringCommand" date="Mon Feb 08 16:47:03 EST 2021" starttimestamp="1612813070441" timestamp="7752732" timestamp2="7752732">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6395" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:03 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7752817" />
  <Command __id="6398" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:03 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7753079" />
  <Command __id="6400" _type="InsertStringCommand" date="Mon Feb 08 16:47:03 EST 2021" starttimestamp="1612813070441" timestamp="7753095" timestamp2="7753095">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6401" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:47:03 EST 2021" starttimestamp="1612813070441" timestamp="7753481" />
  <Command __id="6403" _type="InsertStringCommand" date="Mon Feb 08 16:47:04 EST 2021" starttimestamp="1612813070441" timestamp="7753770" timestamp2="7753770">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6405" _type="PauseCommand" date="Mon Feb 08 16:47:05 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7754881">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1111]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6406" _type="InsertStringCommand" date="Mon Feb 08 16:47:05 EST 2021" starttimestamp="1612813070441" timestamp="7754888" timestamp2="7754888">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6407" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:05 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7754978" />
  <Command __id="6410" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7755197" />
  <Command __id="6412" _type="InsertStringCommand" date="Mon Feb 08 16:47:06 EST 2021" starttimestamp="1612813070441" timestamp="7755872" timestamp2="7755872">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6413" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7755962" />
  <Command __id="6414" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7755995" />
  <Command __id="6416" _type="InsertStringCommand" date="Mon Feb 08 16:47:06 EST 2021" starttimestamp="1612813070441" timestamp="7756120" timestamp2="7756120">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="6418" _type="InsertStringCommand" date="Mon Feb 08 16:47:06 EST 2021" starttimestamp="1612813070441" timestamp="7756267" timestamp2="7756267">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6420" _type="InsertStringCommand" date="Mon Feb 08 16:47:06 EST 2021" starttimestamp="1612813070441" timestamp="7756343" timestamp2="7756343">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6421" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7756384" />
  <Command __id="6422" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7756410" />
  <Command __id="6424" _type="InsertStringCommand" date="Mon Feb 08 16:47:06 EST 2021" starttimestamp="1612813070441" timestamp="7756421" timestamp2="7756421">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6425" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7756512" />
  <Command __id="6426" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7756536" />
  <Command __id="6428" _type="InsertStringCommand" date="Mon Feb 08 16:47:07 EST 2021" starttimestamp="1612813070441" timestamp="7756563" timestamp2="7756563">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6430" _type="InsertStringCommand" date="Mon Feb 08 16:47:07 EST 2021" starttimestamp="1612813070441" timestamp="7756972" timestamp2="7756972">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6432" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:47:07 EST 2021" starttimestamp="1612813070441" timestamp="7757272" />
  <Command __id="6434" _type="InsertStringCommand" date="Mon Feb 08 16:47:07 EST 2021" starttimestamp="1612813070441" timestamp="7757527" timestamp2="7757527">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6436" _type="InsertStringCommand" date="Mon Feb 08 16:47:08 EST 2021" starttimestamp="1612813070441" timestamp="7757671" timestamp2="7757671">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6438" _type="PauseCommand" date="Mon Feb 08 16:47:10 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7760338">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2667]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6439" _type="InsertStringCommand" date="Mon Feb 08 16:47:10 EST 2021" starttimestamp="1612813070441" timestamp="7760353" timestamp2="7760353">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6441" _type="InsertStringCommand" date="Mon Feb 08 16:47:10 EST 2021" starttimestamp="1612813070441" timestamp="7760410" timestamp2="7760410">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6443" _type="InsertStringCommand" date="Mon Feb 08 16:47:10 EST 2021" starttimestamp="1612813070441" timestamp="7760458" timestamp2="7760458">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="6445" _type="InsertStringCommand" date="Mon Feb 08 16:47:10 EST 2021" starttimestamp="1612813070441" timestamp="7760516" timestamp2="7760516">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6447" _type="InsertStringCommand" date="Mon Feb 08 16:47:11 EST 2021" starttimestamp="1612813070441" timestamp="7761023" timestamp2="7761023">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6448" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7761117" />
  <Command __id="6451" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7762374" />
  <Command __id="6454" _type="InsertStringCommand" date="Mon Feb 08 16:47:12 EST 2021" starttimestamp="1612813070441" timestamp="7762404" timestamp2="7762404">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6456" _type="InsertStringCommand" date="Mon Feb 08 16:47:13 EST 2021" starttimestamp="1612813070441" timestamp="7763257" timestamp2="7763257">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6458" _type="InsertStringCommand" date="Mon Feb 08 16:47:13 EST 2021" starttimestamp="1612813070441" timestamp="7763345" timestamp2="7763345">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6310" _type="Insert" date="Mon Feb 08 16:46:49 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28780" docExpressionCount="3335" docLength="30926" length="6" offset="23497" repeat="6" starttimestamp="1612813070441" timestamp="7738935" timestamp2="7739862">
    <text><![CDATA[] nexl]]></text>
  </DocumentChange>
  <DocumentChange __id="6324" _type="Delete" date="Mon Feb 08 16:46:50 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28779" docExpressionCount="3335" docLength="30925" endLine="651" length="1" offset="23502" startLine="651" starttimestamp="1612813070441" timestamp="7740341">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6326" _type="Insert" date="Mon Feb 08 16:46:50 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28788" docExpressionCount="3335" docLength="30934" length="9" offset="23502" repeat="9" starttimestamp="1612813070441" timestamp="7740466" timestamp2="7742164">
    <text><![CDATA[tLine = {]]></text>
  </DocumentChange>
  <DocumentChange __id="6350" _type="Delete" date="Mon Feb 08 16:46:56 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28767" docExpressionCount="3422" docLength="30913" endLine="651" length="21" offset="23490" repeat="6" startLine="651" starttimestamp="1612813070441" timestamp="7745614" timestamp2="7746765">
    <text><![CDATA[String[] nextLine = {]]></text>
  </DocumentChange>
  <DocumentChange __id="6363" _type="Insert" date="Mon Feb 08 16:46:57 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28770" docExpressionCount="3335" docLength="30916" length="3" offset="23490" repeat="3" starttimestamp="1612813070441" timestamp="7747553" timestamp2="7747835">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="6369" _type="Delete" date="Mon Feb 08 16:46:58 EST 2021" docASTNodeCount="4984" docActiveCodeLength="28767" docExpressionCount="3422" docLength="30913" endLine="651" length="3" offset="23490" repeat="3" startLine="651" starttimestamp="1612813070441" timestamp="7748160" timestamp2="7748407">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="6372" _type="Insert" date="Mon Feb 08 16:46:59 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28771" docExpressionCount="3335" docLength="30917" length="4" offset="23490" repeat="4" starttimestamp="1612813070441" timestamp="7749408" timestamp2="7749594">
    <text><![CDATA[list]]></text>
  </DocumentChange>
  <DocumentChange __id="6378" _type="Replace" date="Mon Feb 08 16:47:00 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28807" docExpressionCount="3335" docLength="30953" endLine="651" insertionLength="40" int_docASTNodeCount="4984" int_docActiveCodeLength="28767" int_docExpressionCount="3422" int_docLength="30913" length="4" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7749717">
    <deletedText><![CDATA[list]]></deletedText>
    <insertedText><![CDATA[totalInsurmountableInIndeterminatePeriod]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6380" _type="Replace" date="Mon Feb 08 16:47:00 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28771" docExpressionCount="3335" docLength="30917" endLine="651" insertionLength="4" int_docASTNodeCount="4984" int_docActiveCodeLength="28767" int_docExpressionCount="3422" int_docLength="30913" length="40" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7750464">
    <deletedText><![CDATA[totalInsurmountableInIndeterminatePeriod]]></deletedText>
    <insertedText><![CDATA[list]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6382" _type="Replace" date="Mon Feb 08 16:47:01 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28768" docExpressionCount="3335" docLength="30914" endLine="651" insertionLength="1" int_docASTNodeCount="4984" int_docActiveCodeLength="28767" int_docExpressionCount="3422" int_docLength="30913" length="4" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7751032">
    <deletedText><![CDATA[list]]></deletedText>
    <insertedText><![CDATA[L]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6384" _type="Insert" date="Mon Feb 08 16:47:01 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28771" docExpressionCount="3335" docLength="30917" length="3" offset="23491" repeat="3" starttimestamp="1612813070441" timestamp="7751131" timestamp2="7751322">
    <text><![CDATA[ist]]></text>
  </DocumentChange>
  <DocumentChange __id="6390" _type="Replace" date="Mon Feb 08 16:47:02 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28774" docExpressionCount="3335" docLength="30920" endLine="651" insertionLength="7" int_docASTNodeCount="4984" int_docActiveCodeLength="28767" int_docExpressionCount="3422" int_docLength="30913" length="4" offset="23490" startLine="651" starttimestamp="1612813070441" timestamp="7751602">
    <deletedText><![CDATA[List]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6392" _type="Replace" date="Mon Feb 08 16:47:03 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28774" docExpressionCount="3335" docLength="30920" endLine="651" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28773" int_docExpressionCount="3335" int_docLength="30919" length="1" offset="23495" startLine="651" starttimestamp="1612813070441" timestamp="7752723">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6396" _type="Insert" date="Mon Feb 08 16:47:03 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28776" docExpressionCount="3335" docLength="30922" length="2" offset="23496" repeat="2" starttimestamp="1612813070441" timestamp="7752987" timestamp2="7753002">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="6399" _type="Replace" date="Mon Feb 08 16:47:03 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28779" docExpressionCount="3335" docLength="30925" endLine="651" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28773" int_docExpressionCount="3335" int_docLength="30919" length="3" offset="23495" startLine="651" starttimestamp="1612813070441" timestamp="7753087">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6402" _type="Insert" date="Mon Feb 08 16:47:04 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28790" docExpressionCount="3335" docLength="30936" length="11" offset="23502" repeat="11" starttimestamp="1612813070441" timestamp="7753764" timestamp2="7756967">
    <text><![CDATA[ nextLine  ]]></text>
  </DocumentChange>
  <DocumentChange __id="6431" _type="Delete" date="Mon Feb 08 16:47:07 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28789" docExpressionCount="3335" docLength="30935" endLine="651" length="1" offset="23512" startLine="651" starttimestamp="1612813070441" timestamp="7757269">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6433" _type="Insert" date="Mon Feb 08 16:47:07 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28791" docExpressionCount="3335" docLength="30937" length="2" offset="23512" repeat="2" starttimestamp="1612813070441" timestamp="7757521" timestamp2="7757665">
    <text><![CDATA[= ]]></text>
  </DocumentChange>
  <DocumentChange __id="6437" _type="Insert" date="Mon Feb 08 16:47:10 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28798" docExpressionCount="3335" docLength="30944" length="7" offset="23514" repeat="7" starttimestamp="1612813070441" timestamp="7760338" timestamp2="7761457">
    <text><![CDATA[new arr]]></text>
  </DocumentChange>
  <DocumentChange __id="6452" _type="Replace" date="Mon Feb 08 16:47:12 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28808" docExpressionCount="3335" docLength="30954" endLine="651" insertionLength="11" int_docASTNodeCount="4859" int_docActiveCodeLength="28797" int_docExpressionCount="3335" int_docLength="30943" length="1" offset="23518" startLine="651" starttimestamp="1612813070441" timestamp="7762383">
    <deletedText><![CDATA[a]]></deletedText>
    <insertedText><![CDATA[ArrayList<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6453" _type="Replace" date="Mon Feb 08 16:47:12 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28808" docExpressionCount="3335" docLength="30954" endLine="651" insertionLength="2" int_docASTNodeCount="4859" int_docActiveCodeLength="28806" int_docExpressionCount="3335" int_docLength="30952" length="2" offset="23529" startLine="651" starttimestamp="1612813070441" timestamp="7762395">
    <deletedText><![CDATA[rr]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6455" _type="Insert" date="Mon Feb 08 16:47:13 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28818" docExpressionCount="3335" docLength="30964" length="10" offset="23531" repeat="5" starttimestamp="1612813070441" timestamp="7763243" timestamp2="7764797">
    <text><![CDATA[;
				nex]]></text>
  </DocumentChange>
  <DocumentChange __id="6467" _type="Replace" date="Mon Feb 08 16:47:15 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28823" docExpressionCount="3335" docLength="30969" endLine="652" insertionLength="8" int_docASTNodeCount="4996" int_docActiveCodeLength="28815" int_docExpressionCount="3427" int_docLength="30961" length="3" offset="23538" startLine="652" starttimestamp="1612813070441" timestamp="7764895">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6469" _type="Insert" date="Mon Feb 08 16:47:15 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28826" docExpressionCount="3335" docLength="30972" length="3" offset="23546" repeat="3" starttimestamp="1612813070441" timestamp="7765319" timestamp2="7766152">
    <text><![CDATA[.pu]]></text>
  </DocumentChange>
  <Command __id="6460" _type="PauseCommand" date="Mon Feb 08 16:47:14 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7764457">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1112]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6461" _type="InsertStringCommand" date="Mon Feb 08 16:47:14 EST 2021" starttimestamp="1612813070441" timestamp="7764462" timestamp2="7764462">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6463" _type="InsertStringCommand" date="Mon Feb 08 16:47:14 EST 2021" starttimestamp="1612813070441" timestamp="7764554" timestamp2="7764554">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6464" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:15 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7764648" />
  <Command __id="6466" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:15 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7764888" />
  <Command __id="6468" _type="InsertStringCommand" date="Mon Feb 08 16:47:15 EST 2021" starttimestamp="1612813070441" timestamp="7764903" timestamp2="7764903">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6470" _type="InsertStringCommand" date="Mon Feb 08 16:47:15 EST 2021" starttimestamp="1612813070441" timestamp="7765332" timestamp2="7765332">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6471" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:15 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7765418" />
  <Command __id="6474" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:16 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7766187" />
  <Command __id="6476" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:47:16 EST 2021" starttimestamp="1612813070441" timestamp="7766504" />
  <Command __id="6478" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:47:17 EST 2021" starttimestamp="1612813070441" timestamp="7766622" />
  <Command __id="6480" _type="InsertStringCommand" date="Mon Feb 08 16:47:17 EST 2021" starttimestamp="1612813070441" timestamp="7766743" timestamp2="7766743">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6482" _type="InsertStringCommand" date="Mon Feb 08 16:47:17 EST 2021" starttimestamp="1612813070441" timestamp="7766799" timestamp2="7766799">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6483" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:17 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7766841" />
  <Command __id="6484" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:17 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7766950" />
  <Command __id="6486" _type="InsertStringCommand" date="Mon Feb 08 16:47:17 EST 2021" starttimestamp="1612813070441" timestamp="7767059" timestamp2="7767059">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6488" _type="PauseCommand" date="Mon Feb 08 16:47:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7768364">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1305]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="6489" _type="InsertStringCommand" date="Mon Feb 08 16:47:18 EST 2021" starttimestamp="1612813070441" timestamp="7768374" timestamp2="7768374">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6491" _type="InsertStringCommand" date="Mon Feb 08 16:47:18 EST 2021" starttimestamp="1612813070441" timestamp="7768489" timestamp2="7768489">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6492" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7768493" />
  <Command __id="6493" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7768865" />
  <Command __id="6495" _type="InsertStringCommand" date="Mon Feb 08 16:47:19 EST 2021" starttimestamp="1612813070441" timestamp="7769162" timestamp2="7769162">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6497" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:47:20 EST 2021" starttimestamp="1612813070441" timestamp="7769958" />
  <Command __id="6498" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:47:20 EST 2021" starttimestamp="1612813070441" timestamp="7770474" />
  <Command __id="6499" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:47:21 EST 2021" starttimestamp="1612813070441" timestamp="7770687" />
  <Command __id="6501" _type="InsertStringCommand" date="Mon Feb 08 16:47:21 EST 2021" starttimestamp="1612813070441" timestamp="7771171" timestamp2="7771171">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6502" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:47:21 EST 2021" starttimestamp="1612813070441" timestamp="7771541" />
  <Command __id="6503" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:47:22 EST 2021" starttimestamp="1612813070441" timestamp="7771670" />
  <Command __id="6505" _type="PauseCommand" date="Mon Feb 08 16:47:30 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7780440">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8770]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6506" _type="InsertStringCommand" date="Mon Feb 08 16:47:30 EST 2021" starttimestamp="1612813070441" timestamp="7780445" timestamp2="7780445">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6508" _type="InsertStringCommand" date="Mon Feb 08 16:47:30 EST 2021" starttimestamp="1612813070441" timestamp="7780521" timestamp2="7780521">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6509" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7780564" />
  <Command __id="6511" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7780878" />
  <Command __id="6513" _type="InsertStringCommand" date="Mon Feb 08 16:47:31 EST 2021" starttimestamp="1612813070441" timestamp="7780891" timestamp2="7780891">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6515" _type="InsertStringCommand" date="Mon Feb 08 16:47:32 EST 2021" starttimestamp="1612813070441" timestamp="7781780" timestamp2="7781780">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6516" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:47:32 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7781873" />
  <Command __id="6520" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:33 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7783177" />
  <Command __id="6522" _type="InsertStringCommand" date="Mon Feb 08 16:47:33 EST 2021" starttimestamp="1612813070441" timestamp="7783293" timestamp2="7783293">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6524" _type="PauseCommand" date="Mon Feb 08 16:47:44 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7794353">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[11060]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="6523" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:44 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7794353" />
  <Command __id="6525" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:47:44 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7794401" />
  <Command __id="6527" _type="PauseCommand" date="Mon Feb 08 16:48:15 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="7825420">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[31019]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6526" _type="MoveCaretCommand" caretOffset="3668" date="Mon Feb 08 16:48:15 EST 2021" docOffset="23610" starttimestamp="1612813070441" timestamp="7825420" />
  <Command __id="6529" _type="InsertStringCommand" date="Mon Feb 08 16:48:16 EST 2021" starttimestamp="1612813070441" timestamp="7826040" timestamp2="7826040">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6531" _type="InsertStringCommand" date="Mon Feb 08 16:48:17 EST 2021" starttimestamp="1612813070441" timestamp="7826828" timestamp2="7826828">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="6533" _type="InsertStringCommand" date="Mon Feb 08 16:48:17 EST 2021" starttimestamp="1612813070441" timestamp="7827054" timestamp2="7827054">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6535" _type="InsertStringCommand" date="Mon Feb 08 16:48:17 EST 2021" starttimestamp="1612813070441" timestamp="7827101" timestamp2="7827101">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6537" _type="InsertStringCommand" date="Mon Feb 08 16:48:17 EST 2021" starttimestamp="1612813070441" timestamp="7827136" timestamp2="7827136">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6539" _type="InsertStringCommand" date="Mon Feb 08 16:48:17 EST 2021" starttimestamp="1612813070441" timestamp="7827173" timestamp2="7827173">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6540" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:17 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7827216" />
  <Command __id="6542" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:17 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7827399" />
  <Command __id="6544" _type="InsertStringCommand" date="Mon Feb 08 16:48:17 EST 2021" starttimestamp="1612813070441" timestamp="7827412" timestamp2="7827412">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6546" _type="PauseCommand" date="Mon Feb 08 16:48:20 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7830385">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2973]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6547" _type="InsertStringCommand" date="Mon Feb 08 16:48:20 EST 2021" starttimestamp="1612813070441" timestamp="7830392" timestamp2="7830392">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="6548" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7830432" />
  <Command __id="6550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7830537" />
  <Command __id="6552" _type="InsertStringCommand" date="Mon Feb 08 16:48:21 EST 2021" starttimestamp="1612813070441" timestamp="7830955" timestamp2="7830955">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6553" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7830997" />
  <Command __id="6554" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7831022" />
  <Command __id="6556" _type="PauseCommand" date="Mon Feb 08 16:48:25 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7834601">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3579]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6557" _type="InsertStringCommand" date="Mon Feb 08 16:48:25 EST 2021" starttimestamp="1612813070441" timestamp="7834608" timestamp2="7834608">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6559" _type="InsertStringCommand" date="Mon Feb 08 16:48:25 EST 2021" starttimestamp="1612813070441" timestamp="7834792" timestamp2="7834792">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6561" _type="InsertStringCommand" date="Mon Feb 08 16:48:25 EST 2021" starttimestamp="1612813070441" timestamp="7834898" timestamp2="7834898">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6563" _type="InsertStringCommand" date="Mon Feb 08 16:48:25 EST 2021" starttimestamp="1612813070441" timestamp="7835418" timestamp2="7835418">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6564" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:25 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7835510" />
  <DocumentChange __id="6475" _type="Delete" date="Mon Feb 08 16:47:16 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28824" docExpressionCount="3335" docLength="30970" endLine="652" length="2" offset="23547" repeat="2" startLine="652" starttimestamp="1612813070441" timestamp="7766501" timestamp2="7766620">
    <text><![CDATA[pu]]></text>
  </DocumentChange>
  <DocumentChange __id="6479" _type="Insert" date="Mon Feb 08 16:47:17 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28826" docExpressionCount="3335" docLength="30972" length="2" offset="23547" repeat="2" starttimestamp="1612813070441" timestamp="7766727" timestamp2="7766794">
    <text><![CDATA[ad]]></text>
  </DocumentChange>
  <DocumentChange __id="6485" _type="Replace" date="Mon Feb 08 16:47:17 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28830" docExpressionCount="3335" docLength="30976" endLine="652" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28824" int_docExpressionCount="3335" int_docLength="30970" length="2" offset="23547" startLine="652" starttimestamp="1612813070441" timestamp="7766958">
    <deletedText><![CDATA[ad]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6487" _type="Replace" date="Mon Feb 08 16:47:18 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28830" docExpressionCount="3335" docLength="30976" endLine="652" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28829" int_docExpressionCount="3335" int_docLength="30975" length="1" offset="23551" startLine="652" starttimestamp="1612813070441" timestamp="7768364">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6490" _type="Replace" date="Mon Feb 08 16:47:18 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28830" docExpressionCount="3335" docLength="30976" endLine="652" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28829" int_docExpressionCount="3335" int_docLength="30975" length="1" offset="23551" startLine="652" starttimestamp="1612813070441" timestamp="7768470">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6494" _type="Insert" date="Mon Feb 08 16:47:19 EST 2021" docASTNodeCount="5001" docActiveCodeLength="28831" docExpressionCount="3431" docLength="30977" length="1" offset="23555" starttimestamp="1612813070441" timestamp="7769155">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6496" _type="Delete" date="Mon Feb 08 16:47:20 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28830" docExpressionCount="3335" docLength="30976" endLine="653" length="1" offset="23555" startLine="653" starttimestamp="1612813070441" timestamp="7769956">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6500" _type="Insert" date="Mon Feb 08 16:47:21 EST 2021" docASTNodeCount="5001" docActiveCodeLength="28831" docExpressionCount="3431" docLength="30977" length="1" offset="23553" starttimestamp="1612813070441" timestamp="7771163">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6504" _type="Insert" date="Mon Feb 08 16:47:30 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28834" docExpressionCount="3335" docLength="30980" length="3" offset="23617" repeat="3" starttimestamp="1612813070441" timestamp="7780440" timestamp2="7780729">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <DocumentChange __id="6512" _type="Replace" date="Mon Feb 08 16:47:31 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28839" docExpressionCount="3335" docLength="30985" endLine="654" insertionLength="8" int_docASTNodeCount="5001" int_docActiveCodeLength="28831" int_docExpressionCount="3431" int_docLength="30977" length="3" offset="23617" startLine="654" starttimestamp="1612813070441" timestamp="7780884">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6514" _type="Insert" date="Mon Feb 08 16:47:32 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28843" docExpressionCount="3335" docLength="30989" length="4" offset="23625" repeat="4" starttimestamp="1612813070441" timestamp="7781775" timestamp2="7782943">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <DocumentChange __id="6521" _type="Replace" date="Mon Feb 08 16:47:33 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28846" docExpressionCount="3335" docLength="30992" endLine="654" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28840" int_docExpressionCount="3335" int_docLength="30986" length="3" offset="23626" startLine="654" starttimestamp="1612813070441" timestamp="7783184">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6528" _type="Insert" date="Mon Feb 08 16:48:16 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28859" docExpressionCount="3335" docLength="31005" length="13" offset="23610" repeat="7" starttimestamp="1612813070441" timestamp="7826025" timestamp2="7827387">
    <text><![CDATA[
					String]]></text>
  </DocumentChange>
  <DocumentChange __id="6543" _type="Replace" date="Mon Feb 08 16:48:17 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28860" docExpressionCount="3335" docLength="31006" endLine="654" insertionLength="7" int_docASTNodeCount="4859" int_docActiveCodeLength="28853" int_docExpressionCount="3335" int_docLength="30999" length="6" offset="23617" startLine="654" starttimestamp="1612813070441" timestamp="7827405">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6545" _type="Insert" date="Mon Feb 08 16:48:20 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28863" docExpressionCount="3335" docLength="31009" length="3" offset="23624" repeat="3" starttimestamp="1612813070441" timestamp="7830385" timestamp2="7830950">
    <text><![CDATA[url]]></text>
  </DocumentChange>
  <DocumentChange __id="6555" _type="Insert" date="Mon Feb 08 16:48:25 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28867" docExpressionCount="3335" docLength="31013" length="4" offset="23627" repeat="4" starttimestamp="1612813070441" timestamp="7834601" timestamp2="7835411">
    <text><![CDATA[ = n]]></text>
  </DocumentChange>
  <DocumentChange __id="6565" _type="Delete" date="Mon Feb 08 16:48:26 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28866" docExpressionCount="3335" docLength="31012" endLine="654" length="1" offset="23630" startLine="654" starttimestamp="1612813070441" timestamp="7835814">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="6566" _type="Insert" date="Mon Feb 08 16:48:27 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28870" docExpressionCount="3335" docLength="31016" length="4" offset="23630" repeat="4" starttimestamp="1612813070441" timestamp="7837116" timestamp2="7837608">
    <text><![CDATA[sear]]></text>
  </DocumentChange>
  <DocumentChange __id="6572" _type="Replace" date="Mon Feb 08 16:48:28 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28874" docExpressionCount="3335" docLength="31020" endLine="654" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28866" int_docExpressionCount="3335" int_docLength="31012" length="4" offset="23630" startLine="654" starttimestamp="1612813070441" timestamp="7838108">
    <deletedText><![CDATA[sear]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6574" _type="Insert" date="Mon Feb 08 16:48:28 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28878" docExpressionCount="3335" docLength="31024" length="4" offset="23638" repeat="4" starttimestamp="1612813070441" timestamp="7838312" timestamp2="7838637">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6581" _type="Replace" date="Mon Feb 08 16:48:29 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28883" docExpressionCount="3335" docLength="31029" endLine="654" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28875" int_docExpressionCount="3335" int_docLength="31021" length="3" offset="23639" startLine="654" starttimestamp="1612813070441" timestamp="7838758">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6583" _type="Replace" date="Mon Feb 08 16:48:29 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28881" docExpressionCount="3335" docLength="31027" endLine="654" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28880" int_docExpressionCount="3335" int_docLength="31026" length="3" offset="23643" startLine="654" starttimestamp="1612813070441" timestamp="7839382">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6587" _type="Insert" date="Mon Feb 08 16:48:30 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28885" docExpressionCount="3335" docLength="31031" length="4" offset="23645" repeat="4" starttimestamp="1612813070441" timestamp="7840557" timestamp2="7840968">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6594" _type="Replace" date="Mon Feb 08 16:48:31 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28892" docExpressionCount="3335" docLength="31038" endLine="654" insertionLength="10" int_docASTNodeCount="4859" int_docActiveCodeLength="28882" int_docExpressionCount="3335" int_docLength="31028" length="3" offset="23646" startLine="654" starttimestamp="1612813070441" timestamp="7841363">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(index)]]></insertedText>
  </DocumentChange>
  <Command __id="6567" _type="PauseCommand" date="Mon Feb 08 16:48:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7837116">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1302]]></rest>
    <prev><![CDATA[Delete]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6571" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:28 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7838101" />
  <Command __id="6573" _type="InsertStringCommand" date="Mon Feb 08 16:48:28 EST 2021" starttimestamp="1612813070441" timestamp="7838116" timestamp2="7838116">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6575" _type="InsertStringCommand" date="Mon Feb 08 16:48:28 EST 2021" starttimestamp="1612813070441" timestamp="7838316" timestamp2="7838316">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6576" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:28 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7838358" />
  <Command __id="6580" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:29 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7838750" />
  <Command __id="6582" _type="InsertStringCommand" date="Mon Feb 08 16:48:29 EST 2021" starttimestamp="1612813070441" timestamp="7838899" timestamp2="7838899">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6584" _type="InsertStringCommand" date="Mon Feb 08 16:48:29 EST 2021" starttimestamp="1612813070441" timestamp="7839391" timestamp2="7839391">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6585" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7839476" />
  <Command __id="6586" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7839943" />
  <Command __id="6588" _type="InsertStringCommand" date="Mon Feb 08 16:48:31 EST 2021" starttimestamp="1612813070441" timestamp="7840566" timestamp2="7840566">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6589" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:31 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7840605" />
  <Command __id="6593" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7841355" />
  <Command __id="6595" _type="InsertStringCommand" date="Mon Feb 08 16:48:31 EST 2021" starttimestamp="1612813070441" timestamp="7841482" timestamp2="7841482">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6597" _type="InsertStringCommand" date="Mon Feb 08 16:48:32 EST 2021" starttimestamp="1612813070441" timestamp="7842127" timestamp2="7842127">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6598" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:32 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7842228" />
  <Command __id="6599" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:32 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7842440" />
  <Command __id="6600" _type="InsertStringCommand" date="Mon Feb 08 16:48:32 EST 2021" starttimestamp="1612813070441" timestamp="7842444" timestamp2="7842444">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6601" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:48:33 EST 2021" starttimestamp="1612813070441" timestamp="7842812" />
  <Command __id="6603" _type="InsertStringCommand" date="Mon Feb 08 16:48:33 EST 2021" starttimestamp="1612813070441" timestamp="7843216" timestamp2="7843216">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6605" _type="PauseCommand" date="Mon Feb 08 16:48:47 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7857359">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[14143]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6606" _type="InsertStringCommand" date="Mon Feb 08 16:48:47 EST 2021" starttimestamp="1612813070441" timestamp="7857376" timestamp2="7857376">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6608" _type="PauseCommand" date="Mon Feb 08 16:48:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7859282">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1906]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="6609" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 08 16:48:49 EST 2021" starttimestamp="1612813070441" timestamp="7859284" />
  <Command __id="6610" _type="MoveCaretCommand" caretOffset="3733" date="Mon Feb 08 16:48:50 EST 2021" docOffset="23675" starttimestamp="1612813070441" timestamp="7859704" />
  <Command __id="6612" _type="InsertStringCommand" date="Mon Feb 08 16:48:50 EST 2021" starttimestamp="1612813070441" timestamp="7860260" timestamp2="7860260">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6613" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:48:51 EST 2021" starttimestamp="1612813070441" timestamp="7860596" />
  <Command __id="6614" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:48:51 EST 2021" starttimestamp="1612813070441" timestamp="7860744" />
  <Command __id="6616" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:48:51 EST 2021" starttimestamp="1612813070441" timestamp="7861115" />
  <Command __id="6618" _type="PauseCommand" date="Mon Feb 08 16:48:52 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7862443">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1328]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6619" _type="InsertStringCommand" date="Mon Feb 08 16:48:52 EST 2021" starttimestamp="1612813070441" timestamp="7862453" timestamp2="7862453">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="6620" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:48:52 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7862491" />
  <Command __id="6627" _type="PauseCommand" date="Mon Feb 08 16:48:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7865736">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1768]]></rest>
    <prev><![CDATA[Delete]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="6626" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:48:56 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7865736" />
  <Command __id="6629" _type="PauseCommand" date="Mon Feb 08 16:49:11 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="7880900">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[15164]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6630" _type="InsertStringCommand" date="Mon Feb 08 16:49:11 EST 2021" starttimestamp="1612813070441" timestamp="7880909" timestamp2="7880909">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6631" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7880948" />
  <Command __id="6634" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7881490" />
  <Command __id="6636" _type="InsertStringCommand" date="Mon Feb 08 16:49:11 EST 2021" starttimestamp="1612813070441" timestamp="7881504" timestamp2="7881504">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6638" _type="PauseCommand" date="Mon Feb 08 16:49:13 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7882752">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1248]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6639" _type="InsertStringCommand" date="Mon Feb 08 16:49:13 EST 2021" starttimestamp="1612813070441" timestamp="7882757" timestamp2="7882757">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6640" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7882799" />
  <Command __id="6644" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7883653" />
  <Command __id="6646" _type="InsertStringCommand" date="Mon Feb 08 16:49:14 EST 2021" starttimestamp="1612813070441" timestamp="7883785" timestamp2="7883785">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6648" _type="PauseCommand" date="Mon Feb 08 16:49:15 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7885041">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1256]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="6649" _type="InsertStringCommand" date="Mon Feb 08 16:49:15 EST 2021" starttimestamp="1612813070441" timestamp="7885050" timestamp2="7885050">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6650" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:15 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7885138" />
  <Command __id="6651" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:16 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7885662" />
  <Command __id="6653" _type="PauseCommand" date="Mon Feb 08 16:49:18 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7888105">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2443]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6652" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:49:18 EST 2021" starttimestamp="1612813070441" timestamp="7888105" />
  <Command __id="6655" _type="InsertStringCommand" date="Mon Feb 08 16:49:19 EST 2021" starttimestamp="1612813070441" timestamp="7888560" timestamp2="7888560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6657" _type="InsertStringCommand" date="Mon Feb 08 16:49:19 EST 2021" starttimestamp="1612813070441" timestamp="7889121" timestamp2="7889121">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6659" _type="InsertStringCommand" date="Mon Feb 08 16:49:19 EST 2021" starttimestamp="1612813070441" timestamp="7889171" timestamp2="7889171">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6660" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7889212" />
  <Command __id="6665" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7890958" />
  <Command __id="6667" _type="InsertStringCommand" date="Mon Feb 08 16:49:21 EST 2021" starttimestamp="1612813070441" timestamp="7890971" timestamp2="7890971">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6669" _type="InsertStringCommand" date="Mon Feb 08 16:49:21 EST 2021" starttimestamp="1612813070441" timestamp="7891237" timestamp2="7891237">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6670" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:21 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7891279" />
  <Command __id="6674" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:22 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7891721" />
  <Command __id="6676" _type="InsertStringCommand" date="Mon Feb 08 16:49:22 EST 2021" starttimestamp="1612813070441" timestamp="7891850" timestamp2="7891850">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6678" _type="PauseCommand" date="Mon Feb 08 16:49:23 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7893245">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1395]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="6677" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:23 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7893245" />
  <DocumentChange __id="6596" _type="Replace" date="Mon Feb 08 16:48:32 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28888" docExpressionCount="3335" docLength="31034" endLine="654" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28887" int_docExpressionCount="3335" int_docLength="31033" length="5" offset="23650" startLine="654" starttimestamp="1612813070441" timestamp="7842117">
    <deletedText><![CDATA[index]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6602" _type="Insert" date="Mon Feb 08 16:48:33 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28889" docExpressionCount="3335" docLength="31035" length="1" offset="23652" starttimestamp="1612813070441" timestamp="7843207">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6604" _type="Insert" date="Mon Feb 08 16:48:47 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28896" docExpressionCount="3335" docLength="31042" length="7" offset="23653" starttimestamp="1612813070441" timestamp="7857359">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="6607" _type="Delete" date="Mon Feb 08 16:48:49 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28889" docExpressionCount="3335" docLength="31035" endLine="656" length="7" offset="23655" startLine="655" starttimestamp="1612813070441" timestamp="7859282">
    <text><![CDATA[					
]]></text>
  </DocumentChange>
  <DocumentChange __id="6611" _type="Insert" date="Mon Feb 08 16:48:50 EST 2021" docASTNodeCount="5018" docActiveCodeLength="28890" docExpressionCount="3444" docLength="31036" length="1" offset="23675" starttimestamp="1612813070441" timestamp="7860252">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6615" _type="Delete" date="Mon Feb 08 16:48:51 EST 2021" docASTNodeCount="5017" docActiveCodeLength="28889" docExpressionCount="3443" docLength="31035" endLine="655" length="1" offset="23673" startLine="655" starttimestamp="1612813070441" timestamp="7861109">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6617" _type="Insert" date="Mon Feb 08 16:48:52 EST 2021" docASTNodeCount="5018" docActiveCodeLength="28892" docExpressionCount="3444" docLength="31038" length="3" offset="23673" repeat="3" starttimestamp="1612813070441" timestamp="7862443" timestamp2="7862706">
    <text><![CDATA[url]]></text>
  </DocumentChange>
  <DocumentChange __id="6623" _type="Delete" date="Mon Feb 08 16:48:54 EST 2021" docASTNodeCount="5017" docActiveCodeLength="28889" docExpressionCount="3443" docLength="31035" endLine="655" length="3" offset="23673" repeat="3" startLine="655" starttimestamp="1612813070441" timestamp="7863678" timestamp2="7863968">
    <text><![CDATA[url]]></text>
  </DocumentChange>
  <DocumentChange __id="6628" _type="Insert" date="Mon Feb 08 16:49:11 EST 2021" docASTNodeCount="5018" docActiveCodeLength="28892" docExpressionCount="3444" docLength="31038" length="3" offset="23673" repeat="3" starttimestamp="1612813070441" timestamp="7880900" timestamp2="7881128">
    <text><![CDATA[tit]]></text>
  </DocumentChange>
  <DocumentChange __id="6635" _type="Replace" date="Mon Feb 08 16:49:11 EST 2021" docASTNodeCount="5018" docActiveCodeLength="28895" docExpressionCount="3444" docLength="31041" endLine="655" insertionLength="6" int_docASTNodeCount="5017" int_docActiveCodeLength="28889" int_docExpressionCount="3443" int_docLength="31035" length="3" offset="23673" startLine="655" starttimestamp="1612813070441" timestamp="7881496">
    <deletedText><![CDATA[tit]]></deletedText>
    <insertedText><![CDATA[titles]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6637" _type="Insert" date="Mon Feb 08 16:49:13 EST 2021" docASTNodeCount="5020" docActiveCodeLength="28899" docExpressionCount="3446" docLength="31045" length="4" offset="23679" repeat="4" starttimestamp="1612813070441" timestamp="7882752" timestamp2="7883458">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6645" _type="Replace" date="Mon Feb 08 16:49:14 EST 2021" docASTNodeCount="5021" docActiveCodeLength="28904" docExpressionCount="3447" docLength="31050" endLine="655" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28896" int_docExpressionCount="3335" int_docLength="31042" length="3" offset="23680" startLine="655" starttimestamp="1612813070441" timestamp="7883660">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6647" _type="Replace" date="Mon Feb 08 16:49:15 EST 2021" docASTNodeCount="5021" docActiveCodeLength="28902" docExpressionCount="3447" docLength="31048" endLine="655" insertionLength="1" int_docASTNodeCount="5020" int_docActiveCodeLength="28901" int_docExpressionCount="3446" int_docLength="31047" length="3" offset="23684" startLine="655" starttimestamp="1612813070441" timestamp="7885041">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6654" _type="Insert" date="Mon Feb 08 16:49:18 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28912" docExpressionCount="3335" docLength="31058" length="10" offset="23688" repeat="4" starttimestamp="1612813070441" timestamp="7888549" timestamp2="7889359">
    <text><![CDATA[
					nel]]></text>
  </DocumentChange>
  <DocumentChange __id="6662" _type="Delete" date="Mon Feb 08 16:49:20 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28911" docExpressionCount="3335" docLength="31057" endLine="656" length="1" offset="23697" startLine="656" starttimestamp="1612813070441" timestamp="7890121">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="6663" _type="Insert" date="Mon Feb 08 16:49:20 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28913" docExpressionCount="3335" docLength="31059" length="2" offset="23697" repeat="2" starttimestamp="1612813070441" timestamp="7890211" timestamp2="7890328">
    <text><![CDATA[xl]]></text>
  </DocumentChange>
  <DocumentChange __id="6666" _type="Replace" date="Mon Feb 08 16:49:21 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28917" docExpressionCount="3335" docLength="31063" endLine="656" insertionLength="8" int_docASTNodeCount="5021" int_docActiveCodeLength="28909" int_docExpressionCount="3447" int_docLength="31055" length="4" offset="23695" startLine="656" starttimestamp="1612813070441" timestamp="7890964">
    <deletedText><![CDATA[nexl]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6668" _type="Insert" date="Mon Feb 08 16:49:21 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28921" docExpressionCount="3335" docLength="31067" length="4" offset="23703" repeat="4" starttimestamp="1612813070441" timestamp="7891232" timestamp2="7891598">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <DocumentChange __id="6675" _type="Replace" date="Mon Feb 08 16:49:22 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28924" docExpressionCount="3335" docLength="31070" endLine="656" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28918" int_docExpressionCount="3335" int_docLength="31064" length="3" offset="23704" startLine="656" starttimestamp="1612813070441" timestamp="7891728">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6679" _type="Replace" date="Mon Feb 08 16:49:27 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28924" docExpressionCount="3335" docLength="31070" endLine="656" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28923" int_docExpressionCount="3335" int_docLength="31069" length="1" offset="23708" startLine="656" starttimestamp="1612813070441" timestamp="7896870">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[u]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6683" _type="Insert" date="Mon Feb 08 16:49:27 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28926" docExpressionCount="3335" docLength="31072" length="2" offset="23709" repeat="2" starttimestamp="1612813070441" timestamp="7897059" timestamp2="7897070">
    <text><![CDATA[rl]]></text>
  </DocumentChange>
  <DocumentChange __id="6688" _type="Insert" date="Mon Feb 08 16:49:28 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28940" docExpressionCount="3335" docLength="31086" length="14" offset="23712" repeat="8" starttimestamp="1612813070441" timestamp="7898335" timestamp2="7899576">
    <text><![CDATA[;
					nexlin]]></text>
  </DocumentChange>
  <DocumentChange __id="6701" _type="Replace" date="Mon Feb 08 16:49:30 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28942" docExpressionCount="3335" docLength="31088" endLine="657" insertionLength="8" int_docASTNodeCount="5026" int_docActiveCodeLength="28934" int_docExpressionCount="3451" int_docLength="31080" length="6" offset="23720" startLine="657" starttimestamp="1612813070441" timestamp="7899786">
    <deletedText><![CDATA[nexlin]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6703" _type="Insert" date="Mon Feb 08 16:49:30 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28946" docExpressionCount="3335" docLength="31092" length="4" offset="23728" repeat="4" starttimestamp="1612813070441" timestamp="7899994" timestamp2="7900377">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <Command __id="6680" _type="PauseCommand" date="Mon Feb 08 16:49:27 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7896870">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3625]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="6681" _type="InsertStringCommand" date="Mon Feb 08 16:49:27 EST 2021" starttimestamp="1612813070441" timestamp="7896903" timestamp2="7896903">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="6682" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:27 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7896915" />
  <Command __id="6685" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:28 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7897671" />
  <Command __id="6686" _type="InsertStringCommand" date="Mon Feb 08 16:49:28 EST 2021" starttimestamp="1612813070441" timestamp="7897675" timestamp2="7897675">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6687" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:49:28 EST 2021" starttimestamp="1612813070441" timestamp="7897974" />
  <Command __id="6689" _type="InsertStringCommand" date="Mon Feb 08 16:49:28 EST 2021" starttimestamp="1612813070441" timestamp="7898344" timestamp2="7898344">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6691" _type="InsertStringCommand" date="Mon Feb 08 16:49:28 EST 2021" starttimestamp="1612813070441" timestamp="7898515" timestamp2="7898515">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6693" _type="InsertStringCommand" date="Mon Feb 08 16:49:29 EST 2021" starttimestamp="1612813070441" timestamp="7899050" timestamp2="7899050">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6694" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:29 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7899093" />
  <Command __id="6700" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7899780" />
  <Command __id="6702" _type="InsertStringCommand" date="Mon Feb 08 16:49:30 EST 2021" starttimestamp="1612813070441" timestamp="7899794" timestamp2="7899794">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6704" _type="InsertStringCommand" date="Mon Feb 08 16:49:30 EST 2021" starttimestamp="1612813070441" timestamp="7899999" timestamp2="7899999">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6705" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:30 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7900040" />
  <Command __id="6709" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:30 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7900455" />
  <Command __id="6711" _type="InsertStringCommand" date="Mon Feb 08 16:49:31 EST 2021" starttimestamp="1612813070441" timestamp="7900576" timestamp2="7900576">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6712" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:31 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7901341" />
  <Command __id="6714" _type="PauseCommand" date="Mon Feb 08 16:49:37 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7907111">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5770]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="6715" _type="InsertStringCommand" date="Mon Feb 08 16:49:37 EST 2021" starttimestamp="1612813070441" timestamp="7907117" timestamp2="7907117">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6716" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:37 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7907154" />
  <Command __id="6718" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:38 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7907988" />
  <Command __id="6720" _type="InsertStringCommand" date="Mon Feb 08 16:49:38 EST 2021" starttimestamp="1612813070441" timestamp="7908142" timestamp2="7908142">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="6721" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:49:38 EST 2021" starttimestamp="1612813070441" timestamp="7908356" />
  <Command __id="6723" _type="InsertStringCommand" date="Mon Feb 08 16:49:39 EST 2021" starttimestamp="1612813070441" timestamp="7908784" timestamp2="7908784">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6725" _type="InsertStringCommand" date="Mon Feb 08 16:49:39 EST 2021" starttimestamp="1612813070441" timestamp="7908912" timestamp2="7908912">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6727" _type="InsertStringCommand" date="Mon Feb 08 16:49:39 EST 2021" starttimestamp="1612813070441" timestamp="7909381" timestamp2="7909381">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6728" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:39 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7909416" />
  <Command __id="6735" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:40 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7910035" />
  <Command __id="6737" _type="InsertStringCommand" date="Mon Feb 08 16:49:40 EST 2021" starttimestamp="1612813070441" timestamp="7910048" timestamp2="7910048">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6738" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 08 16:49:41 EST 2021" starttimestamp="1612813070441" timestamp="7910972" />
  <Command __id="6739" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:49:41 EST 2021" starttimestamp="1612813070441" timestamp="7911312" />
  <Command __id="6740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:49:42 EST 2021" starttimestamp="1612813070441" timestamp="7911588" />
  <Command __id="6741" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:49:42 EST 2021" starttimestamp="1612813070441" timestamp="7911729" />
  <Command __id="6743" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:49:42 EST 2021" starttimestamp="1612813070441" timestamp="7912135" />
  <Command __id="6745" _type="InsertStringCommand" date="Mon Feb 08 16:49:43 EST 2021" starttimestamp="1612813070441" timestamp="7912685" timestamp2="7912685">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6746" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 08 16:49:43 EST 2021" starttimestamp="1612813070441" timestamp="7913392" />
  <Command __id="6748" _type="InsertStringCommand" date="Mon Feb 08 16:49:44 EST 2021" starttimestamp="1612813070441" timestamp="7914042" timestamp2="7914042">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6749" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:44 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7914082" />
  <Command __id="6753" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:45 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7914939" />
  <Command __id="6755" _type="InsertStringCommand" date="Mon Feb 08 16:49:45 EST 2021" starttimestamp="1612813070441" timestamp="7915066" timestamp2="7915066">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6757" _type="PauseCommand" date="Mon Feb 08 16:49:47 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7916685">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1619]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6756" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:49:47 EST 2021" starttimestamp="1612813070441" timestamp="7916685" />
  <Command __id="6759" _type="InsertStringCommand" date="Mon Feb 08 16:49:47 EST 2021" starttimestamp="1612813070441" timestamp="7917003" timestamp2="7917003">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6760" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:49:48 EST 2021" starttimestamp="1612813070441" timestamp="7918000" />
  <Command __id="6762" _type="InsertStringCommand" date="Mon Feb 08 16:49:48 EST 2021" starttimestamp="1612813070441" timestamp="7918507" timestamp2="7918507">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="6765" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:49:49 EST 2021" starttimestamp="1612813070441" timestamp="7918819" />
  <Command __id="6767" _type="InsertStringCommand" date="Mon Feb 08 16:49:49 EST 2021" starttimestamp="1612813070441" timestamp="7918966" timestamp2="7918966">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6768" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:49:49 EST 2021" starttimestamp="1612813070441" timestamp="7919260" />
  <Command __id="6769" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:49:50 EST 2021" starttimestamp="1612813070441" timestamp="7919563" />
  <Command __id="6771" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:49:50 EST 2021" starttimestamp="1612813070441" timestamp="7919901" />
  <Command __id="6773" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:49:50 EST 2021" starttimestamp="1612813070441" timestamp="7920012" />
  <Command __id="6775" _type="InsertStringCommand" date="Mon Feb 08 16:49:50 EST 2021" starttimestamp="1612813070441" timestamp="7920385" timestamp2="7920385">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6777" _type="PauseCommand" date="Mon Feb 08 16:49:52 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7922154">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1769]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="6779" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:49:52 EST 2021" starttimestamp="1612813070441" timestamp="7922175" />
  <Command __id="6781" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:49:52 EST 2021" starttimestamp="1612813070441" timestamp="7922277" />
  <Command __id="6783" _type="InsertStringCommand" date="Mon Feb 08 16:49:53 EST 2021" starttimestamp="1612813070441" timestamp="7923254" timestamp2="7923254">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="6785" _type="PauseCommand" date="Mon Feb 08 16:49:54 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7924310">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1056]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="6786" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 16:49:54 EST 2021" starttimestamp="1612813070441" timestamp="7924317" />
  <Command __id="6788" _type="PauseCommand" date="Mon Feb 08 16:49:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7926002">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1685]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6789" _type="InsertStringCommand" date="Mon Feb 08 16:49:56 EST 2021" starttimestamp="1612813070441" timestamp="7926011" timestamp2="7926011">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6790" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:49:56 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7926050" />
  <Command __id="6793" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:49:57 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7927029" />
  <Command __id="6795" _type="InsertStringCommand" date="Mon Feb 08 16:49:57 EST 2021" starttimestamp="1612813070441" timestamp="7927044" timestamp2="7927044">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6797" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:49:58 EST 2021" starttimestamp="1612813070441" timestamp="7927678" />
  <Command __id="6799" _type="PauseCommand" date="Mon Feb 08 16:50:06 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7935683">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8005]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6800" _type="InsertStringCommand" date="Mon Feb 08 16:50:06 EST 2021" starttimestamp="1612813070441" timestamp="7935699" timestamp2="7935699">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6801" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:50:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7935731" />
  <Command __id="6807" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:50:07 EST 2021" starttimestamp="1612813070441" timestamp="7936880" />
  <DocumentChange __id="6710" _type="Replace" date="Mon Feb 08 16:49:30 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28949" docExpressionCount="3335" docLength="31095" endLine="657" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28943" int_docExpressionCount="3335" int_docLength="31089" length="3" offset="23729" startLine="657" starttimestamp="1612813070441" timestamp="7900462">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6713" _type="Replace" date="Mon Feb 08 16:49:37 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28949" docExpressionCount="3335" docLength="31095" endLine="657" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="28948" int_docExpressionCount="3335" int_docLength="31094" length="1" offset="23733" startLine="657" starttimestamp="1612813070441" timestamp="7907111">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6717" _type="Insert" date="Mon Feb 08 16:49:38 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28951" docExpressionCount="3335" docLength="31097" length="2" offset="23734" repeat="2" starttimestamp="1612813070441" timestamp="7907980" timestamp2="7908141">
    <text><![CDATA[+1]]></text>
  </DocumentChange>
  <DocumentChange __id="6722" _type="Insert" date="Mon Feb 08 16:49:39 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28966" docExpressionCount="3335" docLength="31112" length="15" offset="23737" repeat="9" starttimestamp="1612813070441" timestamp="7908775" timestamp2="7909915">
    <text><![CDATA[;
					nexline]]></text>
  </DocumentChange>
  <DocumentChange __id="6736" _type="Replace" date="Mon Feb 08 16:49:40 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28967" docExpressionCount="3335" docLength="31113" endLine="658" insertionLength="8" int_docASTNodeCount="5033" int_docActiveCodeLength="28959" int_docExpressionCount="3457" int_docLength="31105" length="7" offset="23745" startLine="658" starttimestamp="1612813070441" timestamp="7910041">
    <deletedText><![CDATA[nexline]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6742" _type="Delete" date="Mon Feb 08 16:49:42 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28966" docExpressionCount="3335" docLength="31112" endLine="657" length="1" offset="23735" startLine="657" starttimestamp="1612813070441" timestamp="7912131">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="6744" _type="Insert" date="Mon Feb 08 16:49:43 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28968" docExpressionCount="3335" docLength="31114" length="2" offset="23735" starttimestamp="1612813070441" timestamp="7912681">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="6747" _type="Insert" date="Mon Feb 08 16:49:44 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28972" docExpressionCount="3335" docLength="31118" length="4" offset="23754" repeat="4" starttimestamp="1612813070441" timestamp="7914035" timestamp2="7914791">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <DocumentChange __id="6754" _type="Replace" date="Mon Feb 08 16:49:45 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28975" docExpressionCount="3335" docLength="31121" endLine="658" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28969" int_docExpressionCount="3335" int_docLength="31115" length="3" offset="23755" startLine="658" starttimestamp="1612813070441" timestamp="7914946">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6758" _type="Insert" date="Mon Feb 08 16:49:47 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28976" docExpressionCount="3335" docLength="31122" length="1" offset="23760" starttimestamp="1612813070441" timestamp="7916997">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6761" _type="Insert" date="Mon Feb 08 16:49:48 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28978" docExpressionCount="3335" docLength="31124" length="2" offset="23762" starttimestamp="1612813070441" timestamp="7918504">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <DocumentChange __id="6763" _type="Delete" date="Mon Feb 08 16:49:49 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28976" docExpressionCount="3335" docLength="31122" endLine="658" length="2" offset="23762" repeat="2" startLine="658" starttimestamp="1612813070441" timestamp="7918805" timestamp2="7918814">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <DocumentChange __id="6766" _type="Insert" date="Mon Feb 08 16:49:49 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28977" docExpressionCount="3335" docLength="31123" length="1" offset="23762" starttimestamp="1612813070441" timestamp="7918958">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6770" _type="Delete" date="Mon Feb 08 16:49:50 EST 2021" docASTNodeCount="5037" docActiveCodeLength="28975" docExpressionCount="3460" docLength="31121" endLine="658" length="2" offset="23759" repeat="2" startLine="658" starttimestamp="1612813070441" timestamp="7919899" timestamp2="7920006">
    <text><![CDATA[e;]]></text>
  </DocumentChange>
  <DocumentChange __id="6774" _type="Insert" date="Mon Feb 08 16:49:50 EST 2021" docASTNodeCount="5038" docActiveCodeLength="28977" docExpressionCount="3461" docLength="31123" length="2" offset="23759" starttimestamp="1612813070441" timestamp="7920381">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="6776" _type="Delete" date="Mon Feb 08 16:49:52 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28974" docExpressionCount="3335" docLength="31120" endLine="658" length="3" offset="23758" repeat="3" startLine="658" starttimestamp="1612813070441" timestamp="7922154" timestamp2="7922273">
    <text><![CDATA[(""]]></text>
  </DocumentChange>
  <DocumentChange __id="6782" _type="Insert" date="Mon Feb 08 16:49:53 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28976" docExpressionCount="3335" docLength="31122" length="2" offset="23758" starttimestamp="1612813070441" timestamp="7923251">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="6784" _type="Delete" date="Mon Feb 08 16:49:54 EST 2021" docASTNodeCount="5037" docActiveCodeLength="28975" docExpressionCount="3460" docLength="31121" endLine="658" length="1" offset="23759" startLine="658" starttimestamp="1612813070441" timestamp="7924310">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="6787" _type="Insert" date="Mon Feb 08 16:49:56 EST 2021" docASTNodeCount="5038" docActiveCodeLength="28978" docExpressionCount="3461" docLength="31124" length="3" offset="23759" repeat="3" starttimestamp="1612813070441" timestamp="7926002" timestamp2="7926242">
    <text><![CDATA[tit]]></text>
  </DocumentChange>
  <DocumentChange __id="6794" _type="Replace" date="Mon Feb 08 16:49:57 EST 2021" docASTNodeCount="5038" docActiveCodeLength="28981" docExpressionCount="3461" docLength="31127" endLine="658" insertionLength="6" int_docASTNodeCount="5037" int_docActiveCodeLength="28975" int_docExpressionCount="3460" int_docLength="31121" length="3" offset="23759" startLine="658" starttimestamp="1612813070441" timestamp="7927035">
    <deletedText><![CDATA[tit]]></deletedText>
    <insertedText><![CDATA[titles]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6796" _type="Delete" date="Mon Feb 08 16:49:58 EST 2021" docASTNodeCount="5037" docActiveCodeLength="28975" docExpressionCount="3460" docLength="31121" endLine="658" length="6" offset="23759" startLine="658" starttimestamp="1612813070441" timestamp="7927671">
    <text><![CDATA[titles]]></text>
  </DocumentChange>
  <DocumentChange __id="6798" _type="Insert" date="Mon Feb 08 16:50:06 EST 2021" docASTNodeCount="5038" docActiveCodeLength="28980" docExpressionCount="3461" docLength="31126" length="5" offset="23759" repeat="5" starttimestamp="1612813070441" timestamp="7935683" timestamp2="7936143">
    <text><![CDATA[title]]></text>
  </DocumentChange>
  <DocumentChange __id="6806" _type="Delete" date="Mon Feb 08 16:50:07 EST 2021" docASTNodeCount="5037" docActiveCodeLength="28975" docExpressionCount="3460" docLength="31121" endLine="658" length="5" offset="23759" startLine="658" starttimestamp="1612813070441" timestamp="7936873">
    <text><![CDATA[title]]></text>
  </DocumentChange>
  <DocumentChange __id="6808" _type="Insert" date="Mon Feb 08 16:50:09 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28977" docExpressionCount="3335" docLength="31123" length="2" offset="23759" repeat="2" starttimestamp="1612813070441" timestamp="7939203" timestamp2="7939638">
    <text><![CDATA[i+]]></text>
  </DocumentChange>
  <Command __id="6809" _type="PauseCommand" date="Mon Feb 08 16:50:09 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7939203">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2323]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6810" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:50:09 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7939236" />
  <Command __id="6812" _type="InsertStringCommand" date="Mon Feb 08 16:50:10 EST 2021" starttimestamp="1612813070441" timestamp="7939645" timestamp2="7939645">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6814" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:50:10 EST 2021" starttimestamp="1612813070441" timestamp="7940419" />
  <Command __id="6816" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:50:10 EST 2021" starttimestamp="1612813070441" timestamp="7940556" />
  <Command __id="6818" _type="PauseCommand" date="Mon Feb 08 16:50:54 EST 2021" range="30s-1m" starttimestamp="1612813070441" timestamp="7984028">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[43472]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6819" _type="InsertStringCommand" date="Mon Feb 08 16:50:54 EST 2021" starttimestamp="1612813070441" timestamp="7984037" timestamp2="7984037">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6820" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:50:54 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7984076" />
  <Command __id="6821" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:50:55 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7984976" />
  <Command __id="6823" _type="InsertStringCommand" date="Mon Feb 08 16:50:55 EST 2021" starttimestamp="1612813070441" timestamp="7984991" timestamp2="7984991">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6825" _type="PauseCommand" date="Mon Feb 08 16:50:56 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="7986362">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1371]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="6826" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:50:56 EST 2021" starttimestamp="1612813070441" timestamp="7986365" />
  <Command __id="6828" _type="InsertStringCommand" date="Mon Feb 08 16:50:57 EST 2021" starttimestamp="1612813070441" timestamp="7986737" timestamp2="7986737">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6830" _type="InsertStringCommand" date="Mon Feb 08 16:50:57 EST 2021" starttimestamp="1612813070441" timestamp="7986902" timestamp2="7986902">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6832" _type="InsertStringCommand" date="Mon Feb 08 16:50:57 EST 2021" starttimestamp="1612813070441" timestamp="7987019" timestamp2="7987019">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6834" _type="InsertStringCommand" date="Mon Feb 08 16:50:57 EST 2021" starttimestamp="1612813070441" timestamp="7987097" timestamp2="7987097">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6836" _type="PauseCommand" date="Mon Feb 08 16:51:03 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="7992834">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[5737]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6837" _type="InsertStringCommand" date="Mon Feb 08 16:51:03 EST 2021" starttimestamp="1612813070441" timestamp="7992840" timestamp2="7992840">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6838" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:03 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7992883" />
  <Command __id="6842" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7993733" />
  <Command __id="6844" _type="InsertStringCommand" date="Mon Feb 08 16:51:04 EST 2021" starttimestamp="1612813070441" timestamp="7993750" timestamp2="7993750">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6846" _type="InsertStringCommand" date="Mon Feb 08 16:51:04 EST 2021" starttimestamp="1612813070441" timestamp="7993964" timestamp2="7993964">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6847" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:04 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7994004" />
  <Command __id="6851" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:04 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7994334" />
  <Command __id="6853" _type="InsertStringCommand" date="Mon Feb 08 16:51:04 EST 2021" starttimestamp="1612813070441" timestamp="7994470" timestamp2="7994470">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6855" _type="InsertStringCommand" date="Mon Feb 08 16:51:04 EST 2021" starttimestamp="1612813070441" timestamp="7994550" timestamp2="7994550">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6856" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:05 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7994651" />
  <Command __id="6857" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:05 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7995341" />
  <Command __id="6859" _type="InsertStringCommand" date="Mon Feb 08 16:51:06 EST 2021" starttimestamp="1612813070441" timestamp="7995716" timestamp2="7995716">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6860" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:06 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="7995756" />
  <Command __id="6863" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:06 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="7996419" />
  <Command __id="6865" _type="InsertStringCommand" date="Mon Feb 08 16:51:06 EST 2021" starttimestamp="1612813070441" timestamp="7996435" timestamp2="7996435">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6867" _type="PauseCommand" date="Mon Feb 08 16:51:09 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="7998581">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2146]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6868" _type="InsertStringCommand" date="Mon Feb 08 16:51:09 EST 2021" starttimestamp="1612813070441" timestamp="7998589" timestamp2="7998589">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="6870" _type="InsertStringCommand" date="Mon Feb 08 16:51:09 EST 2021" starttimestamp="1612813070441" timestamp="7998656" timestamp2="7998656">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="6872" _type="InsertStringCommand" date="Mon Feb 08 16:51:10 EST 2021" starttimestamp="1612813070441" timestamp="7999589" timestamp2="7999589">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6874" _type="InsertStringCommand" date="Mon Feb 08 16:51:10 EST 2021" starttimestamp="1612813070441" timestamp="7999799" timestamp2="7999799">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="6876" _type="InsertStringCommand" date="Mon Feb 08 16:51:10 EST 2021" starttimestamp="1612813070441" timestamp="8000058" timestamp2="8000058">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6878" _type="PauseCommand" date="Mon Feb 08 16:51:14 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8003820">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[3762]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6879" _type="InsertStringCommand" date="Mon Feb 08 16:51:14 EST 2021" starttimestamp="1612813070441" timestamp="8003836" timestamp2="8003836">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6880" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:14 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8003869" />
  <Command __id="6882" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:14 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8004173" />
  <Command __id="6884" _type="InsertStringCommand" date="Mon Feb 08 16:51:14 EST 2021" starttimestamp="1612813070441" timestamp="8004190" timestamp2="8004190">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6886" _type="InsertStringCommand" date="Mon Feb 08 16:51:14 EST 2021" starttimestamp="1612813070441" timestamp="8004338" timestamp2="8004338">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6888" _type="UndoCommand" date="Mon Feb 08 16:51:15 EST 2021" starttimestamp="1612813070441" timestamp="8004939" />
  <Command __id="6890" _type="UndoCommand" date="Mon Feb 08 16:51:16 EST 2021" starttimestamp="1612813070441" timestamp="8005968" />
  <Command __id="6892" _type="InsertStringCommand" date="Mon Feb 08 16:51:17 EST 2021" starttimestamp="1612813070441" timestamp="8006800" timestamp2="8006800">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6893" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:17 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8006835" />
  <Command __id="6898" _type="PauseCommand" date="Mon Feb 08 16:51:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8008226">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1198]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6899" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:18 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8008240" />
  <Command __id="6901" _type="InsertStringCommand" date="Mon Feb 08 16:51:18 EST 2021" starttimestamp="1612813070441" timestamp="8008483" timestamp2="8008483">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="6903" _type="InsertStringCommand" date="Mon Feb 08 16:51:19 EST 2021" starttimestamp="1612813070441" timestamp="8008632" timestamp2="8008632">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6905" _type="InsertStringCommand" date="Mon Feb 08 16:51:19 EST 2021" starttimestamp="1612813070441" timestamp="8009112" timestamp2="8009112">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="6906" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:19 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8009152" />
  <Command __id="6909" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8009582" />
  <Command __id="6911" _type="InsertStringCommand" date="Mon Feb 08 16:51:20 EST 2021" starttimestamp="1612813070441" timestamp="8009598" timestamp2="8009598">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6913" _type="PauseCommand" date="Mon Feb 08 16:51:24 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8014537">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4939]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6912" _type="MoveCaretCommand" caretOffset="3853" date="Mon Feb 08 16:51:24 EST 2021" docOffset="23795" starttimestamp="1612813070441" timestamp="8014537" />
  <Command __id="6915" _type="PauseCommand" date="Mon Feb 08 16:51:26 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8015857">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1320]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6916" _type="InsertStringCommand" date="Mon Feb 08 16:51:26 EST 2021" starttimestamp="1612813070441" timestamp="8015864" timestamp2="8015864">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6918" _type="InsertStringCommand" date="Mon Feb 08 16:51:26 EST 2021" starttimestamp="1612813070441" timestamp="8016082" timestamp2="8016082">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6920" _type="PauseCommand" date="Mon Feb 08 16:51:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8017419">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1337]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="6921" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:51:27 EST 2021" starttimestamp="1612813070441" timestamp="8017425" />
  <Command __id="6923" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:51:27 EST 2021" starttimestamp="1612813070441" timestamp="8017553" />
  <Command __id="6925" _type="InsertStringCommand" date="Mon Feb 08 16:51:28 EST 2021" starttimestamp="1612813070441" timestamp="8018374" timestamp2="8018374">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6927" _type="InsertStringCommand" date="Mon Feb 08 16:51:29 EST 2021" starttimestamp="1612813070441" timestamp="8018973" timestamp2="8018973">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="6929" _type="InsertStringCommand" date="Mon Feb 08 16:51:29 EST 2021" starttimestamp="1612813070441" timestamp="8019490" timestamp2="8019490">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="6931" _type="InsertStringCommand" date="Mon Feb 08 16:51:30 EST 2021" starttimestamp="1612813070441" timestamp="8019602" timestamp2="8019602">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="6933" _type="InsertStringCommand" date="Mon Feb 08 16:51:30 EST 2021" starttimestamp="1612813070441" timestamp="8019682" timestamp2="8019682">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="6813" _type="Delete" date="Mon Feb 08 16:50:10 EST 2021" docASTNodeCount="5037" docActiveCodeLength="28975" docExpressionCount="3460" docLength="31121" endLine="658" length="2" offset="23759" repeat="2" startLine="658" starttimestamp="1612813070441" timestamp="7940416" timestamp2="7940550">
    <text><![CDATA[i+]]></text>
  </DocumentChange>
  <DocumentChange __id="6817" _type="Insert" date="Mon Feb 08 16:50:54 EST 2021" docASTNodeCount="5038" docActiveCodeLength="28976" docExpressionCount="3461" docLength="31122" length="1" offset="23759" starttimestamp="1612813070441" timestamp="7984028">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="6822" _type="Replace" date="Mon Feb 08 16:50:55 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28977" docExpressionCount="3335" docLength="31123" endLine="658" insertionLength="2" int_docASTNodeCount="5037" int_docActiveCodeLength="28975" int_docExpressionCount="3460" int_docLength="31121" length="1" offset="23759" startLine="658" starttimestamp="1612813070441" timestamp="7984982">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[i=]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6824" _type="Delete" date="Mon Feb 08 16:50:56 EST 2021" docASTNodeCount="5038" docActiveCodeLength="28976" docExpressionCount="3461" docLength="31122" endLine="658" length="1" offset="23760" startLine="658" starttimestamp="1612813070441" timestamp="7986362">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="6827" _type="Insert" date="Mon Feb 08 16:50:57 EST 2021" docASTNodeCount="4859" docActiveCodeLength="28980" docExpressionCount="3335" docLength="31126" length="4" offset="23760" repeat="4" starttimestamp="1612813070441" timestamp="7986732" timestamp2="7987091">
    <text><![CDATA[ == ]]></text>
  </DocumentChange>
  <DocumentChange __id="6835" _type="Insert" date="Mon Feb 08 16:51:03 EST 2021" docASTNodeCount="5040" docActiveCodeLength="28984" docExpressionCount="3463" docLength="31130" length="4" offset="23764" repeat="4" starttimestamp="1612813070441" timestamp="7992834" timestamp2="7993274">
    <text><![CDATA[sear]]></text>
  </DocumentChange>
  <DocumentChange __id="6843" _type="Replace" date="Mon Feb 08 16:51:04 EST 2021" docASTNodeCount="5040" docActiveCodeLength="28988" docExpressionCount="3463" docLength="31134" endLine="658" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28980" int_docExpressionCount="3335" int_docLength="31126" length="4" offset="23764" startLine="658" starttimestamp="1612813070441" timestamp="7993739">
    <deletedText><![CDATA[sear]]></deletedText>
    <insertedText><![CDATA[searches]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6845" _type="Insert" date="Mon Feb 08 16:51:04 EST 2021" docASTNodeCount="5042" docActiveCodeLength="28992" docExpressionCount="3465" docLength="31138" length="4" offset="23772" repeat="4" starttimestamp="1612813070441" timestamp="7993957" timestamp2="7994285">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="6852" _type="Replace" date="Mon Feb 08 16:51:04 EST 2021" docASTNodeCount="5043" docActiveCodeLength="28997" docExpressionCount="3466" docLength="31143" endLine="658" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="28989" int_docExpressionCount="3335" int_docLength="31135" length="3" offset="23773" startLine="658" starttimestamp="1612813070441" timestamp="7994341">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6854" _type="Replace" date="Mon Feb 08 16:51:04 EST 2021" docASTNodeCount="5043" docActiveCodeLength="28995" docExpressionCount="3466" docLength="31141" endLine="658" insertionLength="1" int_docASTNodeCount="5042" int_docActiveCodeLength="28994" int_docExpressionCount="3465" int_docLength="31140" length="3" offset="23777" startLine="658" starttimestamp="1612813070441" timestamp="7994538">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6858" _type="Insert" date="Mon Feb 08 16:51:06 EST 2021" docASTNodeCount="5045" docActiveCodeLength="28998" docExpressionCount="3468" docLength="31144" length="3" offset="23779" repeat="3" starttimestamp="1612813070441" timestamp="7995709" timestamp2="7996177">
    <text><![CDATA[.si]]></text>
  </DocumentChange>
  <DocumentChange __id="6864" _type="Replace" date="Mon Feb 08 16:51:06 EST 2021" docASTNodeCount="5045" docActiveCodeLength="29002" docExpressionCount="3468" docLength="31148" endLine="658" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="28996" int_docExpressionCount="3335" int_docLength="31142" length="2" offset="23780" startLine="658" starttimestamp="1612813070441" timestamp="7996426">
    <deletedText><![CDATA[si]]></deletedText>
    <insertedText><![CDATA[size()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6866" _type="Insert" date="Mon Feb 08 16:51:09 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29007" docExpressionCount="3335" docLength="31153" length="5" offset="23786" repeat="5" starttimestamp="1612813070441" timestamp="7998581" timestamp2="8000052">
    <text><![CDATA[-1 ? ]]></text>
  </DocumentChange>
  <DocumentChange __id="6877" _type="Insert" date="Mon Feb 08 16:51:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29009" docExpressionCount="3335" docLength="31155" length="2" offset="23791" repeat="2" starttimestamp="1612813070441" timestamp="8003820" timestamp2="8004011">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="6883" _type="Replace" date="Mon Feb 08 16:51:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29017" docExpressionCount="3335" docLength="31163" endLine="658" insertionLength="10" int_docASTNodeCount="4859" int_docActiveCodeLength="29007" int_docExpressionCount="3335" int_docLength="31153" length="2" offset="23791" startLine="658" starttimestamp="1612813070441" timestamp="8004181">
    <deletedText><![CDATA[tr]]></deletedText>
    <insertedText><![CDATA[toString()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6885" _type="Insert" date="Mon Feb 08 16:51:14 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29026" docExpressionCount="3335" docLength="31172" length="9" offset="23801" starttimestamp="1612813070441" timestamp="8004287">
    <text><![CDATA[
							]]></text>
  </DocumentChange>
  <DocumentChange __id="6887" _type="Delete" date="Mon Feb 08 16:51:15 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29017" docExpressionCount="3335" docLength="31163" endLine="659" length="9" offset="23801" startLine="658" starttimestamp="1612813070441" timestamp="8004929">
    <text><![CDATA[
							]]></text>
  </DocumentChange>
  <DocumentChange __id="6889" _type="Replace" date="Mon Feb 08 16:51:16 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29009" docExpressionCount="3335" docLength="31155" endLine="658" insertionLength="2" int_docASTNodeCount="4859" int_docActiveCodeLength="29007" int_docExpressionCount="3335" int_docLength="31153" length="10" offset="23791" startLine="658" starttimestamp="1612813070441" timestamp="8005934">
    <deletedText><![CDATA[toString()]]></deletedText>
    <insertedText><![CDATA[tr]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6891" _type="Replace" date="Mon Feb 08 16:51:17 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29008" docExpressionCount="3335" docLength="31154" endLine="658" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="29007" int_docExpressionCount="3335" int_docLength="31153" length="2" offset="23791" startLine="658" starttimestamp="1612813070441" timestamp="8006791">
    <deletedText><![CDATA[tr]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6894" _type="Insert" date="Mon Feb 08 16:51:17 EST 2021" docASTNodeCount="5050" docActiveCodeLength="29017" docExpressionCount="3473" docLength="31163" length="9" offset="23792" repeat="9" starttimestamp="1612813070441" timestamp="8006997" timestamp2="8009315">
    <text><![CDATA[rue : fal]]></text>
  </DocumentChange>
  <DocumentChange __id="6910" _type="Replace" date="Mon Feb 08 16:51:20 EST 2021" docASTNodeCount="5050" docActiveCodeLength="29019" docExpressionCount="3473" docLength="31165" endLine="658" insertionLength="5" int_docASTNodeCount="4859" int_docActiveCodeLength="29014" int_docExpressionCount="3335" int_docLength="31160" length="3" offset="23798" startLine="658" starttimestamp="1612813070441" timestamp="8009589">
    <deletedText><![CDATA[fal]]></deletedText>
    <insertedText><![CDATA[false]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6914" _type="Insert" date="Mon Feb 08 16:51:26 EST 2021" docASTNodeCount="5052" docActiveCodeLength="29022" docExpressionCount="3475" docLength="31168" length="3" offset="23795" repeat="2" starttimestamp="1612813070441" timestamp="8015857" timestamp2="8016080">
    <text><![CDATA[+""]]></text>
  </DocumentChange>
  <DocumentChange __id="6919" _type="Delete" date="Mon Feb 08 16:51:27 EST 2021" docASTNodeCount="4510" docActiveCodeLength="29016" docExpressionCount="3104" docLength="31162" endLine="658" length="6" offset="23791" repeat="2" startLine="658" starttimestamp="1612813070441" timestamp="8017419" timestamp2="8017549">
    <text><![CDATA[true+"]]></text>
  </DocumentChange>
  <DocumentChange __id="6924" _type="Insert" date="Mon Feb 08 16:51:28 EST 2021" docASTNodeCount="4510" docActiveCodeLength="29022" docExpressionCount="3104" docLength="31168" length="6" offset="23791" repeat="5" starttimestamp="1612813070441" timestamp="8018372" timestamp2="8019679">
    <text><![CDATA["TRUE"]]></text>
  </DocumentChange>
  <Command __id="6935" _type="PauseCommand" date="Mon Feb 08 16:51:31 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8020890">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1208]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="6934" _type="Delete" date="Mon Feb 08 16:51:31 EST 2021" docASTNodeCount="5050" docActiveCodeLength="29021" docExpressionCount="3473" docLength="31167" endLine="658" length="1" offset="23796" startLine="658" starttimestamp="1612813070441" timestamp="8020890">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="6936" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 16:51:31 EST 2021" starttimestamp="1612813070441" timestamp="8020899" />
  <Command __id="6937" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:51:31 EST 2021" starttimestamp="1612813070441" timestamp="8021186" />
  <Command __id="6938" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:51:32 EST 2021" starttimestamp="1612813070441" timestamp="8021626" />
  <Command __id="6939" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:51:32 EST 2021" starttimestamp="1612813070441" timestamp="8021756" />
  <DocumentChange __id="6940" _type="Delete" date="Mon Feb 08 16:51:32 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29016" docExpressionCount="3335" docLength="31162" endLine="658" length="5" offset="23800" startLine="658" starttimestamp="1612813070441" timestamp="8022110">
    <text><![CDATA[false]]></text>
  </DocumentChange>
  <Command __id="6941" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 08 16:51:32 EST 2021" starttimestamp="1612813070441" timestamp="8022114" />
  <Command __id="6943" _type="InsertStringCommand" date="Mon Feb 08 16:51:33 EST 2021" starttimestamp="1612813070441" timestamp="8022733" timestamp2="8022733">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6945" _type="InsertStringCommand" date="Mon Feb 08 16:51:33 EST 2021" starttimestamp="1612813070441" timestamp="8023044" timestamp2="8023044">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="6947" _type="InsertStringCommand" date="Mon Feb 08 16:51:33 EST 2021" starttimestamp="1612813070441" timestamp="8023246" timestamp2="8023246">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="6949" _type="InsertStringCommand" date="Mon Feb 08 16:51:33 EST 2021" starttimestamp="1612813070441" timestamp="8023345" timestamp2="8023345">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="6951" _type="InsertStringCommand" date="Mon Feb 08 16:51:34 EST 2021" starttimestamp="1612813070441" timestamp="8023671" timestamp2="8023671">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="6953" _type="InsertStringCommand" date="Mon Feb 08 16:51:34 EST 2021" starttimestamp="1612813070441" timestamp="8023781" timestamp2="8023781">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="6955" _type="PauseCommand" date="Mon Feb 08 16:51:38 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8027805">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[4024]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6954" _type="SelectTextCommand" caretOffset="3865" date="Mon Feb 08 16:51:38 EST 2021" end="3865" start="3849" starttimestamp="1612813070441" timestamp="8027805" />
  <Command __id="6956" _type="MoveCaretCommand" caretOffset="3834" date="Mon Feb 08 16:51:38 EST 2021" docOffset="23776" starttimestamp="1612813070441" timestamp="8028423" />
  <Command __id="6958" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:51:39 EST 2021" starttimestamp="1612813070441" timestamp="8029133" />
  <Command __id="6960" _type="PauseCommand" date="Mon Feb 08 16:51:42 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8032468">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3335]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6959" _type="MoveCaretCommand" caretOffset="3837" date="Mon Feb 08 16:51:42 EST 2021" docOffset="23779" starttimestamp="1612813070441" timestamp="8032468" />
  <Command __id="6961" _type="MoveCaretCommand" caretOffset="3837" date="Mon Feb 08 16:51:43 EST 2021" docOffset="23779" starttimestamp="1612813070441" timestamp="8033298" />
  <Command __id="6963" _type="UndoCommand" date="Mon Feb 08 16:51:44 EST 2021" starttimestamp="1612813070441" timestamp="8033728" />
  <Command __id="6964" _type="MoveCaretCommand" caretOffset="3835" date="Mon Feb 08 16:51:44 EST 2021" docOffset="23777" starttimestamp="1612813070441" timestamp="8034367" />
  <Command __id="6965" _type="MoveCaretCommand" caretOffset="3797" date="Mon Feb 08 16:51:45 EST 2021" docOffset="23739" starttimestamp="1612813070441" timestamp="8034850" />
  <Command __id="6966" _type="MoveCaretCommand" caretOffset="3867" date="Mon Feb 08 16:51:45 EST 2021" docOffset="23809" starttimestamp="1612813070441" timestamp="8035207" />
  <Command __id="6968" _type="PauseCommand" date="Mon Feb 08 16:51:49 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8039496">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4289]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6969" _type="InsertStringCommand" date="Mon Feb 08 16:51:49 EST 2021" starttimestamp="1612813070441" timestamp="8039506" timestamp2="8039506">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6971" _type="PauseCommand" date="Mon Feb 08 16:51:51 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8041273">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1767]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6972" _type="InsertStringCommand" date="Mon Feb 08 16:51:51 EST 2021" starttimestamp="1612813070441" timestamp="8041279" timestamp2="8041279">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6973" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:51 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8041321" />
  <Command __id="6976" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:52 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8042062" />
  <Command __id="6978" _type="InsertStringCommand" date="Mon Feb 08 16:51:52 EST 2021" starttimestamp="1612813070441" timestamp="8042078" timestamp2="8042078">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6979" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:52 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8042130" />
  <Command __id="6983" _type="PauseCommand" date="Mon Feb 08 16:51:54 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8043725">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1061]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6984" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:54 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8043754" />
  <Command __id="6986" _type="InsertStringCommand" date="Mon Feb 08 16:51:54 EST 2021" starttimestamp="1612813070441" timestamp="8043898" timestamp2="8043898">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6987" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:54 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8043926" />
  <Command __id="6988" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:54 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8043952" />
  <Command __id="6990" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:51:54 EST 2021" starttimestamp="1612813070441" timestamp="8044329" />
  <Command __id="6992" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:51:54 EST 2021" starttimestamp="1612813070441" timestamp="8044438" />
  <Command __id="6994" _type="InsertStringCommand" date="Mon Feb 08 16:51:55 EST 2021" starttimestamp="1612813070441" timestamp="8044689" timestamp2="8044689">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6995" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:55 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8044781" />
  <Command __id="6997" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:51:55 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8045303" />
  <Command __id="6999" _type="InsertStringCommand" date="Mon Feb 08 16:51:55 EST 2021" starttimestamp="1612813070441" timestamp="8045435" timestamp2="8045435">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7001" _type="PauseCommand" date="Mon Feb 08 16:51:58 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8048046">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[2611]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7000" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:51:58 EST 2021" starttimestamp="1612813070441" timestamp="8048046" />
  <Command __id="7003" _type="PauseCommand" date="Mon Feb 08 16:51:59 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8049133">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1087]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7004" _type="InsertStringCommand" date="Mon Feb 08 16:51:59 EST 2021" starttimestamp="1612813070441" timestamp="8049137" timestamp2="8049137">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7005" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:51:59 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8049227" />
  <Command __id="7009" _type="PauseCommand" date="Mon Feb 08 16:52:01 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8050954">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1355]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="7008" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:01 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8050954" />
  <Command __id="7011" _type="InsertStringCommand" date="Mon Feb 08 16:52:01 EST 2021" starttimestamp="1612813070441" timestamp="8051049" timestamp2="8051049">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7013" _type="InsertStringCommand" date="Mon Feb 08 16:52:01 EST 2021" starttimestamp="1612813070441" timestamp="8051534" timestamp2="8051534">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7015" _type="InsertStringCommand" date="Mon Feb 08 16:52:02 EST 2021" starttimestamp="1612813070441" timestamp="8051586" timestamp2="8051586">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7017" _type="InsertStringCommand" date="Mon Feb 08 16:52:02 EST 2021" starttimestamp="1612813070441" timestamp="8051614" timestamp2="8051614">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7018" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8051656" />
  <Command __id="7020" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:02 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8051874" />
  <Command __id="7022" _type="InsertStringCommand" date="Mon Feb 08 16:52:02 EST 2021" starttimestamp="1612813070441" timestamp="8052080" timestamp2="8052080">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7023" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:02 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8052170" />
  <Command __id="7025" _type="PauseCommand" date="Mon Feb 08 16:52:03 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8053206">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1036]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7027" _type="PauseCommand" date="Mon Feb 08 16:52:05 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8054782">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1576]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7032" _type="PauseCommand" date="Mon Feb 08 16:52:07 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8056625">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1782]]></rest>
    <prev><![CDATA[Insert]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="7031" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:07 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8056625" />
  <Command __id="7035" _type="InsertStringCommand" date="Mon Feb 08 16:52:07 EST 2021" starttimestamp="1612813070441" timestamp="8056661" timestamp2="8056661">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7040" _type="UndoCommand" date="Mon Feb 08 16:52:07 EST 2021" starttimestamp="1612813070441" timestamp="8057420" />
  <Command __id="7042" _type="PauseCommand" date="Mon Feb 08 16:52:11 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8061000">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3580]]></rest>
    <prev><![CDATA[UndoCommand]]></prev>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="7043" _type="InsertStringCommand" date="Mon Feb 08 16:52:11 EST 2021" starttimestamp="1612813070441" timestamp="8061007" timestamp2="8061007">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7045" _type="InsertStringCommand" date="Mon Feb 08 16:52:11 EST 2021" starttimestamp="1612813070441" timestamp="8061041" timestamp2="8061041">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7047" _type="InsertStringCommand" date="Mon Feb 08 16:52:11 EST 2021" starttimestamp="1612813070441" timestamp="8061081" timestamp2="8061081">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7048" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:11 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8061123" />
  <Command __id="7050" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:11 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8061317" />
  <Command __id="7052" _type="InsertStringCommand" date="Mon Feb 08 16:52:11 EST 2021" starttimestamp="1612813070441" timestamp="8061499" timestamp2="8061499">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="7054" _type="InsertStringCommand" date="Mon Feb 08 16:52:12 EST 2021" starttimestamp="1612813070441" timestamp="8061718" timestamp2="8061718">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7056" _type="InsertStringCommand" date="Mon Feb 08 16:52:12 EST 2021" starttimestamp="1612813070441" timestamp="8061781" timestamp2="8061781">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7058" _type="InsertStringCommand" date="Mon Feb 08 16:52:12 EST 2021" starttimestamp="1612813070441" timestamp="8061815" timestamp2="8061815">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7060" _type="InsertStringCommand" date="Mon Feb 08 16:52:12 EST 2021" starttimestamp="1612813070441" timestamp="8061864" timestamp2="8061864">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7061" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:12 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8061906" />
  <Command __id="7063" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:13 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8062979" />
  <Command __id="7065" _type="InsertStringCommand" date="Mon Feb 08 16:52:13 EST 2021" starttimestamp="1612813070441" timestamp="8063349" timestamp2="8063349">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="7066" _type="InsertStringCommand" date="Mon Feb 08 16:52:13 EST 2021" starttimestamp="1612813070441" timestamp="8063398" timestamp2="8063398">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="7067" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 08 16:52:14 EST 2021" starttimestamp="1612813070441" timestamp="8064344" />
  <Command __id="7069" _type="InsertStringCommand" date="Mon Feb 08 16:52:15 EST 2021" starttimestamp="1612813070441" timestamp="8065274" timestamp2="8065274">
    <data><![CDATA[1]]></data>
  </Command>
  <DocumentChange __id="6942" _type="Insert" date="Mon Feb 08 16:51:33 EST 2021" docASTNodeCount="5050" docActiveCodeLength="29023" docExpressionCount="3473" docLength="31169" length="7" offset="23800" repeat="6" starttimestamp="1612813070441" timestamp="8022729" timestamp2="8023779">
    <text><![CDATA["FALSE"]]></text>
  </DocumentChange>
  <DocumentChange __id="6957" _type="Insert" date="Mon Feb 08 16:51:39 EST 2021" docASTNodeCount="5033" docActiveCodeLength="28955" docExpressionCount="3457" docLength="31171" length="2" offset="23741" starttimestamp="1612813070441" timestamp="8029093">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6962" _type="Delete" date="Mon Feb 08 16:51:44 EST 2021" docASTNodeCount="5050" docActiveCodeLength="29023" docExpressionCount="3473" docLength="31169" endLine="658" length="2" offset="23741" startLine="658" starttimestamp="1612813070441" timestamp="8033716">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6967" _type="Insert" date="Mon Feb 08 16:51:49 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29033" docExpressionCount="3335" docLength="31179" length="10" offset="23809" repeat="4" starttimestamp="1612813070441" timestamp="8039496" timestamp2="8041635">
    <text><![CDATA[
					cw2]]></text>
  </DocumentChange>
  <DocumentChange __id="6977" _type="Replace" date="Mon Feb 08 16:51:52 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29034" docExpressionCount="3335" docLength="31180" endLine="659" insertionLength="4" int_docASTNodeCount="5050" int_docActiveCodeLength="29030" int_docExpressionCount="3473" int_docLength="31176" length="3" offset="23816" startLine="659" starttimestamp="1612813070441" timestamp="8042069">
    <deletedText><![CDATA[cw2]]></deletedText>
    <insertedText><![CDATA[cw2.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6980" _type="Insert" date="Mon Feb 08 16:51:53 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29038" docExpressionCount="3335" docLength="31184" length="4" offset="23820" repeat="4" starttimestamp="1612813070441" timestamp="8042609" timestamp2="8043889">
    <text><![CDATA[wron]]></text>
  </DocumentChange>
  <DocumentChange __id="6989" _type="Delete" date="Mon Feb 08 16:51:54 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29036" docExpressionCount="3335" docLength="31182" endLine="659" length="2" offset="23822" repeat="2" startLine="659" starttimestamp="1612813070441" timestamp="8044319" timestamp2="8044436">
    <text><![CDATA[on]]></text>
  </DocumentChange>
  <DocumentChange __id="6993" _type="Insert" date="Mon Feb 08 16:51:55 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29038" docExpressionCount="3335" docLength="31184" length="2" offset="23822" repeat="2" starttimestamp="1612813070441" timestamp="8044684" timestamp2="8044885">
    <text><![CDATA[ne]]></text>
  </DocumentChange>
  <DocumentChange __id="6998" _type="Replace" date="Mon Feb 08 16:51:55 EST 2021" docASTNodeCount="5055" docActiveCodeLength="29054" docExpressionCount="3477" docLength="31200" endLine="659" insertionLength="20" int_docASTNodeCount="4859" int_docActiveCodeLength="29034" int_docExpressionCount="3335" int_docLength="31180" length="4" offset="23820" startLine="659" starttimestamp="1612813070441" timestamp="8045310">
    <deletedText><![CDATA[wrne]]></deletedText>
    <insertedText><![CDATA[writeNext(nextLine);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7002" _type="Insert" date="Mon Feb 08 16:51:59 EST 2021" docASTNodeCount="5057" docActiveCodeLength="29057" docExpressionCount="3479" docLength="31203" length="3" offset="23838" repeat="3" starttimestamp="1612813070441" timestamp="8049133" timestamp2="8049599">
    <text><![CDATA[.to]]></text>
  </DocumentChange>
  <DocumentChange __id="7010" _type="Replace" date="Mon Feb 08 16:52:01 EST 2021" docASTNodeCount="5058" docActiveCodeLength="29065" docExpressionCount="3480" docLength="31211" endLine="659" insertionLength="10" int_docASTNodeCount="4859" int_docActiveCodeLength="29055" int_docExpressionCount="3335" int_docLength="31201" length="2" offset="23839" startLine="659" starttimestamp="1612813070441" timestamp="8050960">
    <deletedText><![CDATA[to]]></deletedText>
    <insertedText><![CDATA[toArray(a)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7012" _type="Replace" date="Mon Feb 08 16:52:01 EST 2021" docASTNodeCount="5058" docActiveCodeLength="29065" docExpressionCount="3480" docLength="31211" endLine="659" insertionLength="1" int_docASTNodeCount="5057" int_docActiveCodeLength="29064" int_docExpressionCount="3479" int_docLength="31210" length="1" offset="23847" startLine="659" starttimestamp="1612813070441" timestamp="8051526">
    <deletedText><![CDATA[a]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7014" _type="Insert" date="Mon Feb 08 16:52:02 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29074" docExpressionCount="3335" docLength="31220" length="9" offset="23848" repeat="9" starttimestamp="1612813070441" timestamp="8051584" timestamp2="8054843">
    <text><![CDATA[ew string]]></text>
  </DocumentChange>
  <DocumentChange __id="7033" _type="Replace" date="Mon Feb 08 16:52:07 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29124" docExpressionCount="3335" docLength="31270" endLine="659" insertionLength="51" int_docASTNodeCount="4859" int_docActiveCodeLength="29073" int_docExpressionCount="3335" int_docLength="31219" length="1" offset="23851" startLine="659" starttimestamp="1612813070441" timestamp="8056640">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[com.sun.org.apache.xpath.internal.operations.String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7034" _type="Replace" date="Mon Feb 08 16:52:07 EST 2021" docASTNodeCount="5074" docActiveCodeLength="29121" docExpressionCount="3495" docLength="31267" endLine="659" insertionLength="2" int_docASTNodeCount="4859" int_docActiveCodeLength="29119" int_docExpressionCount="3335" int_docLength="31265" length="5" offset="23902" startLine="659" starttimestamp="1612813070441" timestamp="8056652">
    <deletedText><![CDATA[tring]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7036" _type="Replace" date="Mon Feb 08 16:52:07 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29124" docExpressionCount="3335" docLength="31270" endLine="659" insertionLength="5" int_docASTNodeCount="4859" int_docActiveCodeLength="29119" int_docExpressionCount="3335" int_docLength="31265" length="2" offset="23902" startLine="659" starttimestamp="1612813070441" timestamp="8057373">
    <deletedText><![CDATA[()]]></deletedText>
    <insertedText><![CDATA[tring]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7037" _type="Replace" date="Mon Feb 08 16:52:07 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29074" docExpressionCount="3335" docLength="31220" endLine="659" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="29073" int_docExpressionCount="3335" int_docLength="31219" length="51" offset="23851" startLine="659" starttimestamp="1612813070441" timestamp="8057381">
    <deletedText><![CDATA[com.sun.org.apache.xpath.internal.operations.String]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7038" _type="Delete" date="Mon Feb 08 16:52:07 EST 2021" docASTNodeCount="5058" docActiveCodeLength="29065" docExpressionCount="3480" docLength="31211" endLine="659" length="9" offset="23848" startLine="659" starttimestamp="1612813070441" timestamp="8057384">
    <text><![CDATA[ew string]]></text>
  </DocumentChange>
  <DocumentChange __id="7039" _type="Replace" date="Mon Feb 08 16:52:07 EST 2021" docASTNodeCount="5058" docActiveCodeLength="29065" docExpressionCount="3480" docLength="31211" endLine="659" insertionLength="1" int_docASTNodeCount="5057" int_docActiveCodeLength="29064" int_docExpressionCount="3479" int_docLength="31210" length="1" offset="23847" startLine="659" starttimestamp="1612813070441" timestamp="8057390">
    <deletedText><![CDATA[n]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7041" _type="Replace" date="Mon Feb 08 16:52:11 EST 2021" docASTNodeCount="5058" docActiveCodeLength="29065" docExpressionCount="3480" docLength="31211" endLine="659" insertionLength="1" int_docASTNodeCount="5057" int_docActiveCodeLength="29064" int_docExpressionCount="3479" int_docLength="31210" length="1" offset="23847" startLine="659" starttimestamp="1612813070441" timestamp="8061000">
    <deletedText><![CDATA[a]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7044" _type="Insert" date="Mon Feb 08 16:52:11 EST 2021" docASTNodeCount="5062" docActiveCodeLength="29077" docExpressionCount="3482" docLength="31223" length="12" offset="23848" repeat="11" starttimestamp="1612813070441" timestamp="8061038" timestamp2="8065269">
    <text><![CDATA[ew String[1]]]></text>
  </DocumentChange>
  <DocumentChange __id="7073" _type="Insert" date="Mon Feb 08 16:52:17 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29086" docExpressionCount="3335" docLength="31232" length="9" offset="23863" repeat="3" starttimestamp="1612813070441" timestamp="8067451" timestamp2="8068308">
    <text><![CDATA[
					ne]]></text>
  </DocumentChange>
  <DocumentChange __id="7080" _type="Replace" date="Mon Feb 08 16:52:19 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29092" docExpressionCount="3335" docLength="31238" endLine="660" insertionLength="8" int_docASTNodeCount="5062" int_docActiveCodeLength="29084" int_docExpressionCount="3482" int_docLength="31230" length="2" offset="23870" startLine="660" starttimestamp="1612813070441" timestamp="8068717">
    <deletedText><![CDATA[ne]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7082" _type="Insert" date="Mon Feb 08 16:52:19 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29102" docExpressionCount="3335" docLength="31248" length="10" offset="23878" repeat="10" starttimestamp="1612813070441" timestamp="8069171" timestamp2="8070460">
    <text><![CDATA[ = new arr]]></text>
  </DocumentChange>
  <Command __id="7071" _type="PauseCommand" date="Mon Feb 08 16:52:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8066357">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1083]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7070" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:52:16 EST 2021" starttimestamp="1612813070441" timestamp="8066357" />
  <Command __id="7072" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 08 16:52:17 EST 2021" starttimestamp="1612813070441" timestamp="8067263" />
  <Command __id="7074" _type="InsertStringCommand" date="Mon Feb 08 16:52:17 EST 2021" starttimestamp="1612813070441" timestamp="8067460" timestamp2="8067460">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7076" _type="InsertStringCommand" date="Mon Feb 08 16:52:18 EST 2021" starttimestamp="1612813070441" timestamp="8068080" timestamp2="8068080">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7077" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:18 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8068122" />
  <Command __id="7079" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:19 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8068710" />
  <Command __id="7081" _type="InsertStringCommand" date="Mon Feb 08 16:52:19 EST 2021" starttimestamp="1612813070441" timestamp="8068722" timestamp2="8068722">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7083" _type="InsertStringCommand" date="Mon Feb 08 16:52:19 EST 2021" starttimestamp="1612813070441" timestamp="8069175" timestamp2="8069175">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7085" _type="InsertStringCommand" date="Mon Feb 08 16:52:19 EST 2021" starttimestamp="1612813070441" timestamp="8069411" timestamp2="8069411">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7087" _type="InsertStringCommand" date="Mon Feb 08 16:52:19 EST 2021" starttimestamp="1612813070441" timestamp="8069517" timestamp2="8069517">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7089" _type="InsertStringCommand" date="Mon Feb 08 16:52:20 EST 2021" starttimestamp="1612813070441" timestamp="8069677" timestamp2="8069677">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7090" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8069721" />
  <Command __id="7094" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:20 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8070023" />
  <Command __id="7096" _type="InsertStringCommand" date="Mon Feb 08 16:52:20 EST 2021" starttimestamp="1612813070441" timestamp="8070053" timestamp2="8070053">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7097" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:20 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8070096" />
  <Command __id="7100" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:21 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8071309" />
  <Command __id="7103" _type="InsertStringCommand" date="Mon Feb 08 16:52:21 EST 2021" starttimestamp="1612813070441" timestamp="8071342" timestamp2="8071342">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7105" _type="InsertStringCommand" date="Mon Feb 08 16:52:22 EST 2021" starttimestamp="1612813070441" timestamp="8071945" timestamp2="8071945">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7107" _type="InsertStringCommand" date="Mon Feb 08 16:52:22 EST 2021" starttimestamp="1612813070441" timestamp="8072066" timestamp2="8072066">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7109" _type="InsertStringCommand" date="Mon Feb 08 16:52:23 EST 2021" starttimestamp="1612813070441" timestamp="8072961" timestamp2="8072961">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7110" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:23 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8073004" />
  <Command __id="7112" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:23 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8073260" />
  <Command __id="7114" _type="InsertStringCommand" date="Mon Feb 08 16:52:23 EST 2021" starttimestamp="1612813070441" timestamp="8073275" timestamp2="8073275">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7116" _type="InsertStringCommand" date="Mon Feb 08 16:52:24 EST 2021" starttimestamp="1612813070441" timestamp="8073790" timestamp2="8073790">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7117" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:52:24 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8073833" />
  <Command __id="7121" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:52:24 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8074338" />
  <Command __id="7123" _type="InsertStringCommand" date="Mon Feb 08 16:52:24 EST 2021" starttimestamp="1612813070441" timestamp="8074455" timestamp2="8074455">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7125" _type="InsertStringCommand" date="Mon Feb 08 16:52:25 EST 2021" starttimestamp="1612813070441" timestamp="8074804" timestamp2="8074804">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7127" _type="InsertStringCommand" date="Mon Feb 08 16:52:25 EST 2021" starttimestamp="1612813070441" timestamp="8075161" timestamp2="8075161">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 08 16:52:26 EST 2021" starttimestamp="1612813070441" timestamp="8075709" />
  <Command __id="7130" _type="InsertStringCommand" date="Mon Feb 08 16:52:26 EST 2021" starttimestamp="1612813070441" timestamp="8075968" timestamp2="8075968">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7132" _type="PauseCommand" date="Mon Feb 08 16:52:27 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8077083">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1115]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7131" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 16:52:27 EST 2021" starttimestamp="1612813070441" timestamp="8077083" />
  <Command __id="7133" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:52:27 EST 2021" starttimestamp="1612813070441" timestamp="8077222" />
  <Command __id="7134" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:52:27 EST 2021" starttimestamp="1612813070441" timestamp="8077340" />
  <Command __id="7136" _type="PauseCommand" date="Mon Feb 08 16:52:28 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8078530">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1190]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7135" _type="MoveCaretCommand" caretOffset="3988" date="Mon Feb 08 16:52:28 EST 2021" docOffset="23930" starttimestamp="1612813070441" timestamp="8078530" />
  <Command __id="7138" _type="PauseCommand" date="Mon Feb 08 16:52:31 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8080649">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2119]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7137" _type="MoveCaretCommand" caretOffset="3994" date="Mon Feb 08 16:52:31 EST 2021" docOffset="23936" starttimestamp="1612813070441" timestamp="8080649" />
  <Command __id="7183" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:52:39 EST 2021" starttimestamp="1612813070441" timestamp="8088618" />
  <Command __id="7185" _type="PauseCommand" date="Mon Feb 08 16:52:47 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8097168">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8550]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7186" _type="MoveCaretCommand" caretOffset="4445" date="Mon Feb 08 16:52:47 EST 2021" docOffset="33862" starttimestamp="1612813070441" timestamp="8097336" />
  <Command __id="7188" _type="MoveCaretCommand" caretOffset="822" date="Mon Feb 08 16:52:48 EST 2021" docOffset="849" starttimestamp="1612813070441" timestamp="8098317" />
  <DocumentChange __id="7101" _type="Replace" date="Mon Feb 08 16:52:21 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29112" docExpressionCount="3335" docLength="31258" endLine="660" insertionLength="11" int_docASTNodeCount="4859" int_docActiveCodeLength="29101" int_docExpressionCount="3335" int_docLength="31247" length="1" offset="23885" startLine="660" starttimestamp="1612813070441" timestamp="8071317">
    <deletedText><![CDATA[a]]></deletedText>
    <insertedText><![CDATA[ArrayList<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7102" _type="Replace" date="Mon Feb 08 16:52:21 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29112" docExpressionCount="3335" docLength="31258" endLine="660" insertionLength="2" int_docASTNodeCount="4859" int_docActiveCodeLength="29110" int_docExpressionCount="3335" int_docLength="31256" length="2" offset="23896" startLine="660" starttimestamp="1612813070441" timestamp="8071335">
    <deletedText><![CDATA[rr]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7104" _type="Insert" date="Mon Feb 08 16:52:22 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29122" docExpressionCount="3335" docLength="31268" length="10" offset="23898" repeat="4" starttimestamp="1612813070441" timestamp="8071940" timestamp2="8073194">
    <text><![CDATA[;
					ne]]></text>
  </DocumentChange>
  <DocumentChange __id="7113" _type="Replace" date="Mon Feb 08 16:52:23 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29128" docExpressionCount="3335" docLength="31274" endLine="661" insertionLength="8" int_docASTNodeCount="5069" int_docActiveCodeLength="29120" int_docExpressionCount="3486" int_docLength="31266" length="2" offset="23906" startLine="661" starttimestamp="1612813070441" timestamp="8073267">
    <deletedText><![CDATA[ne]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7115" _type="Insert" date="Mon Feb 08 16:52:24 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29132" docExpressionCount="3335" docLength="31278" length="4" offset="23914" repeat="4" starttimestamp="1612813070441" timestamp="8073785" timestamp2="8074257">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <DocumentChange __id="7122" _type="Replace" date="Mon Feb 08 16:52:24 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29135" docExpressionCount="3335" docLength="31281" endLine="661" insertionLength="6" int_docASTNodeCount="4859" int_docActiveCodeLength="29129" int_docExpressionCount="3335" int_docLength="31275" length="3" offset="23915" startLine="661" starttimestamp="1612813070441" timestamp="8074344">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7124" _type="Replace" date="Mon Feb 08 16:52:25 EST 2021" docASTNodeCount="4510" docActiveCodeLength="29135" docExpressionCount="3104" docLength="31281" endLine="661" insertionLength="1" int_docASTNodeCount="4859" int_docActiveCodeLength="29134" int_docExpressionCount="3335" int_docLength="31280" length="1" offset="23919" startLine="661" starttimestamp="1612813070441" timestamp="8074796">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7126" _type="Insert" date="Mon Feb 08 16:52:25 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29136" docExpressionCount="3335" docLength="31282" length="1" offset="23920" starttimestamp="1612813070441" timestamp="8075153">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="7129" _type="Insert" date="Mon Feb 08 16:52:26 EST 2021" docASTNodeCount="5074" docActiveCodeLength="29137" docExpressionCount="3490" docLength="31283" length="1" offset="23922" starttimestamp="1612813070441" timestamp="8075962">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7139" _type="Insert" date="Mon Feb 08 16:52:32 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29144" docExpressionCount="3335" docLength="31290" length="7" offset="23936" repeat="3" starttimestamp="1612813070441" timestamp="8081918" timestamp2="8082361">
    <text><![CDATA[
			fw]]></text>
  </DocumentChange>
  <DocumentChange __id="7147" _type="Replace" date="Mon Feb 08 16:52:32 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29145" docExpressionCount="3335" docLength="31291" endLine="664" insertionLength="3" int_docASTNodeCount="5074" int_docActiveCodeLength="29142" int_docExpressionCount="3490" int_docLength="31288" length="2" offset="23941" startLine="664" starttimestamp="1612813070441" timestamp="8082383">
    <deletedText><![CDATA[fw]]></deletedText>
    <insertedText><![CDATA[fw.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7150" _type="Insert" date="Mon Feb 08 16:52:33 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29146" docExpressionCount="3335" docLength="31292" length="1" offset="23944" starttimestamp="1612813070441" timestamp="8082618">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="7151" _type="Delete" date="Mon Feb 08 16:52:33 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29144" docExpressionCount="3335" docLength="31290" endLine="664" length="2" offset="23943" repeat="2" startLine="664" starttimestamp="1612813070441" timestamp="8083515" timestamp2="8083648">
    <text><![CDATA[.c]]></text>
  </DocumentChange>
  <DocumentChange __id="7153" _type="Insert" date="Mon Feb 08 16:52:34 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29145" docExpressionCount="3335" docLength="31291" length="1" offset="23943" starttimestamp="1612813070441" timestamp="8083747">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="7155" _type="Replace" date="Mon Feb 08 16:52:35 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29146" docExpressionCount="3335" docLength="31292" endLine="664" insertionLength="4" int_docASTNodeCount="5074" int_docActiveCodeLength="29142" int_docExpressionCount="3490" int_docLength="31288" length="3" offset="23941" startLine="664" starttimestamp="1612813070441" timestamp="8084598">
    <deletedText><![CDATA[fw2]]></deletedText>
    <insertedText><![CDATA[fw2.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7158" _type="Insert" date="Mon Feb 08 16:52:35 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29148" docExpressionCount="3335" docLength="31294" length="2" offset="23945" repeat="2" starttimestamp="1612813070441" timestamp="8084845" timestamp2="8084863">
    <text><![CDATA[cl]]></text>
  </DocumentChange>
  <DocumentChange __id="7161" _type="Replace" date="Mon Feb 08 16:52:35 EST 2021" docASTNodeCount="5078" docActiveCodeLength="29154" docExpressionCount="3493" docLength="31300" endLine="664" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="29146" int_docExpressionCount="3335" int_docLength="31292" length="2" offset="23945" startLine="664" starttimestamp="1612813070441" timestamp="8085079">
    <deletedText><![CDATA[cl]]></deletedText>
    <insertedText><![CDATA[close();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7164" _type="Insert" date="Mon Feb 08 16:52:35 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29162" docExpressionCount="3335" docLength="31308" length="8" offset="23953" repeat="4" starttimestamp="1612813070441" timestamp="8085426" timestamp2="8086754">
    <text><![CDATA[
			cw2]]></text>
  </DocumentChange>
  <DocumentChange __id="7172" _type="Replace" date="Mon Feb 08 16:52:37 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29163" docExpressionCount="3335" docLength="31309" endLine="665" insertionLength="4" int_docASTNodeCount="5078" int_docActiveCodeLength="29159" int_docExpressionCount="3493" int_docLength="31305" length="3" offset="23958" startLine="665" starttimestamp="1612813070441" timestamp="8086900">
    <deletedText><![CDATA[cw2]]></deletedText>
    <insertedText><![CDATA[cw2.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7175" _type="Insert" date="Mon Feb 08 16:52:37 EST 2021" docASTNodeCount="4859" docActiveCodeLength="29165" docExpressionCount="3335" docLength="31311" length="2" offset="23962" repeat="2" starttimestamp="1612813070441" timestamp="8087153" timestamp2="8087264">
    <text><![CDATA[cl]]></text>
  </DocumentChange>
  <DocumentChange __id="7178" _type="Replace" date="Mon Feb 08 16:52:37 EST 2021" docASTNodeCount="5082" docActiveCodeLength="29171" docExpressionCount="3496" docLength="31317" endLine="665" insertionLength="8" int_docASTNodeCount="4859" int_docActiveCodeLength="29163" int_docExpressionCount="3335" int_docLength="31309" length="2" offset="23962" startLine="665" starttimestamp="1612813070441" timestamp="8087487">
    <deletedText><![CDATA[cl]]></deletedText>
    <insertedText><![CDATA[close();]]></insertedText>
  </DocumentChange>
  <Command __id="7184" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:52:47 EST 2021" docASTNodeCount="6300" docActiveCodeLength="36351" docExpressionCount="4224" docLength="36406" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8097168">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="7187" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:52:48 EST 2021" docASTNodeCount="78" docActiveCodeLength="698" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8098170">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="7192" _type="Insert" date="Mon Feb 08 16:52:51 EST 2021" docASTNodeCount="73" docActiveCodeLength="635" docExpressionCount="34" docLength="936" length="2" offset="770" starttimestamp="1612813070441" timestamp="8100576">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7190" _type="PauseCommand" date="Mon Feb 08 16:52:49 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8099450">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1133]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7189" _type="MoveCaretCommand" caretOffset="720" date="Mon Feb 08 16:52:49 EST 2021" docOffset="747" starttimestamp="1612813070441" timestamp="8099450" />
  <Command __id="7191" _type="MoveCaretCommand" caretOffset="763" date="Mon Feb 08 16:52:50 EST 2021" docOffset="790" starttimestamp="1612813070441" timestamp="8099876" />
  <Command __id="7193" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:52:51 EST 2021" starttimestamp="1612813070441" timestamp="8100589" />
  <Command __id="7194" _type="MoveCaretCommand" caretOffset="828" date="Mon Feb 08 16:52:51 EST 2021" docOffset="855" starttimestamp="1612813070441" timestamp="8100893" />
  <Command __id="7196" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:52:51 EST 2021" starttimestamp="1612813070441" timestamp="8100935" />
  <Command __id="7197" _type="MoveCaretCommand" caretOffset="714" date="Mon Feb 08 16:52:51 EST 2021" docOffset="741" starttimestamp="1612813070441" timestamp="8101241" />
  <Command __id="7199" _type="PauseCommand" date="Mon Feb 08 16:52:55 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8104944">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3703]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7200" _type="MoveCaretCommand" caretOffset="4028" date="Mon Feb 08 16:52:55 EST 2021" docOffset="23970" starttimestamp="1612813070441" timestamp="8105088" />
  <Command __id="7202" _type="PauseCommand" date="Mon Feb 08 16:53:00 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8110123">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5035]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7201" _type="SelectTextCommand" caretOffset="1066" date="Mon Feb 08 16:53:00 EST 2021" end="1066" start="910" starttimestamp="1612813070441" timestamp="8110123" />
  <Command __id="7207" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Feb 08 16:53:01 EST 2021" starttimestamp="1612813070441" timestamp="8110810" />
  <Command __id="7208" _type="MoveCaretCommand" caretOffset="1074" date="Mon Feb 08 16:53:01 EST 2021" docOffset="7673" starttimestamp="1612813070441" timestamp="8110983" />
  <Command __id="7209" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 16:53:02 EST 2021" starttimestamp="1612813070441" timestamp="8111774" />
  <Command __id="7210" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:53:02 EST 2021" starttimestamp="1612813070441" timestamp="8111863" />
  <Command __id="7211" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:53:02 EST 2021" starttimestamp="1612813070441" timestamp="8111970" />
  <Command __id="7212" _type="ShellCommand" date="Mon Feb 08 16:53:03 EST 2021" starttimestamp="1612813070441" timestamp="8112924" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7214" _type="PauseCommand" date="Mon Feb 08 16:53:04 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8114029">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1105]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7213" _type="ShellCommand" date="Mon Feb 08 16:53:04 EST 2021" starttimestamp="1612813070441" timestamp="8114029" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7215" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:53:04 EST 2021" starttimestamp="1612813070441" timestamp="8114183" />
  <Command __id="7216" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:53:04 EST 2021" starttimestamp="1612813070441" timestamp="8114257" />
  <Command __id="7217" _type="RunCommand" date="Mon Feb 08 16:53:04 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8114293" type="Run" />
  <Command __id="7218" _type="RunCommand" date="Mon Feb 08 16:53:04 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8114293" type="Run" />
  <Command __id="7219" _type="ConsoleOutput" date="Mon Feb 08 16:53:05 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8115226" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading "), Diff(DELETE,"24"), Diff(INSERT,"student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7220" _type="ConsoleOutput" date="Mon Feb 08 16:53:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8115693" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-36-31-023.xml"), Diff(INSERT,"09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"4-3"), Diff(INSERT,"5-05-47-820.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-0"), Diff(EQUAL,"9-"), Diff(DELETE,"5"), Diff(INSERT,"1"), Diff(EQUAL,"2-"), Diff(DELETE,"726"), Diff(INSERT,"10-40-05-321"), Diff(EQUAL,".xml¶Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"16\Eclipse\Rest\Log2013-09-13-14-54-59-878"), Diff(INSERT,"21\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7221" _type="ConsoleOutput" date="Mon Feb 08 16:53:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8115768" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"17"), Diff(INSERT,"23"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"17"), Diff(INSERT,"23"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"-09-"), Diff(DELETE,"53-29-705"), Diff(INSERT,"48-24-508"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19"), Diff(INSERT,"23"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5-05-47-820"), Diff(INSERT,"0-54-43-267"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2-10-40-05-321.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22"), Diff(INSERT,"4-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5-38-06-069"), Diff(INSERT,"3-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7222" _type="ConsoleOutput" date="Mon Feb 08 16:53:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8115876" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"04-982"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-4"), Diff(INSERT,"5-33-0"), Diff(EQUAL,"3-2"), Diff(INSERT,"2"), Diff(EQUAL,"6"), Diff(DELETE,"7"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7223" _type="ConsoleOutput" date="Mon Feb 08 16:53:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8115983" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"-14-3"), Diff(DELETE,"9-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071"), Diff(INSERT,"0-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7224" _type="ConsoleOutput" date="Mon Feb 08 16:53:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8116064" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-379"), Diff(INSERT,"2-56-55-221"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7225" _type="ConsoleOutput" date="Mon Feb 08 16:53:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8116118" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"11-15-13-48-829"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7226" _type="ConsoleOutput" date="Mon Feb 08 16:53:06 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8116178" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0\Eclipse\Rest\Log2013-09-11-15-13-4"), Diff(INSERT,"1\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-1"), Diff(EQUAL,"8-8"), Diff(INSERT,"6"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,".xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml¶Reading student Eclipse¶")]]]></diff>
  </Command>
  <Command __id="7227" _type="ExceptionCommand" date="Mon Feb 08 16:53:06 EST 2021" starttimestamp="1612813070441" timestamp="8116238" type="Exception">
    <exceptionString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
Writing Experiment student 22 to ExperimentWebStats.csv
Exception in thread "main" java.lang.NullPointerException
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:614)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:232)
	at logAnalyzer.Driver.main(Driver.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="7259" _type="PauseCommand" date="Mon Feb 08 16:53:36 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8145645">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5545]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7258" _type="ShellCommand" date="Mon Feb 08 16:53:36 EST 2021" starttimestamp="1612813070441" timestamp="8145645" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7264" _type="PauseCommand" date="Mon Feb 08 16:53:39 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8149084">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1321]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7265" _type="MoveCaretCommand" caretOffset="1971" date="Mon Feb 08 16:53:39 EST 2021" docOffset="1971" starttimestamp="1612813070441" timestamp="8149228" />
  <Command __id="7267" _type="PauseCommand" date="Mon Feb 08 16:54:01 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="8170589">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[21361]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7268" _type="MoveCaretCommand" caretOffset="2830" date="Mon Feb 08 16:54:01 EST 2021" docOffset="22003" starttimestamp="1612813070441" timestamp="8170735" />
  <Command __id="7270" _type="PauseCommand" date="Mon Feb 08 16:54:03 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8173268">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2533]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7269" _type="MoveCaretCommand" caretOffset="2771" date="Mon Feb 08 16:54:03 EST 2021" docOffset="21944" starttimestamp="1612813070441" timestamp="8173268" />
  <Command __id="7271" _type="SelectTextCommand" caretOffset="2773" date="Mon Feb 08 16:54:03 EST 2021" end="2773" start="2767" starttimestamp="1612813070441" timestamp="8173407" />
  <Command __id="7273" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:54:04 EST 2021" starttimestamp="1612813070441" timestamp="8174001" />
  <Command __id="7275" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 08 16:54:04 EST 2021" starttimestamp="1612813070441" timestamp="8174129" />
  <Command __id="7276" _type="MoveCaretCommand" caretOffset="2707" date="Mon Feb 08 16:54:05 EST 2021" docOffset="21880" starttimestamp="1612813070441" timestamp="8174647" />
  <Command __id="7282" _type="PauseCommand" date="Mon Feb 08 16:54:10 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8180537">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1189]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="7281" _type="RunCommand" date="Mon Feb 08 16:54:10 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8180537" type="Run" />
  <Command __id="7284" _type="PauseCommand" date="Mon Feb 08 16:54:21 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="8191356">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[10819]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7283" _type="MoveCaretCommand" caretOffset="2745" date="Mon Feb 08 16:54:21 EST 2021" docOffset="21918" starttimestamp="1612813070441" timestamp="8191356" />
  <Command __id="7286" _type="PauseCommand" date="Mon Feb 08 16:54:24 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8194556">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3200]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7285" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Feb 08 16:54:24 EST 2021" starttimestamp="1612813070441" timestamp="8194556" />
  <Command __id="7287" _type="RunCommand" date="Mon Feb 08 16:54:25 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8194607" type="Debug" />
  <Command __id="7288" _type="RunCommand" date="Mon Feb 08 16:54:25 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8194607" type="Debug" />
  <Command __id="7289" _type="RunCommand" date="Mon Feb 08 16:54:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8194607" type="Run" />
  <Command __id="7291" _type="PauseCommand" date="Mon Feb 08 16:54:28 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8198524">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3917]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7290" _type="ShellCommand" date="Mon Feb 08 16:54:28 EST 2021" starttimestamp="1612813070441" timestamp="8198524" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7318" _type="PauseCommand" date="Mon Feb 08 16:54:37 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8206927">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1183]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="7317" _type="RunCommand" date="Mon Feb 08 16:54:37 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8206927" type="Run" />
  <Command __id="7320" _type="PauseCommand" date="Mon Feb 08 16:54:40 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8209907">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2980]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7319" _type="ShellCommand" date="Mon Feb 08 16:54:40 EST 2021" starttimestamp="1612813070441" timestamp="8209907" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7400" _type="PauseCommand" date="Mon Feb 08 16:55:18 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8247934">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1964]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="7399" _type="RunCommand" date="Mon Feb 08 16:55:18 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8247934" type="Run" />
  <Command __id="7401" _type="RunCommand" date="Mon Feb 08 16:55:18 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8247935" type="Run" />
  <Command __id="7402" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:55:18 EST 2021" starttimestamp="1612813070441" timestamp="8248028" />
  <Command __id="7403" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:55:18 EST 2021" starttimestamp="1612813070441" timestamp="8248035" />
  <Command __id="7404" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:55:18 EST 2021" starttimestamp="1612813070441" timestamp="8248036" />
  <Command __id="7405" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:55:18 EST 2021" starttimestamp="1612813070441" timestamp="8248041" />
  <Command __id="7406" _type="ConsoleOutput" date="Mon Feb 08 16:55:19 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8248794" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing Experiment student 22 to ExperimentWebStats.csv"), Diff(INSERT,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7407" _type="ConsoleOutput" date="Mon Feb 08 16:55:19 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249034" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-36-31-023"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE,"\Log2013-09-13-14-39-52-726.xml"), Diff(INSERT," has 1 file(s)"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-54-59-878"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7408" _type="ConsoleOutput" date="Mon Feb 08 16:55:19 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249132" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶Reading student Eclipse¶"), Diff(DELETE,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶")]]]></diff>
  </Command>
  <Command __id="7409" _type="ConsoleOutput" date="Mon Feb 08 16:55:19 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249192" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-12-1"), Diff(DELETE,"5-05-47-820.xml¶Reading student Eclipse"), Diff(INSERT,"0-40-05-321.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7410" _type="ConsoleOutput" date="Mon Feb 08 16:55:19 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249252" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"6"), Diff(EQUAL,"-10-"), Diff(DELETE,"40-05-321"), Diff(INSERT,"05-18-718.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7411" _type="ConsoleOutput" date="Mon Feb 08 16:55:19 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249366" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"6-10"), Diff(INSERT,"4-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013"), Diff(EQUAL,"-0"), Diff(DELETE,"5"), Diff(INSERT,"9"), Diff(EQUAL,"-1"), Diff(DELETE,"8-718"), Diff(INSERT,"4-10-54-43-267"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"2-59"), Diff(EQUAL,"-3"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"-0"), Diff(DELETE,"6-069"), Diff(INSERT,"52.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7412" _type="ConsoleOutput" date="Mon Feb 08 16:55:19 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249471" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"04-982"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-4"), Diff(INSERT,"5-33-0"), Diff(EQUAL,"3-2"), Diff(INSERT,"2"), Diff(EQUAL,"6"), Diff(DELETE,"7"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7413" _type="ConsoleOutput" date="Mon Feb 08 16:55:20 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249578" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"-14-3"), Diff(DELETE,"9-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071"), Diff(INSERT,"0-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7414" _type="ConsoleOutput" date="Mon Feb 08 16:55:20 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249657" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-37"), Diff(INSERT,"2-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-82"), Diff(EQUAL,"9.xml¶")]]]></diff>
  </Command>
  <Command __id="7415" _type="ConsoleOutput" date="Mon Feb 08 16:55:20 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249758" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"31\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"3-12-"), Diff(DELETE,"56-55-221"), Diff(INSERT,"11-53-568"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(INSERT,"2-3"), Diff(EQUAL,"5-1"), Diff(DELETE,"3-4"), Diff(EQUAL,"8-8"), Diff(INSERT,"6"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,".xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml¶Reading student Eclipse¶")]]]></diff>
  </Command>
  <Command __id="7416" _type="ConsoleOutput" date="Mon Feb 08 16:55:20 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8249834" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
Writing Experiment student 22 to ExperimentWebStats.csv
Writing Experiment student 33 to ExperimentWebStats.csv
Writing Experiment student 23 to ExperimentWebStats.csv
Writing Experiment student 24 to ExperimentWebStats.csv
Writing Experiment student 26 to ExperimentWebStats.csv
Writing Experiment student 16 to ExperimentWebStats.csv
Writing Experiment student 27 to ExperimentWebStats.csv
Writing Experiment student 17 to ExperimentWebStats.csv
Writing Experiment student 28 to ExperimentWebStats.csv
Writing Experiment student 18 to ExperimentWebStats.csv
Writing Experiment student 29 to ExperimentWebStats.csv
Writing Experiment student 19 to ExperimentWebStats.csv
Writing Experiment student pd1 to ExperimentWebStats.csv
Writing Experiment student 30 to ExperimentWebStats.csv
Writing Experiment student 20 to ExperimentWebStats.csv
Writing Experiment student 31 to ExperimentWebStats.csv
Writing Experiment student 21 to ExperimentWebStats.csv
Writing Experiment student 32 to ExperimentWebStats.csv
Writing Experiment student pd2 to ExperimentWebStats.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶Particpant"), Diff(INSERT,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-13-12-11-53-568.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33"), Diff(INSERT,"5-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02-12-12-57-56-864.xml¶Reading student Eclipse"), Diff(INSERT,"4-10-04-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentWebStats.csv¶Writing Experiment student 33 to ExperimentWebStats.csv¶Writing Experiment student 23 to ExperimentWebStats.csv¶Writing Experiment student 24 to ExperimentWebStats.csv¶Writing Experiment student 26 to ExperimentWebStats.csv¶Writing Experiment student 16 to ExperimentWebStats.csv¶Writing Experiment student 27 to ExperimentWebStats.csv¶Writing Experiment student 17 to ExperimentWebStats.csv¶Writing Experiment student 28 to ExperimentWebStats.csv¶Writing Experiment student 18 to ExperimentWebStats.csv¶Writing Experiment student 29 to ExperimentWebStats.csv¶Writing Experiment student 19 to ExperimentWebStats.csv¶Writing Experiment student pd1 to ExperimentWebStats.csv¶Writing Experiment student 30 to ExperimentWebStats.csv¶Writing Experiment student 20 to ExperimentWebStats.csv¶Writing Experiment student 31 to ExperimentWebStats.csv¶Writing Experiment student 21 to ExperimentWebStats.csv¶Writing Experiment student 32 to ExperimentWebStats.csv¶Writing Experiment student pd2 to ExperimentWebStats.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7417" _type="RunCommand" date="Mon Feb 08 16:55:20 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8250021" type="Debug" />
  <Command __id="7418" _type="RunCommand" date="Mon Feb 08 16:55:20 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8250021" type="Run" />
  <Command __id="7419" _type="RunCommand" date="Mon Feb 08 16:55:20 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8250021" type="Debug" />
  <Command __id="7420" _type="RunCommand" date="Mon Feb 08 16:55:20 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8250021" type="Run" />
  <Command __id="7421" _type="ShellCommand" date="Mon Feb 08 16:55:21 EST 2021" starttimestamp="1612813070441" timestamp="8250851" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7423" _type="PauseCommand" date="Mon Feb 08 16:55:24 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8254339">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[3488]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7422" _type="ShellCommand" date="Mon Feb 08 16:55:24 EST 2021" starttimestamp="1612813070441" timestamp="8254339" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7424" _type="ShellCommand" date="Mon Feb 08 16:55:25 EST 2021" starttimestamp="1612813070441" timestamp="8255163" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7426" _type="PauseCommand" date="Mon Feb 08 16:55:51 EST 2021" range="20s-30s" starttimestamp="1612813070441" timestamp="8280754">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[25591]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7425" _type="ShellCommand" date="Mon Feb 08 16:55:51 EST 2021" starttimestamp="1612813070441" timestamp="8280754" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7428" _type="MoveCaretCommand" caretOffset="2786" date="Mon Feb 08 16:55:51 EST 2021" docOffset="21959" starttimestamp="1612813070441" timestamp="8281009" />
  <Command __id="7430" _type="PauseCommand" date="Mon Feb 08 16:55:56 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8286360">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5351]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7429" _type="SelectTextCommand" caretOffset="6767" date="Mon Feb 08 16:55:56 EST 2021" end="8263" start="6767" starttimestamp="1612813070441" timestamp="8286360" />
  <Command __id="7432" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:55:57 EST 2021" starttimestamp="1612813070441" timestamp="8286923" />
  <Command __id="7434" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 08 16:55:57 EST 2021" starttimestamp="1612813070441" timestamp="8287065" />
  <Command __id="7436" _type="PauseCommand" date="Mon Feb 08 16:56:05 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8295311">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8246]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7435" _type="MoveCaretCommand" caretOffset="4563" date="Mon Feb 08 16:56:05 EST 2021" docOffset="23736" starttimestamp="1612813070441" timestamp="8295311" />
  <Command __id="7438" _type="InsertStringCommand" date="Mon Feb 08 16:56:06 EST 2021" starttimestamp="1612813070441" timestamp="8296048" timestamp2="8296048">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="7440" _type="InsertStringCommand" date="Mon Feb 08 16:56:06 EST 2021" starttimestamp="1612813070441" timestamp="8296392" timestamp2="8296392">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="7442" _type="PauseCommand" date="Mon Feb 08 16:56:08 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8297574">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1182]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7441" _type="MoveCaretCommand" caretOffset="4541" date="Mon Feb 08 16:56:08 EST 2021" docOffset="23714" starttimestamp="1612813070441" timestamp="8297574" />
  <Command __id="7443" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 16:56:08 EST 2021" starttimestamp="1612813070441" timestamp="8297787" />
  <Command __id="7444" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:56:08 EST 2021" starttimestamp="1612813070441" timestamp="8297927" />
  <Command __id="7445" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:56:08 EST 2021" starttimestamp="1612813070441" timestamp="8298041" />
  <Command __id="7447" _type="PauseCommand" date="Mon Feb 08 16:56:10 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8300306">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2265]]></rest>
    <prev><![CDATA[EclipseCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7448" _type="MoveCaretCommand" caretOffset="714" date="Mon Feb 08 16:56:10 EST 2021" docOffset="741" starttimestamp="1612813070441" timestamp="8300454" />
  <Command __id="7452" _type="PauseCommand" date="Mon Feb 08 16:56:13 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8303366">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1048]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="7451" _type="RunCommand" date="Mon Feb 08 16:56:13 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8303366" type="Run" />
  <Command __id="7453" _type="RunCommand" date="Mon Feb 08 16:56:13 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8303366" type="Run" />
  <Command __id="7454" _type="ConsoleOutput" date="Mon Feb 08 16:56:14 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8304288" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading"), Diff(INSERT,"Reading student Eclipse¶Particpant"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"pd"), Diff(EQUAL,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE,"\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-"), Diff(INSERT," has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-0"), Diff(EQUAL,"23"), Diff(DELETE,"2"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"pd"), Diff(EQUAL,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"4-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06"), Diff(INSERT,"3-09-13-14-39"), Diff(EQUAL,"-5"), Diff(DELETE,"7"), Diff(INSERT,"2"), Diff(EQUAL,"-7"), Diff(DELETE,"84"), Diff(INSERT,"26"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"pd"), Diff(EQUAL,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"4-10"), Diff(INSERT,"3"), Diff(EQUAL,"-0"), Diff(DELETE,"4"), Diff(INSERT,"9"), Diff(EQUAL,"-13-1"), Diff(DELETE,"3-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentWebStats.csv¶Writing Experiment student 33 to ExperimentWebStats.csv¶Writing Experiment student 23 to ExperimentWebStats.csv¶Writing Experiment student 24 to ExperimentWebStats.csv¶Writing Experiment student 26 to ExperimentWebStats.csv¶Writing Experiment student 16 to ExperimentWebStats.csv¶Writing Experiment student 27 to ExperimentWebStats.csv¶Writing Experiment student 17 to ExperimentWebStats.csv¶Writing Experiment student 28 to ExperimentWebStats.csv¶Writing Experiment student 18 to ExperimentWebStats.csv¶Writing Experiment student 29 to ExperimentWebStats.csv¶Writing Experiment student 19 to ExperimentWebStats.csv¶Writing Experiment student pd1 to ExperimentWebStats.csv¶Writing Experiment student 30 to ExperimentWebStats.csv¶Writing Experiment student 20 to ExperimentWebStats.csv¶Writing Experiment student 31 to ExperimentWebStats.csv¶Writing Experiment student 21 to ExperimentWebStats.csv¶Writing Experiment student 32 to ExperimentWebStats.csv¶Writing Experiment student pd2 to ExperimentWebStats.csv"), Diff(INSERT,"4-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7455" _type="ConsoleOutput" date="Mon Feb 08 16:56:14 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8304476" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-36-31-023"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE,"\Log2013-09-13-14-39-52-726.xml"), Diff(INSERT," has 1 file(s)"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-54-59-878"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7456" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8304577" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶Reading student Eclipse¶"), Diff(DELETE,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶")]]]></diff>
  </Command>
  <Command __id="7457" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8304636" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-12-1"), Diff(DELETE,"5-05-47-820.xml¶Reading student Eclipse"), Diff(INSERT,"0-40-05-321.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7458" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8304695" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"6"), Diff(EQUAL,"-10-"), Diff(DELETE,"40-05-321"), Diff(INSERT,"05-18-718.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7459" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8304814" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"6-10"), Diff(INSERT,"4-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013"), Diff(EQUAL,"-0"), Diff(DELETE,"5"), Diff(INSERT,"9"), Diff(EQUAL,"-1"), Diff(DELETE,"8-718"), Diff(INSERT,"4-10-54-43-267"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"2-59"), Diff(EQUAL,"-3"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"-0"), Diff(DELETE,"6-069"), Diff(INSERT,"52.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7460" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8304919" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"04-982"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-4"), Diff(INSERT,"5-33-0"), Diff(EQUAL,"3-2"), Diff(INSERT,"2"), Diff(EQUAL,"6"), Diff(DELETE,"7"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7461" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8305024" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"-14-3"), Diff(DELETE,"9-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071"), Diff(INSERT,"0-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7462" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8305105" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-37"), Diff(INSERT,"2-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-82"), Diff(EQUAL,"9.xml¶")]]]></diff>
  </Command>
  <Command __id="7463" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8305209" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"31\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"3-12-"), Diff(DELETE,"56-55-221"), Diff(INSERT,"11-53-568"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"5-13-48"), Diff(INSERT,"2-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23"), Diff(EQUAL,"-82"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7464" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8305278" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
Writing Experiment student 22 to ExperimentWebStats.csv
Writing Experiment student 33 to ExperimentWebStats.csv
Writing Experiment student 23 to ExperimentWebStats.csv
Writing Experiment student 24 to ExperimentWebStats.csv
Writing Experiment student 26 to ExperimentWebStats.csv
Writing Experiment student 16 to ExperimentWebStats.csv
Writing Experiment student 27 to ExperimentWebStats.csv
Writing Experiment student 17 to ExperimentWebStats.csv
Writing Experiment student 28 to ExperimentWebStats.csv
Writing Experiment student 18 to ExperimentWebStats.csv
Writing Experiment student 29 to ExperimentWebStats.csv
Writing Experiment student 19 to ExperimentWebStats.csv
Writing Experiment student pd1 to ExperimentWebStats.csv
Writing Experiment student 30 to ExperimentWebStats.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading "), Diff(DELETE,"student Eclipse¶Particpant"), Diff(INSERT,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-13-12-11-53-568.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02-12-12-3"), Diff(INSERT,"4-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-1"), Diff(EQUAL,"5-"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"8-"), Diff(DELETE,"862"), Diff(INSERT,"180"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2-57-56-864"), Diff(INSERT,"7-08-589"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest has 1"), Diff(DELETE,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-10-09-23-822.xml"), Diff(INSERT,"10-04-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentWebStats.csv¶Writing Experiment student 33 to ExperimentWebStats.csv¶Writing Experiment student 23 to ExperimentWebStats.csv¶Writing Experiment student 24 to ExperimentWebStats.csv¶Writing Experiment student 26 to ExperimentWebStats.csv¶Writing Experiment student 16 to ExperimentWebStats.csv¶Writing Experiment student 27 to ExperimentWebStats.csv¶Writing Experiment student 17 to ExperimentWebStats.csv¶Writing Experiment student 28 to ExperimentWebStats.csv¶Writing Experiment student 18 to ExperimentWebStats.csv¶Writing Experiment student 29 to ExperimentWebStats.csv¶Writing Experiment student 19 to ExperimentWebStats.csv¶Writing Experiment student pd1 to ExperimentWebStats.csv¶Writing Experiment student 30 to ExperimentWebStats.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7465" _type="ConsoleOutput" date="Mon Feb 08 16:56:15 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8305337" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 20 to ExperimentWebStats.csv
Writing Experiment student 31 to ExperimentWebStats.csv
Writing Experiment student 21 to ExperimentWebStats.csv
Writing Experiment student 32 to ExperimentWebStats.csv
Writing Experiment student pd2 to ExperimentWebStats.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentWebStats.csv¶Writing Experiment student 33 to ExperimentWebStats.csv¶Writing Experiment student 23 to ExperimentWebStats.csv¶Writing Experiment student 24 to ExperimentWebStats.csv¶Writing Experiment student 26 to ExperimentWebStats.csv¶Writing Experiment student 16 to ExperimentWebStats.csv¶Writing Experiment student 27 to ExperimentWebStats.csv¶Writing Experiment student 17"), Diff(INSERT,"Writing Experiment student 20 to ExperimentWebStats.csv¶Writing Experiment student 31 to ExperimentWebStats.csv¶Writing Experiment student 21"), Diff(EQUAL," to ExperimentWebStats.csv¶Writing Experiment student "), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"8"), Diff(EQUAL," to ExperimentWebStats.csv¶Writing Experiment student "), Diff(DELETE,"18 to ExperimentWebStats.csv¶Writing Experiment student 29 to ExperimentWebStats.csv¶Writing Experiment student 19 to ExperimentWebStats.csv¶Writing Experiment student pd1 to ExperimentWebStats.csv¶Writing Experiment student 30"), Diff(INSERT,"pd2"), Diff(EQUAL," to ExperimentWebStats.csv¶")]]]></diff>
  </Command>
  <Command __id="7466" _type="RunCommand" date="Mon Feb 08 16:56:15 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8305473" type="Debug" />
  <Command __id="7467" _type="RunCommand" date="Mon Feb 08 16:56:15 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8305473" type="Run" />
  <Command __id="7468" _type="RunCommand" date="Mon Feb 08 16:56:15 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8305473" type="Debug" />
  <Command __id="7469" _type="RunCommand" date="Mon Feb 08 16:56:15 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8305473" type="Run" />
  <Command __id="7470" _type="ShellCommand" date="Mon Feb 08 16:56:16 EST 2021" starttimestamp="1612813070441" timestamp="8305562" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7472" _type="PauseCommand" date="Mon Feb 08 16:56:18 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8308056">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2494]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7471" _type="ShellCommand" date="Mon Feb 08 16:56:18 EST 2021" starttimestamp="1612813070441" timestamp="8308056" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7473" _type="ShellCommand" date="Mon Feb 08 16:56:18 EST 2021" starttimestamp="1612813070441" timestamp="8308375" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7475" _type="PauseCommand" date="Mon Feb 08 16:56:33 EST 2021" range="10s-20s" starttimestamp="1612813070441" timestamp="8323518">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[15143]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7474" _type="ShellCommand" date="Mon Feb 08 16:56:33 EST 2021" starttimestamp="1612813070441" timestamp="8323518" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7476" _type="MoveCaretCommand" caretOffset="499" date="Mon Feb 08 16:56:34 EST 2021" docOffset="526" starttimestamp="1612813070441" timestamp="8323788" />
  <Command __id="7478" _type="PauseCommand" date="Mon Feb 08 16:56:35 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8325023">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1235]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7477" _type="ShellCommand" date="Mon Feb 08 16:56:35 EST 2021" starttimestamp="1612813070441" timestamp="8325023" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7479" _type="ShellCommand" date="Mon Feb 08 16:56:36 EST 2021" starttimestamp="1612813070441" timestamp="8325675" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7481" _type="PauseCommand" date="Mon Feb 08 16:56:37 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8327410">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1735]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7482" _type="MoveCaretCommand" caretOffset="4541" date="Mon Feb 08 16:56:38 EST 2021" docOffset="23714" starttimestamp="1612813070441" timestamp="8327571" />
  <Command __id="7484" _type="PauseCommand" date="Mon Feb 08 16:56:47 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8336825">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[9254]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7483" _type="MoveCaretCommand" caretOffset="1467" date="Mon Feb 08 16:56:47 EST 2021" docOffset="2948" starttimestamp="1612813070441" timestamp="8336825" />
  <Command __id="7486" _type="PauseCommand" date="Mon Feb 08 16:56:51 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8340982">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[4157]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7485" _type="MoveCaretCommand" caretOffset="1491" date="Mon Feb 08 16:56:51 EST 2021" docOffset="2972" starttimestamp="1612813070441" timestamp="8340982" />
  <Command __id="7488" _type="PauseCommand" date="Mon Feb 08 16:56:56 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8346027">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5045]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7487" _type="MoveCaretCommand" caretOffset="6144" date="Mon Feb 08 16:56:56 EST 2021" docOffset="7717" starttimestamp="1612813070441" timestamp="8346027" />
  <Command __id="7490" _type="PauseCommand" date="Mon Feb 08 16:56:58 EST 2021" range="2s-5s" starttimestamp="1612813070441" timestamp="8348426">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[2399]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7489" _type="MoveCaretCommand" caretOffset="6992" date="Mon Feb 08 16:56:58 EST 2021" docOffset="21139" starttimestamp="1612813070441" timestamp="8348426" />
  <DocumentChange __id="7195" _type="Delete" date="Mon Feb 08 16:52:51 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" endLine="20" length="2" offset="837" startLine="20" starttimestamp="1612813070441" timestamp="8100920">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7198" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:52:55 EST 2021" docASTNodeCount="5082" docActiveCodeLength="29171" docExpressionCount="3496" docLength="31317" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8104944">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		"), Diff(DELETE,"try {¶			if (csv.exists()) {¶				csv"), Diff(INSERT,"File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2"), Diff(EQUAL,".delete();¶			}¶			csv.createNewFile();¶			"), Diff(INSERT,"csv2.createNewFile();¶			"), Diff(EQUAL,"fw = new FileWriter(csv);¶			"), Diff(INSERT,"fw2 = new FileWriter(csv2);¶			"), Diff(EQUAL,"CSVWriter cw = new CSVWriter(fw);¶			"), Diff(INSERT,"CSVWriter cw2 = new CSVWriter(fw2);¶			"), Diff(EQUAL,"String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			"), Diff(INSERT,"String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};¶			"), Diff(EQUAL,"cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶"), Diff(INSERT,"//"), Diff(EQUAL,"			Map<String, String> searchWords = new HashMap<>();¶			Map<String, "), Diff(INSERT,"List<"), Diff(EQUAL,"String>"), Diff(DELETE," lastS"), Diff(INSERT,"> s"), Diff(EQUAL,"earches = new HashMap<>();¶			EHICommand lastSearch = null;¶"), Diff(INSERT,"//"), Diff(EQUAL,"			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							if (command.getAttributesMap().get("type").equals("Google Search")) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"								if (lastPage != null) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));¶"), Diff(INSERT,"//"), Diff(EQUAL,"								}¶"), Diff(INSERT,"//"), Diff(EQUAL,"								lastPage = null;¶								lastSearch = command;¶							} ¶							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {¶								"), Diff(DELETE,"searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));¶"), Diff(INSERT,"if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));¶								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));¶//"), Diff(EQUAL,"								lastPage = command;¶							}¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		"), Diff(INSERT,"	¶			for (String s : searches.keySet()) {¶				List<String> nextLine = new ArrayList<>();¶				nextLine.add(s);¶				for (int i = 0; i < searches.get(s).size(); i++) {¶					String url = searches.get(s).get(i);¶					nextLine.add(titles.get(s));¶					nextLine.add(url);¶					nextLine.add(i+"");¶					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");¶					cw2.writeNext(nextLine.toArray(new String[1]));¶					nextLine = new ArrayList<>();¶					nextLine.add("");¶				}¶			}¶			fw2.close();¶			cw2.close();¶		"), Diff(EQUAL,"} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
//			Map<String, String> searchWords = new HashMap<>();
			Map<String, List<String>> searches = new HashMap<>();
			EHICommand lastSearch = null;
//			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							if (command.getAttributesMap().get("type").equals("Google Search")) {
//								if (lastPage != null) {
//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));
//								}
//								lastPage = null;
								lastSearch = command;
							} 
							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));
								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));
//								lastPage = command;
							}
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			for (String s : searches.keySet()) {
				List<String> nextLine = new ArrayList<>();
				nextLine.add(s);
				for (int i = 0; i < searches.get(s).size(); i++) {
					String url = searches.get(s).get(i);
					nextLine.add(titles.get(s));
					nextLine.add(url);
					nextLine.add(i+"");
					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");
					cw2.writeNext(nextLine.toArray(new String[1]));
					nextLine = new ArrayList<>();
					nextLine.add("");
				}
			}
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="7203" _type="Insert" date="Mon Feb 08 16:53:01 EST 2021" docASTNodeCount="5077" docActiveCodeLength="29130" docExpressionCount="3492" docLength="31319" length="2" offset="7491" starttimestamp="1612813070441" timestamp="8110770">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7204" _type="Insert" date="Mon Feb 08 16:53:01 EST 2021" docASTNodeCount="5072" docActiveCodeLength="29083" docExpressionCount="3488" docLength="31321" length="2" offset="7536" starttimestamp="1612813070441" timestamp="8110780">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7205" _type="Insert" date="Mon Feb 08 16:53:01 EST 2021" docASTNodeCount="5067" docActiveCodeLength="29031" docExpressionCount="3484" docLength="31323" length="2" offset="7587" starttimestamp="1612813070441" timestamp="8110783">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7206" _type="Insert" date="Mon Feb 08 16:53:01 EST 2021" docASTNodeCount="5062" docActiveCodeLength="28979" docExpressionCount="3480" docLength="31325" length="2" offset="7643" starttimestamp="1612813070441" timestamp="8110786">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7263" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:53:39 EST 2021" docASTNodeCount="452" docActiveCodeLength="3401" docExpressionCount="274" docLength="3575" projectName="Hermes" starttimestamp="1612813070441" timestamp="8149084">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.HashMap;¶import java.util.Map;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	¶	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; ¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶//		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶//			return "Search Result";¶//		}¶		return "Search Result";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7266" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:54:01 EST 2021" docASTNodeCount="5062" docActiveCodeLength="28979" docExpressionCount="3480" docLength="31325" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8170589">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createAssignData("Experiment", folder);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createDistributionData("Experiment", folder);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createPrevPauseDistribution("Experiment", folder);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶//			Map<String, String> searchWords = new HashMap<>();¶			Map<String, List<String>> searches = new HashMap<>();¶			EHICommand lastSearch = null;¶//			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							if (command.getAttributesMap().get("type").equals("Google Search")) {¶//								if (lastPage != null) {¶//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));¶//								}¶//								lastPage = null;¶								lastSearch = command;¶							} ¶							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));¶								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));¶//								lastPage = command;¶							}¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			for (String s : searches.keySet()) {¶				List<String> nextLine = new ArrayList<>();¶				nextLine.add(s);¶				for (int i = 0; i < searches.get(s).size(); i++) {¶					String url = searches.get(s).get(i);¶					nextLine.add(titles.get(s));¶					nextLine.add(url);¶					nextLine.add(i+"");¶					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");¶					cw2.writeNext(nextLine.toArray(new String[1]));¶					nextLine = new ArrayList<>();¶					nextLine.add("");¶				}¶			}¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
//			Map<String, String> searchWords = new HashMap<>();
			Map<String, List<String>> searches = new HashMap<>();
			EHICommand lastSearch = null;
//			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							if (command.getAttributesMap().get("type").equals("Google Search")) {
//								if (lastPage != null) {
//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));
//								}
//								lastPage = null;
								lastSearch = command;
							} 
							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));
								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));
//								lastPage = command;
							}
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			for (String s : searches.keySet()) {
				List<String> nextLine = new ArrayList<>();
				nextLine.add(s);
				for (int i = 0; i < searches.get(s).size(); i++) {
					String url = searches.get(s).get(i);
					nextLine.add(titles.get(s));
					nextLine.add(url);
					nextLine.add(i+"");
					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");
					cw2.writeNext(nextLine.toArray(new String[1]));
					nextLine = new ArrayList<>();
					nextLine.add("");
				}
			}
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="7272" _type="Delete" date="Mon Feb 08 16:54:04 EST 2021" docASTNodeCount="5062" docActiveCodeLength="28972" docExpressionCount="3480" docLength="31318" endLine="613" length="7" offset="21940" repeat="2" startLine="613" starttimestamp="1612813070441" timestamp="8173996" timestamp2="8174125">
    <text><![CDATA[Google ]]></text>
  </DocumentChange>
  <Command __id="7325" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:54:55 EST 2021" docASTNodeCount="185" docActiveCodeLength="894" docExpressionCount="100" docLength="894" projectName="A0" starttimestamp="1612813070441" timestamp="8224805">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\reducer\AReducer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package reducer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Bean.KeyValue;
import launcher.MapReduceTracer;

public class AReducer extends MapReduceTracer implements Reducer<String, Integer>, RemoteReducer<String, Integer>{

	public Map<String, Integer> reduce(List<KeyValue<String, Integer>> list) {
		Map<String, Integer> map = new HashMap<>();
		for(KeyValue<String, Integer> keyValue: list) {
			String key = keyValue.getKey();
			Integer value = keyValue.getValue();
			map.merge(key, value, Integer::sum);
		}
		traceReduce(list, map);
		return map;
	}

	public Map<String, Integer> remoteReduce(List<KeyValue<String, Integer>> list){
		traceRemoteList(list);
		Map<String, Integer> map = reduce(list);
		traceRemoteResult(map);
		return map;
	}
	
	public void quit() {
		traceQuit();
		this.synchronizedNotify();
	}
}
]]></snapshot>
  </Command>
  <Command __id="7328" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:54:55 EST 2021" docASTNodeCount="5023" docActiveCodeLength="37241" docExpressionCount="3251" docLength="49353" projectName="Hermes" starttimestamp="1612813070441" timestamp="8225350">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\analyzer\AnAnalyzer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package analyzer;¶¶import java.beans.PropertyChangeListener;¶import java.beans.PropertyChangeSupport;¶import java.io.BufferedReader;¶import java.io.File;¶import java.io.FileInputStream;¶import java.io.FileNotFoundException;¶import java.io.FileOutputStream;¶import java.io.FileReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.UncheckedIOException;¶import java.nio.file.Files;¶import java.nio.file.Path;¶import java.nio.file.Paths;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Collections;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.HashSet;¶import java.util.Hashtable;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Map;¶import java.util.PriorityQueue;¶import java.util.Queue;¶import java.util.Set;¶import java.util.Vector;¶import java.util.logging.FileHandler;¶import java.util.logging.Handler;¶import java.util.logging.Level;¶import java.util.logging.Logger;¶¶import javax.swing.JFileChooser;¶¶¶import analyzer.extension.ACSVParser;¶import analyzer.extension.AStuckInterval;¶import analyzer.extension.AStuckPoint;¶import analyzer.extension.ARatioFileGenerator;¶import analyzer.extension.RatioFileGeneratorFactory;¶import analyzer.extension.CSVParser;¶import analyzer.extension.FileReplayAnalyzerProcessorFactory;¶import analyzer.extension.StuckInterval;¶import analyzer.extension.StuckPoint;¶import analyzer.ui.graphics.RatioFileReader;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶//import bus.uigen..AFileSetterModel;¶//import bus.uigen..FileSetterModel;¶//import bus.uigen..ObjectEditor;¶import bus.uigen.models.AFileSetterModel;¶import bus.uigen.models.FileSetterModel;¶import config.FactorySingletonInitializer;¶import difficultyPrediction.ADifficultyPredictionPluginEventProcessor;¶import difficultyPrediction.DifficultyPredictionPluginEventProcessor;¶import difficultyPrediction.DifficultyPredictionSettings;¶import difficultyPrediction.Mediator;¶import difficultyPrediction.PredictionParametersSetterSelector;¶import difficultyPrediction.eventAggregation.EventAggregator;¶import difficultyPrediction.featureExtraction.RatioFeatures;¶import fluorite.commands.DifficultyCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.PredictionCommand;¶import fluorite.commands.PredictionType;¶import fluorite.commands.Status;¶import fluorite.commands.WebVisitCommand;¶import fluorite.model.EHEventRecorder;¶import fluorite.model.EHXMLFormatter;¶import fluorite.util.EHLogReader;¶import programmatically.AnEclipseProgrammaticController;¶import util.annotations.LayoutName;¶import util.annotations.Row;¶import util.annotations.Visible;¶import util.trace.recorder.LogFileCreated;¶import util.trace.recorder.LogHandlerBound;¶¶@LayoutName(AttributeNames.GRID_BAG_LAYOUT)¶/**¶ * Loads the experimental directory.¶ * reads specified command logs¶ * Combines all log files for an experiment into a nested command list.¶ * Replays a flattenned version of the log.¶ * Prints the replay¶ * Each command is sent to a difficulty processor so that new predictions can be made and visualized¶ * The difficulty pipe line will fire events¶ * Fires events for  replay of stored events also.¶ * The stored replay can be used to generate ratio files,¶ * Also replays ratio files that can be then visualized.¶ *¶ * ¶ * @author dewan¶ *¶ */¶public class AnAnalyzer implements Analyzer {¶//	private final static Logger ANALYZER_LOGGER = Logger.getLogger(Analyzer.class.getName());¶¶//	public static final String PARTICIPANT_DIRECTORY = "data/";¶	public static final String DEFAULT_PARTICIPANT_DIRECTORY = "data/";¶¶	public static final String EXPERIMENTAL_DATA = "ExperimentalData/";¶	public static final String OUTPUT_DATA = "OutputData/";¶¶	public static final String ECLIPSE_FOLDER = "Eclipse/";¶	public static final String BROWSER_FOLDER = "Browser/";¶	public static final String REPLAYED_LOG_FOLDER = "ReplayedLogs/";¶	public static final String REPLAYED_PROJECT_FOLDER = "ReplayedProjects/";¶	public static final String PROJECT_NAME_PREFIX = "Project";¶¶¶¶¶//	public static final String STUCKPOINT_FILE = "data/GroundTruth/Stuckpoints.csv";¶	public   String stuckPointFile() {¶		return Paths.get (getParticipantsFolderName(), "GroundTruth/Stuckpoints.csv").toString();¶	}¶¶//	public static final String STUCKINTERVAL_FILE = "data/GroundTruth/Stuck Intervals.csv";¶	public   String stuckIntervalsFile() {¶		return Paths.get (getParticipantsFolderName(), "GroundTruth/Stuck Intervals.csv").toString();¶	}¶¶//	public static final String PARTICIPANT_INFORMATION_DIRECTORY = "data/ExperimentalData/";¶//	public static final String PARTICIPANT_OUTPUT_DIRECTORY = "data/OutputData/";¶¶	public static final String PARTICIPANT_INFORMATION_FILE = "Participant_Info.csv";¶	public static final String RATIOS_FILE_NAME = "ratios.csv";¶	public static final int SEGMENT_LENGTH = 50;¶	public static final String ALL_PARTICIPANTS = "All";¶	public static final String IGNORE_KEYWORD = "IGNORE";¶	 final Hashtable<String, String> participants = new Hashtable<String, String>();¶	 protected String outPath;¶¶	// do not make public, we only need to fill these maps once, must uphold¶	// that they are unmodifiable via getter methods¶	private  Map<String, Queue<StuckPoint>> stuckPoint = new HashMap<>();¶	private  Map<String, Queue<StuckInterval>> stuckInterval = new HashMap<>();¶	¶	protected List<WebVisitCommand> sortedWebVisitQueue = new LinkedList<>();¶	protected List<WebVisitCommand> sortedWebVisitCommands = new ArrayList();¶	protected WebVisitCommand lastWebVisitCommandWithoutDuration;¶¶	protected List<String> webVisitsInFile = new ArrayList();¶¶	 boolean stuckFileLoaded = false;¶	 RatioFileReader ratioFileReader;¶¶	 long startTimestamp;¶	 long experimentStartTimestamp;¶	protected List<List<EHICommand>> nestedCommandsList;¶¶	FileSetterModel participantsFolder, outputFolder, experimentalData;¶	AnalyzerParameters parameters;¶	EHLogReader reader;¶	// protected Thread difficultyPredictionThread;¶	// protected DifficultyPredictionRunnable difficultyPredictionRunnable;¶	// protected BlockingQueue<ICommand> pendingPredictionCommands;¶	DifficultyPredictionPluginEventProcessor difficultyEventProcessor;¶	List<AnalyzerListener> listeners = new ArrayList<>();¶	PropertyChangeSupport propertyChangeSupport;¶	// int currentParticipant = -1;¶¶	// subdirectory inside of OutputData to put outputs, note that it can be¶	// different for each instance of analyzer¶	private String outputSubdirectory = "";¶	int lastPrediction;¶	int lastCorrection;¶	Mediator mediator;¶//	protected long lastStartTimestamp;¶¶	EventAggregator eventAggregator;¶	protected Set<String> ignoreParticipants = new HashSet<String>(Arrays.asList(¶			new String[]{"33"}));¶¶¶	// random comment to make sure things can commit¶	public AnAnalyzer() {¶		propertyChangeSupport = new PropertyChangeSupport(this);¶		// whoever invokes the analyzer should set the replay mode¶		// DifficultyPredictionSettings.setReplayMode(true);¶		DifficultyPredictionSettings.setSegmentLength(SEGMENT_LENGTH);¶¶		reader = new EHLogReader();¶		participantsFolder = new AFileSetterModel(JFileChooser.DIRECTORIES_ONLY);¶//		participantsFolder.setText(DEFAULT_PARTICIPANT_DIRECTORY);¶		participantsFolder.setText(defaultParticipantDirectory());¶		parameters = new AnAnalyzerParameters(this);¶		parameters.getParticipants().addChoice(ALL_PARTICIPANTS);¶		parameters.getParticipants().setValue(ALL_PARTICIPANTS);¶//		difficultyEventProcessor = ADifficultyPredictionPluginEventProcessor.getInstance();¶¶		FactorySingletonInitializer.configure();¶¶¶	}¶	protected File getOrCreateLogLocation(String aParticipantId) {¶		String aFileName = Paths.get(outPath, aParticipantId, REPLAYED_LOG_FOLDER,aParticipantId ).toString();¶		File aFile = new File(aFileName);¶		if (!aFile.exists()) {¶			try {¶				if (!aFile.getParentFile().exists()) {						¶					aFile.getParentFile().mkdirs();¶				}¶				aFile.createNewFile();¶			} catch (IOException e) {¶				e.printStackTrace();¶			}¶		}¶		return aFile;¶	}¶	public AnEclipseProgrammaticController programmaticController() {¶		return AnEclipseProgrammaticController.getInstance();¶	}¶	public static void emptyDirectory (File aDirectory) {¶		try {¶			 Path aPath = Paths.get(aDirectory.getAbsolutePath());¶			  Files.newDirectoryStream( aPath).forEach( aFile -> {¶			    try { Files.delete( aFile ); }¶			    catch ( IOException e ) { throw new UncheckedIOException(e); }¶			  } );¶			}¶			catch ( IOException e ) {¶			  e.printStackTrace();¶			}¶	}¶	protected String projectName (String aParticipantId) {¶		return PROJECT_NAME_PREFIX + "_" + aParticipantId;¶	}¶	protected File getOrCreateEmptyProjectLocation(String aParticipantId) {¶		String aProjectLocation = Paths.get(outPath, aParticipantId, REPLAYED_PROJECT_FOLDER, projectName(aParticipantId) ).toString();¶		File aProjectDir = new File(aProjectLocation);¶		if (!aProjectDir.exists()) {¶			try {¶				if (!aProjectDir.exists()) {						¶					aProjectDir.mkdirs();¶					¶				}¶//				aFile.createNewFile();¶			} catch (Exception e) {¶				e.printStackTrace();¶			}¶		} ¶		File anSrcFolder = Paths.get(aProjectDir.getAbsolutePath(), "src").toFile();¶		if (!anSrcFolder.exists()) {¶			anSrcFolder.mkdir();¶		}		¶		emptyDirectory(anSrcFolder);¶		return aProjectDir;¶		¶	}¶	protected Logger getLogger() {¶		return Logger.getLogger(Analyzer.class.getName());¶	}¶	public void removeLogHandlers(String aParticipantId) {¶		Handler[] aHandlers = getLogger().getHandlers();¶		for (Handler aHandler:aHandlers) {¶			FileHandler aFileHandler = (FileHandler) aHandler;¶			getLogger().removeHandler(aHandler);¶			aFileHandler.close();¶¶		}¶		¶¶	}¶	public void resetProject(String aParticipantId, long aStartTimestamp ) {¶		File aProjectLocation = getOrCreateEmptyProjectLocation(aParticipantId);¶		programmaticController().getOrCreateProject(projectName(aParticipantId), aProjectLocation.getAbsolutePath());¶		¶	}¶	public void resetLogger(String aParticipantId, long aStartTimestamp ) {¶//		Handler[] aHandlers = getLogger().getHandlers();¶//		for (Handler aHandler:aHandlers) {¶//			getLogger().removeHandler(aHandler);¶//		}¶		getLogger().setLevel(Level.FINE);¶¶//		File outputFile = null;¶		try {¶			File aLogLocation = getOrCreateLogLocation(aParticipantId);¶//			outputFile = new File(logLocation, EHEventRecorder.getUniqueMacroNameByTimestamp(getStartTimestamp(), false));¶			LogFileCreated.newCase(aLogLocation.getName(), this);¶¶			FileHandler handler = new FileHandler(aLogLocation.getPath());¶			handler.setEncoding("UTF-8");¶			handler.setFormatter(new EHXMLFormatter(aStartTimestamp)); ¶			getLogger().addHandler(handler);¶			LogHandlerBound.newCase(handler, this);¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶	}¶	protected void recordCommand (EHICommand aCommand) {¶		getLogger().log(Level.FINE, null, aCommand);¶	}¶	¶	protected String defaultParticipantDirectory() {¶		return DEFAULT_PARTICIPANT_DIRECTORY;¶	}¶//	public String participantDirectoryName() {¶//		return participantsFolder.getLabel().getText();¶//	}¶¶	void notifyPre() {¶		propertyChangeSupport.firePropertyChange("this", null, this);¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#getParticipantsFolder()¶	 */¶	@Override¶	@Row(0)¶	public FileSetterModel getParticipantsFolder() {¶		return participantsFolder;¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#getParticipantsFolderName()¶	 */¶	@Override¶	@Visible(false)¶	public String getParticipantsFolderName() {¶		return participantsFolder.getText();¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#setParticipantsFolderName(java.lang.String)¶	 */¶	@Override¶	@Visible(false)¶	public void setParticipantsFolderName(String aName) {¶		participantsFolder.setText(aName);¶		notifyPre();¶	}¶¶	boolean directoryLoaded;¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#preLoadDirectory()¶	 */¶	@Override¶	public boolean preLoadDirectory() {¶		return !directoryLoaded;¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#loadDirectory()¶	 */¶	@Override¶	@Visible(false)¶	public void loadDirectory() {¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(Paths.get(¶					getParticipantsFolderName(),  EXPERIMENTAL_DATA¶			// PARTICIPANT_INFORMATION_DIRECTORY¶					, PARTICIPANT_INFORMATION_FILE).toString()));¶			String word = null;¶			while ((word = br.readLine()) != null) {¶				String[] userInfo = word.split(",");¶				participants.put(userInfo[0].trim(), userInfo[1].trim());¶				parameters.getParticipants().addChoice(userInfo[0]);¶			}¶			br.close();¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		directoryLoaded = true;¶		notifyPre();¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#preLoadLogs()¶	 */¶	@Override¶	public boolean preLoadLogs() {¶		return directoryLoaded;¶		// && !logsLoaded;¶	}¶¶	boolean logsLoaded;¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#loadLogs()¶	 */¶	@Override¶	@Visible(false)¶	public void loadLogs(boolean createNewThread) {¶		if (createNewThread) {¶			final Runnable aRunnable = new Runnable() {¶				public void run() {¶					doLoadLogs();¶					System.out.println("Logs loaded");¶				}¶			};¶			Thread aThread = (new Thread(aRunnable));¶			aThread.setName("Replay thread for:"¶					+ parameters.getParticipants().getValue());¶¶			aThread.start();¶¶		} else¶			doLoadLogs();¶	}¶¶	/**¶	 * Loads stuck point from the stuckpoint.csv file into the hashmap.¶	 * ¶	 */¶	@Visible(false)¶	public void loadStuckPoint() {¶		CSVParser parser = new ACSVParser();¶		// try {¶//		parser.start(STUCKPOINT_FILE);¶		parser.start(stuckPointFile());¶¶		// } catch (FileNotFoundException e1) {¶		// // TODO Auto-generated catch block¶		// e1.printStackTrace();¶		// }¶¶		parser.getNextLine();¶		String line;¶		while ((line = parser.getNextLine()) != null) {¶			String[] split = line.split(",");¶¶			if (split.length > 0 && !split[0].trim().equals("")) {¶				StuckPoint p = new AStuckPoint();¶¶				String id = getId(split[0]);¶¶				try {¶					p.setDate(new SimpleDateFormat("hh:mm a").parse(split[1]));¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶				p.setType(split[2]);¶¶				if (stuckPoint.get(id) == null) {¶					stuckPoint.put(id, new PriorityQueue<StuckPoint>());¶¶				}¶¶				// get priority queue and add the new stuckpoint¶				stuckPoint.get(id).add((StuckPoint) p);¶¶			}¶¶		}¶¶		parser.stop();¶	}¶¶	private String getId(String participantName) {¶		for (String key : participants.keySet()) {¶			if (participants.get(key).equals(participantName)) {¶				return key;¶¶			}¶¶		}¶¶		return null;¶¶	}¶¶	/**¶	 * Loads stuck interval from the stuck interval csv into the hashmap¶	 * ¶	 * ¶	 */¶	@Visible(false)¶	public synchronized void loadStuckInterval() {¶		CSVParser parser = new ACSVParser();¶		// try {¶//		parser.start(STUCKINTERVAL_FILE);¶		parser.start(stuckIntervalsFile());¶¶		// } catch (FileNotFoundException e1) {¶		// // TODO Auto-generated catch block¶		// e1.printStackTrace();¶		// return;¶		// }¶¶		parser.getNextLine();¶		String line;¶		while ((line = parser.getNextLine()) != null) {¶			String[] split = line.split(",");¶¶			if (split.length > 0 && !split[0].trim().equals("")) {¶				StuckInterval p = new AStuckInterval();¶¶				p.setParticipant(split[0]);¶				String id = getId(split[0]);¶				;¶¶				try {¶					p.setDate(new SimpleDateFormat("HH:mm:ss").parse(split[1]));¶¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶				p.setBarrierType(split[2]);¶				p.setSurmountability(split[3]);¶¶				if (stuckInterval.get(id) == null) {¶					stuckInterval.put(id,¶							new PriorityQueue<StuckInterval>());¶¶				}¶¶				// get the priority queue and add the new stuck interval¶				stuckInterval.get(id).add((StuckInterval) p);¶¶			}¶¶		}¶¶		parser.stop();¶¶	}¶	@Visible(false)¶¶	public void doLoadLogs() {¶//		FactorySingletonInitializer.configure();¶¶		String participantId = parameters.getParticipants().getValue();¶		String numberOfSegments = ""¶				+ parameters.getPredictionParameters().getSegmentLength();¶		// String numberOfSegments = "" +¶		// parameters.getPredictionParameters().getSegmentLength();¶		// String numberOfSegments = "" +¶		// parameters.getPredictionParameters().getSegmentLength();¶¶		// Queue q=this.stuckPoint.get("19");¶		// while(!q.isEmpty()) {¶		// System.out.println(q.poll());¶		//¶		// }¶¶		if (participantId.equalsIgnoreCase(""))¶			participantId = ALL_PARTICIPANTS;¶		//¶		// if(numberOfSegments.equalsIgnoreCase(""))¶		// numberOfSegments = "" + SEGMENT_LENGTH;¶¶		if (numberOfSegments.equalsIgnoreCase(""))¶			numberOfSegments = "" + SEGMENT_LENGTH;¶¶		// todo need to ask for discrete chunks or sliding window¶		// may d for discrete and s for sliding window¶¶		// scanIn.close();¶¶		// Now get all the participants in a list¶		List<String> participantList = new ArrayList<String>(¶				Arrays.asList(participantId.split(" ")));¶		participantList.removeAll(Collections.singleton(""));¶¶		System.out.println("Processing logs for: " + participantId);¶		List<String> participantIds = new ArrayList<>(parameters¶				.getParticipants().getChoices().size());¶		participantIds.addAll(parameters.getParticipants().getChoices());¶¶		if (!stuckFileLoaded) {¶			// Load the stuck points and such¶			loadStuckInterval();¶			loadStuckPoint();¶			stuckFileLoaded = true;¶		}¶		// if (parameters.isVisualizePrediction()) {¶		// PredictorConfigurer.visualizePrediction();¶		// }¶		// the main subdirectory we are putting files in¶//		String outPath = Paths.get(participantsFolder.getLabel().getText(), OUTPUT_DATA ).toString();¶		outPath = Paths.get(getParticipantsFolderName(), OUTPUT_DATA ).toString();¶¶		// + this.outputSubdirectory;¶		if (participantList.get(0).equals(ALL_PARTICIPANTS)) {¶			// remove all from the participants¶			participantIds.remove(ALL_PARTICIPANTS);¶¶			List<String> allIgnores = new ArrayList<>();¶			// Build the ignore list¶			if (participantList.size() > 1¶					&& participantList.get(1).equalsIgnoreCase(IGNORE_KEYWORD)) {¶				// take out as the ignore function is not actually a participant¶				participantIds.remove(participantId);¶				parameters.getParticipants().getChoices().remove(participantId);¶¶				// remove from the list of participants the ones we want to¶				// ignore¶				for (String ignore : participantList.subList(2,¶						participantList.size())) {¶					List<String> participant = new ArrayList<>(¶							Arrays.asList(ignore.split(",")));¶					participant.removeAll(Collections.singleton(""));¶¶					for (String p : participant) {¶						if (participantIds.contains(p)) {¶							participantIds.remove(p);¶¶							allIgnores.add(p);¶						}¶¶					}¶¶				}¶¶			}¶¶			// calculate new outputdirectory¶			// move this inside the loop so we create a separate output dir for¶			// each participant¶			// this.outputSubdirectory=outPath += participantId+"/";¶			// keep this for AnArffGenerator¶			this.outputSubdirectory = outPath + participantId;¶			notifyNewParticipant(ALL_PARTICIPANTS, null);¶			notifyReplayStarted();¶			// all if first on the list¶¶			for (String aParticipantId : participantIds) {¶				// processParticipant(aParticipantId,outPath,participantsFolder.getText()¶				// + EXPERIMENTAL_DATA +¶				// AnAnalyzer.participants.get(aParticipantId) + "/" +¶				// ECLIPSE_FOLDER,false);¶				if (ignoreParticipants.contains(aParticipantId)) ¶					continue;¶				this.outputSubdirectory = outPath + aParticipantId + "/";¶				// should there be a notifyNewParticipant here also¶				processParticipant(aParticipantId, ¶						this.outputSubdirectory,¶//						participantsFolder.getText() + EXPERIMENTAL_DATA,¶						Paths.get(getParticipantsFolderName(), EXPERIMENTAL_DATA).toString(),¶¶						// + AnAnalyzer.participants.get(aParticipantId) + "/" +¶						// ECLIPSE_FOLDER,¶						false);¶¶			}¶¶			notifyFinishParticipant(ALL_PARTICIPANTS, null);¶			notifyReplayFinished();¶¶		} else {¶			// String aParticipanttFolder = participants.get(participantId);¶//			this.outputSubdirectory = outPath + participantId + "/";¶			this.outputSubdirectory = Paths.get(outPath, participantId).toString();¶¶			processParticipant(participantId, this.outputSubdirectory,¶					Paths.get (getParticipantsFolderName(), EXPERIMENTAL_DATA).toString()¶//					participantsFolder.getText() + EXPERIMENTAL_DATA¶					// + aParticipanttFolder + "/" + ECLIPSE_FOLDER¶					, true);¶¶		}¶		// old stuff, in case we need to revert 12/20/2014¶¶		// if (participantId.equals(ALL_PARTICIPANTS)) {¶		// notifyNewParticipant(ALL_PARTICIPANTS, null);¶		// for (String aParticipantId:participantIds) {¶		// if (aParticipantId.equals(ALL_PARTICIPANTS)) {¶		// continue;¶		// }¶		// // integrated analyzer¶		// processParticipant(aParticipantId);¶		// // waitForParticipantLogsToBeProcessed();¶		//¶		//¶		// // jason's code¶		// // String aParticipanttFolder = participants.get(aParticipantId);¶		// // commandsList = convertXMLLogToObjects(aParticipanttFolder);¶		// // MainConsoleUI.processCommands(participantsFolder.getText(),¶		// commandsList, numberOfSegments,aParticipanttFolder);¶		// }¶		//¶		// notifyFinishParticipant(ALL_PARTICIPANTS, null);¶		// } else {¶		// String aParticipanttFolder = participants.get(participantId);¶		// processParticipant(participantId);¶		// // jason's code, separator mediator¶		// // commandsList = convertXMLLogToObjects(aParticipanttFolder);¶		// // DifficultyPredictionSettings.setRatiosFileName(aParticipanttFolder¶		// + "ratios.csv");¶		// // processParticipant(participantId);¶		// // MainConsoleUI.processCommands(participantsFolder.getText(),¶		// commandsList, numberOfSegments, aParticipanttFolder);¶		// }¶¶		logsLoaded = true;¶	}¶	@Visible(false)¶	public void processBrowserHistoryOfFolder(String aFolderName) {¶		String fullName = aFolderName;¶		File folder = new File(fullName);¶		if (!folder.exists()) {¶			System.out.println("folder does not exist:" + fullName);¶			return;¶		}¶		if (!folder.isDirectory()) {¶			System.out.println("folder not a directory:" + fullName);¶			return;¶		}¶		List<String> participantFiles = MainConsoleUI.getFilesForFolder(folder);¶		System.out.println("Particpant " + aFolderName + " has "¶				+ participantFiles.size() + " file(s)");¶		// System.out.println();¶		for (int i = 0; i < participantFiles.size(); i++) {¶			String aFileName = fullName + participantFiles.get(i);¶			if (!aFileName.endsWith(".txt"))¶				continue;¶¶			// List<ICommand> commands = reader.readAll(participantDirectory¶			// + participantFiles.get(i));¶			System.out.println("Reading " + aFileName);¶			processBrowserHistoryOfFile(aFileName);¶			//¶¶			// listOfListOFcommands.add(commands);¶		}¶		notifyFinishedBrowserLines();¶¶	}¶	@Visible(false)¶	public void storeBrowserHistoryOfFolder(String aFolderName) {¶		String fullName = aFolderName;¶		File folder = new File(fullName);¶		if (!folder.exists()) {¶			System.out.println("folder does not exist:" + fullName);¶			return;¶		}¶		if (!folder.isDirectory()) {¶			System.out.println("folder not a directory:" + fullName);¶			return;¶		}¶		List<String> participantFiles = MainConsoleUI.getFilesForFolder(folder);¶		System.out.println("Particpant " + aFolderName + " has "¶				+ participantFiles.size() + " file(s)");¶		// System.out.println();¶		sortedWebVisitQueue.clear();¶		sortedWebVisitCommands.clear();¶		webVisitsInFile.clear();¶		lastWebVisitCommandWithoutDuration = null;¶		¶¶		for (int i = 0; i < participantFiles.size(); i++) {¶			String aFileName = Paths.get (fullName, participantFiles.get(i)).toString();¶			if (!aFileName.endsWith(".txt"))¶				continue;¶¶			// List<ICommand> commands = reader.readAll(participantDirectory¶			// + participantFiles.get(i));¶			System.out.println("Reading " + aFileName);¶			storeBrowserHistoryOfFile(aFileName);¶			//¶¶			// listOfListOFcommands.add(commands);¶		}¶		Collections.sort(sortedWebVisitQueue);¶¶	}¶¶	@Visible(false)¶	public void processBrowserHistoryOfFile(String aFileName) {¶		try {¶			FileInputStream fis = new FileInputStream(aFileName);¶¶			// Construct BufferedReader from InputStreamReader¶			BufferedReader br = new BufferedReader(new InputStreamReader(fis));¶¶			String line = null;¶			while ((line = br.readLine()) != null) {¶				// System.out.println(line);¶				notifyNewBrowseLine(line);¶			}¶¶			br.close();¶		} catch (Exception e) {¶			e.printStackTrace();¶¶		}¶¶	}¶	@Visible(false)¶	public void storeBrowserHistoryOfFile(String aFileName) {¶		try {¶			FileInputStream fis = new FileInputStream(aFileName);¶¶			// Construct BufferedReader from InputStreamReader¶			BufferedReader br = new BufferedReader(new InputStreamReader(fis));¶¶			String line = null;¶			while ((line = br.readLine()) != null) {¶				// System.out.println(line);¶				WebVisitCommand aWebVisitCommand = toWebVisitCommand(line);¶				sortedWebVisitQueue.add(0, aWebVisitCommand);¶				webVisitsInFile.add(line);¶			}¶			sortedWebVisitCommands.addAll (sortedWebVisitQueue); // making shallow copy¶¶			br.close();¶		} catch (Exception e) {¶			e.printStackTrace();¶¶		}¶¶	}¶¶	void waitForParticipantLogsToBeProcessed() {¶		try {¶			if (difficultyEventProcessor.getDifficultyPredictionThread() != null) {¶			// difficultyPredictionThread.join();¶			difficultyEventProcessor.getDifficultyPredictionThread().join();¶			} else {¶				System.out.println("Cannot wait for difficulty prediction thread to finish");¶			}¶		} catch (InterruptedException e) {¶¶			e.printStackTrace();¶		}¶¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#processParticipant(java.lang.String)¶	 */¶	@Override¶	// modularize this method¶	@Visible(false)¶	public void processParticipant(String aParticipantId, String outPath,¶			String dataPath, boolean isIndividualPart) {¶¶		// if (parameters.isVisualizePrediction()) {¶		// PredictorConfigurer.visualizePrediction();¶		// }¶		parameters.getParticipants().setValue(aParticipantId);¶		String aParticipantFolder = participants.get(aParticipantId);¶		// notifyNewParticipant(aParticipantId);¶		// we now get the correct outpath with individual folder¶		String aFullParticipantOutputFolderName = outPath;¶		// String aFullParticipantOutputFolderName = outPath+(isIndividualPart?¶		// aParticipantFolder+"/":"");¶//		String aFullParticipantDataFolderName = dataPath + aParticipantFolder¶//				+ "/" + ECLIPSE_FOLDER;¶		String aFullParticipantDataFolderName = Paths.get(dataPath, aParticipantFolder,¶				ECLIPSE_FOLDER).toString();¶		File anOutputFolder = new File(aFullParticipantOutputFolderName);¶		if (!anOutputFolder.exists())¶			anOutputFolder.mkdirs();¶¶		// if (isIndividualPart) {¶//¶//		String aFullRatiosFileName = aFullParticipantOutputFolderName¶//				+ "ratios.csv";¶		String aFullRatiosFileName = Paths.get(aFullParticipantOutputFolderName,¶				"ratios.csv").toString();¶		File aRatiosFile = new File(aFullRatiosFileName);¶		if (aRatiosFile.exists()) {¶			DifficultyPredictionSettings.setRatioFileExists(true);¶¶		} else {¶			// if (!aRatiosFile.exists())¶			try {¶				DifficultyPredictionSettings.setRatioFileExists(false);¶				aRatiosFile.createNewFile();¶			} catch (IOException e1) {¶¶				e1.printStackTrace();¶			}¶		}¶¶		// erase file if it exists¶		// if (aRatiosFile.exists() &&¶		// DifficultyPredictionSettings.isNewRatioFiles()) {¶		if (DifficultyPredictionSettings.isRatioFileExists()¶				&& DifficultyPredictionSettings.isNewRatioFiles()) {¶¶			try {¶				FileOutputStream writer = new FileOutputStream(aRatiosFile);¶				writer.close();¶¶			} catch (FileNotFoundException e1) {¶				e1.printStackTrace();¶			} catch (IOException e) {¶			}¶¶			DifficultyPredictionSettings.setCreateRatioFile(isIndividualPart);¶		}¶		// we will replay commands in both cases¶		nestedCommandsList = convertXMLLogToObjects(aFullParticipantDataFolderName);¶¶		if (DifficultyPredictionSettings.isRatioFileExists()¶				&& DifficultyPredictionSettings.isReplayRatioFiles()) {¶			// System.out.println¶			// ("Need to read ratio file and replay logs");¶			RatioFileGeneratorFactory¶					.setSingleton(FileReplayAnalyzerProcessorFactory¶							.getSingleton());¶			notifyNewParticipant(aParticipantId, aParticipantFolder); // should¶																		// probably¶																		// factor¶																		// this¶																		// out¶			RatioFilePlayerFactory.getSingleton().setReplayedData(¶					nestedCommandsList, aRatiosFile.getAbsolutePath());¶			RatioFilePlayerFactory.getSingleton().replay();¶			// ratioFileReader = new ARatioFileReader();¶			// ratioFileReader.readFile(aRatiosFile.getAbsolutePath());¶		} else {¶¶			// nestedCommandsList =¶			// convertXMLLogToObjects(aFullParticipantDataFolderName);¶			TimeStampComputerFactory.getSingleton().reset(); // this is called by setRpelayedData¶			DifficultyPredictionSettings.setRatiosFileName(aFullRatiosFileName);¶			//moving this up in the constructor so we do not configure many times¶//			difficultyEventProcessor = new ADifficultyPredictionPluginEventProcessor();¶			difficultyEventProcessor = ADifficultyPredictionPluginEventProcessor.getInstance();¶¶//			ADifficultyPredictionPluginEventProcessor¶//					.setInstance(difficultyEventProcessor);¶			difficultyEventProcessor.commandProcessingStarted();¶			 mediator = difficultyEventProcessor¶					.getDifficultyPredictionRunnable().getMediator();¶¶			 eventAggregator = mediator.getEventAggregator();¶			eventAggregator¶					.setEventAggregationStrategy(new DiscreteChunksAnalyzer(""¶							+ PredictionParametersSetterSelector.getSingleton()¶									.getSegmentLength()));¶			notifyNewParticipant(aParticipantId, aParticipantFolder);¶			storeBrowserHistoryOfFolder(Paths.get(¶					getParticipantsFolderName()¶						, EXPERIMENTAL_DATA,¶//						aParticipantFolder + "/"¶						aParticipantFolder,¶¶						BROWSER_FOLDER).toString());¶			playNestedCommandList();¶¶¶¶				difficultyEventProcessor.commandProcessingStopped();¶				waitForParticipantLogsToBeProcessed();¶¶				¶				//maybe do this before notifying events so we can use the info in prediction¶				// getting rid of call as we have already read the lines¶//				processBrowserHistoryOfFolder(participantsFolder.getText()¶//						+ EXPERIMENTAL_DATA + aParticipantFolder + "/"¶//						+ BROWSER_FOLDER);¶				¶				notifyAllWebVisitsInFile();¶				notifyAllWebCommandsInFile();¶¶				notifyFinishParticipant(aParticipantId, aParticipantFolder);¶				¶				¶//			}¶		}¶¶	}¶	// override this to terminate earlier¶	protected boolean continueTopLevelCommandReplay(int anIndex, List<List<EHICommand>> aNestedList) {¶		return anIndex < aNestedList.size() && !terminateReplayNow();¶	}¶	// override this to terminate earlier¶	protected boolean continueSecondLevelCommandReplay(int anIndex, List<EHICommand> aList) {¶		return anIndex < aList.size() && !terminateReplayNow();¶	}¶	protected boolean terminateReplayNow() {¶		return false;¶	}¶	¶	protected void maybeForwardCommandToDifficultyEventProcessor(EHICommand aCommand, boolean isPrediction) {¶		if (!isPrediction) { // added this¶			difficultyEventProcessor.newCommand(aCommand); // why play this ¶			}¶	}¶	¶	protected void playNestedCommandList() {¶		startTimestamp = 0;¶		experimentStartTimestamp = 0;¶//		for (int index = 0; index < nestedCommandsList.size(); index++) {¶		for (int index = 0; continueTopLevelCommandReplay(index, nestedCommandsList); index++) {¶¶			List<EHICommand> commands = nestedCommandsList.get(index);¶//			for (int i = 0; i < commands.size(); i++) {¶			for (int i = 0; continueSecondLevelCommandReplay(i, commands); i++) {¶¶				EHICommand aCommand = commands.get(i);¶				long aCommandTime = aCommand.getTimestamp() + startTimestamp;¶				long aDuration = duration(aCommand);¶				while (maybeFireWebVisitBefore(aCommandTime));¶				¶				processStoredCommand(aCommand, aCommandTime, aDuration);¶¶				boolean isPrediction = maybeProcessPrediction(aCommand, aCommandTime, aDuration);¶				boolean isCorrection = maybeProcessCorrection(aCommand, aCommandTime, aDuration); //this sets the start time stamp¶¶				if (!isPrediction && !isCorrection) {¶					processStoredInputCommand(aCommand, aCommandTime, aDuration);¶				}¶				if (!DifficultyPredictionSettings.isMakePredictions()) {¶					continue;¶				}¶				// should we replay difficulty corrections since these were stored¶				// and thus make sense only if diifculty predictions were wrong¶				// they are certainly correct status so perhaps not a bad idea¶				// the difficulty predictions certainly should not be replayed since¶				// we make new predictions¶				if ((aCommand.getTimestamp() == 0)¶						&& (aCommand.getTimestamp2() > 0)) { // this is¶																// always a¶																// difficulty¶																// status¶																// command¶//					startTimeStamp = commands.get(i).getTimestamp2();¶//					notifyStartTimeStamp(startTimeStamp);¶					maybeForwardCommandToDifficultyEventProcessor(aCommand, isPrediction);¶					/*if (!isPrediction) { // added this¶					difficultyEventProcessor.newCommand(aCommand); // why play this ¶					}*/¶¶//					notifyStartTimeStamp(startTimeStamp);¶¶				} else {¶					eventAggregator.setStartTimeStamp(startTimestamp); // not¶																		// sure¶																		// this¶																		// is¶																		// ever¶																		// useful¶					try {¶						// pendingPredictionCommands.put(commands.get(i));¶						// System.out.println("Put command:" +¶						// commands.get(i));¶						// difficultyEventProcessor.recordCommand(commands.get(i));¶						if (!isPrediction) {¶						difficultyEventProcessor.newCommand(aCommand);¶						}¶¶						// } catch (InterruptedException e) {¶					} catch (Exception e) {¶¶						e.printStackTrace();¶					}¶¶					// eventAggregator.getEventAggregationStrategy().performAggregation(commands.get(i),¶					// eventAggregator);¶¶				}¶¶			}¶		}¶	}¶		¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#convertXMLLogToObjects(java.lang.String)¶	 */¶	@Override¶	@Visible(false)¶	public List<List<EHICommand>> convertXMLLogToObjects(String aFolderName) {¶¶		List<List<EHICommand>> listOfListOFcommands = new Vector<List<EHICommand>>();¶		// String fullName = participantsFolder.getText()¶		// + aFolderName + "/";¶		String fullName = aFolderName;¶		File folder = new File(fullName);¶		if (!folder.exists()) {¶			System.out.println("folder does not exist:" + fullName);¶			return listOfListOFcommands;¶		}¶		if (!folder.isDirectory()) {¶			System.out.println("folder not a directory:" + fullName);¶			return listOfListOFcommands;¶		}¶		List<String> participantFiles = MainConsoleUI.getFilesForFolder(folder);¶		System.out.println("Particpant " + aFolderName + " has "¶				+ participantFiles.size() + " file(s)");¶		//Ken's code to recognize student project¶		if (fullName.contains("helper-config"+File.separator+"Student Project")) {¶			List<String> logFile = new Vector<>();¶			for (String string : participantFiles) {¶				if (string.endsWith("log.xml")) {¶					logFile.add(string);¶				}¶			}¶			participantFiles = logFile;¶		} else if (!fullName.contains("ExperimentalData")){¶			String largestFileName = "";¶			String secondLargestFileName = "";¶			for (int i = 0; i < participantFiles.size(); i++) {¶				String aFileName = participantFiles.get(i);¶				if (aFileName.compareTo(largestFileName) > 0) {¶					secondLargestFileName = largestFileName;¶					largestFileName = aFileName;¶				} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶					secondLargestFileName = aFileName;¶				}¶			}¶			participantFiles.remove(largestFileName);¶			participantFiles.remove(secondLargestFileName);¶		}¶		// end ken's code¶		¶		for (int i = 0; i < participantFiles.size(); i++) {¶//			String aFileName = fullName + participantFiles.get(i);¶			String aFileName = Paths.get(fullName, participantFiles.get(i)).toString();¶¶			if (!aFileName.endsWith(".xml"))¶				continue;¶¶			// List<ICommand> commands = reader.readAll(participantDirectory¶			// + participantFiles.get(i));¶			System.out.println("Reading " + aFileName);¶			// List<ICommand> commands;¶			try {¶//				List<EHICommand> commands = reader.readAll(aFileName);¶				List<EHICommand> commands = reader.readAll(aFileName);¶¶				listOfListOFcommands.add(commands);¶¶			} catch (Exception e) {¶				e.printStackTrace();¶				System.out.println("Could not read file" + aFileName + e);¶¶			}¶¶			// listOfListOFcommands.add(commands);¶		}¶¶		return listOfListOFcommands;¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#getParameters()¶	 */¶	@Override¶	@Row(1)¶	// @Visible(false)¶	public AnalyzerParameters getAnalyzerParameters() {¶		return parameters;¶	}¶¶	// let us do this in the analyzerprocessor¶	@Visible(false)¶	public static void maybeRecordFeatures(RatioFeatures details) {¶¶		if (!DifficultyPredictionSettings.isNewRatioFiles()¶				&& DifficultyPredictionSettings.isRatioFileExists())¶			return;¶		return;¶¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#getDifficultyEventProcessor()¶	 */¶	@Override¶	@Visible(false)¶	public DifficultyPredictionPluginEventProcessor getDifficultyEventProcessor() {¶		return difficultyEventProcessor;¶	}¶¶	/*¶	 * (non-Javadoc)¶	 * ¶	 * @see analyzer.Analyzer#setDifficultyEventProcessor(difficultyPrediction.¶	 * DifficultyPredictionPluginEventProcessor)¶	 */¶	@Override¶	@Visible(false)¶¶	public void setDifficultyEventProcessor(¶			DifficultyPredictionPluginEventProcessor difficultyEventProcessor) {¶		this.difficultyEventProcessor = difficultyEventProcessor;¶	}¶¶	@Override¶	@Visible(false)¶	public void addAnalyzerListener(AnalyzerListener aListener) {¶		listeners.add(aListener);¶	}¶¶	@Override¶	@Visible(false)¶	public void removeAnalyzerListener(AnalyzerListener aListener) {¶		listeners.remove(aListener);¶	}¶¶//	@Override¶//	public void notifyNewCorrectStatus(int aStatus) {¶//		for (AnalyzerListener aListener : listeners) {¶//			aListener.newCorrectStatus(aStatus);¶//		}¶//	}¶	@Override¶	@Visible(false)¶	public void notifyNewPrediction(PredictionCommand aPredictionCommand, PredictionType aPredictionType, long aStartAbsoluteTime, long aDuration) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newPrediction(aPredictionCommand, aPredictionType, aStartAbsoluteTime, aDuration);¶		}¶	}¶	¶	¶	¶	@Override¶	@Visible(false)¶	public void notifyNewCorrectStatus(DifficultyCommand difficultyCommand, Status aStatus, long aStartAbsoluteTime, long aDuration) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newCorrectStatus(difficultyCommand, aStatus, aStartAbsoluteTime, aDuration);¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public void notifyWebVisit(WebVisitCommand aCommand,long aStartAbsoluteTime, long aDuration) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newWebVisit(aCommand, aStartAbsoluteTime, aDuration);¶		}		¶	}¶	¶	@Override¶	@Visible(false)¶	public void notifyNewStoredCommand(EHICommand aCommand,long aStartAbsoluteTime, long aDuration) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newStoredCommand(aCommand, aStartAbsoluteTime, aDuration);¶		}		¶	}¶	¶	@Override¶	@Visible(false)¶	public void notifyNewStoredInputCommand(EHICommand aCommand, long aStartAbsoluteTime, long aDuration) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newStoredInputCommand(aCommand, aStartAbsoluteTime, aDuration);¶		}¶		¶	}¶	¶	@Override¶	@Visible(false)¶	public void notifyReplayStarted() {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.replayStarted();¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public void notifyReplayFinished() {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.replayFinished();¶		}¶	}¶¶	@Override¶	@Visible(false)¶	public void notifyNewParticipant(String anId, String aFolder) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newParticipant(anId, aFolder);¶		}¶	}¶¶	@Override¶	@Visible(false)¶	public void notifyFinishParticipant(String anId, String aFolder) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.finishParticipant(anId, aFolder);¶		}¶	}¶	/**¶	 * This will be called once for each file in the nested command list¶	 */¶	@Override¶	@Visible(false)¶	public void notifyStartTimeStamp(long aStartTimeStamp) {¶//		lastStartTimestamp = aStartTimeStamp;¶		for (AnalyzerListener aListener : listeners) {¶			aListener.startTimestamp(aStartTimeStamp);¶		}¶	}¶	@Override¶	@Visible(false)¶	public void notifyExperimentStartTimeStamp(long aStartTimeStamp) {¶//		lastStartTimestamp = aStartTimeStamp;¶		for (AnalyzerListener aListener : listeners) {¶			aListener.experimentStartTimestamp(aStartTimeStamp);¶		}¶	}¶¶	@Override¶	@Visible(false)¶	public void notifyNewBrowseLine(String aLine) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newBrowseLine(aLine);¶			String[] parts = aLine.split("\t");¶			String[] dateParts = parts[0].split(" ");¶			String dateString = dateParts[0] + " " + dateParts[1];¶			Date aDate = new Date(dateString);¶			aListener.newBrowseEntries(aDate, parts[1], parts[2]);¶		}¶	}¶	¶	/*¶	 * Just for compatibility with old scheme in which all lines are fired at the end¶	 */¶	@Visible(false)¶	public void notifyAllWebVisitsInFile() {¶		for (String aLine:webVisitsInFile) {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newBrowseLine(aLine);¶			String[] parts = aLine.split("\t");¶			String[] dateParts = parts[0].split(" ");¶			String dateString = dateParts[0] + " " + dateParts[1];¶			Date aDate = new Date(dateString);¶			aListener.newBrowseEntries(aDate, parts[1], parts[2]);¶		}¶		}¶	}¶	¶	@Visible(false)¶	public void notifyAllWebCommandsInFile() {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.newBrowserCommands(sortedWebVisitCommands);¶		}¶		¶	}¶	¶protected void fireWebVisitsBefore(long anAbsoluteTimeBefore) {¶	while (maybeFireWebVisitBefore(anAbsoluteTimeBefore));¶	¶}¶protected boolean maybeFireWebVisitBefore(long anAbsoluteTimeBefore) {¶	if (sortedWebVisitQueue.isEmpty())¶		return false;¶	WebVisitCommand aCommand= sortedWebVisitQueue.get(0);¶	long aTimestamp = aCommand.getTimestamp();¶	if (aTimestamp < experimentStartTimestamp) { // spurious command ¶		sortedWebVisitQueue.remove(0);¶		sortedWebVisitCommands.remove(aCommand);¶		System.err.println(new Date(aTimestamp) + "ignoring command before experiment start time"); ¶		return false;¶	}¶	if (aTimestamp< anAbsoluteTimeBefore) {¶		maybeFillDurationOfLastWebVisit(aTimestamp);¶		notifyWebVisit(aCommand, aTimestamp, duration(aCommand));¶		lastWebVisitCommandWithoutDuration = aCommand;¶		sortedWebVisitQueue.remove(0);¶		return true;¶	} else {¶		return false;¶	}¶}¶protected WebVisitCommand toWebVisitCommand(String aLine) {¶	¶	String[] parts = aLine.split("\t");¶	String[] dateParts = parts[0].split(" ");¶	String dateString = dateParts[0] + " " + dateParts[1];¶	Date aDate = new Date(dateString);¶	long aTimestamp = aDate.getTime();¶	WebVisitCommand aWebVisitCommand = new WebVisitCommand(parts[1], parts[2]);¶//	aWebVisitCommand.setTimestamp2(aTimestamp); //absolute tiem¶	aWebVisitCommand.setTimestamp(aTimestamp); // absolute Time, should we make it relative?¶//	lastWebVisitCommandWithoutDuration = aWebVisitCommand;¶¶	return aWebVisitCommand;¶}¶¶	@Visible(false)¶	public void notifyFinishedBrowserLines() {¶		for (AnalyzerListener aListener : listeners) {¶			aListener.finishedBrowserLines();¶¶		}¶	}¶¶	static Analyzer instance;¶¶	@Visible(false)¶	public static Analyzer getInstance() {¶		return AnalyzerFactory.getSingleton();¶		// if (instance == null) {¶		// instance = new AnAnalyzer();¶		// }¶		// return instance;¶	}¶¶	@Override¶	@Visible(false)¶	public Map<String, Queue<StuckPoint>> getStuckPointMap() {¶		return Collections.unmodifiableMap(stuckPoint);¶¶	}¶¶	@Visible(false)¶	public Map<String, Queue<StuckInterval>> getStuckIntervalMap() {¶		return Collections.unmodifiableMap(stuckInterval);¶¶	}¶¶	@Override¶	@Visible(false)¶	public void setOutputSubDirectory(String outputDir) {¶		this.outputSubdirectory = outputDir;¶¶	}¶¶	/**¶	 * Grab the output directory¶	 * ¶	 */¶	@Override¶	@Visible(false)¶	public String getOutputDirectory() {¶		return this.outputSubdirectory;¶¶	}¶¶	@Override¶	@Visible(false)¶	public AnalyzerParameters getParameterSelector() {¶		return this.parameters;¶¶	}¶¶	@Visible(false)¶	public static String convertSecondsToHMmSs(long seconds) {¶	    long s = seconds % 60;¶	    long m = (seconds / 60) % 60;¶	    long h = (seconds / (60 * 60)) % 24;¶	    return String.format("%d:%02d:%02d", h,m,s);¶	}¶	@Visible(false)¶	public static String convertMillSecondsToHMmSs(long aMilliSeconds) {¶	    return convertSecondsToHMmSs(aMilliSeconds/1000);¶	}¶	@Visible(false)¶	public static long  duration(EHICommand aCommand) {¶		return duration (aCommand.getTimestamp(), aCommand.getTimestamp2());¶	}¶	@Visible(false)¶    public static long  duration(long aTimestamp1, long aTimestamp2) {¶    	if (aTimestamp2 < aTimestamp1 && aTimestamp2 != 0) {¶    		throw new RuntimeException();¶    	}¶    	return aTimestamp2 == 0?0:aTimestamp2 - aTimestamp1;¶	}¶¶¶	boolean maybeProcessPrediction(EHICommand newCommand, long aStartAbsoluteTime, long aDuration) {¶		if (newCommand instanceof PredictionCommand) {¶			PredictionCommand aPredictionCommand = (PredictionCommand) newCommand;¶			¶			lastPrediction = ARatioFileGenerator¶					.toInt(aPredictionCommand);¶//			System.out.println("Prediction command at time stamp:" + newCommand + " " + newCommand.getTimestamp());¶//			notifyNewCorrectStatus(lastPrediction);¶			notifyNewPrediction(aPredictionCommand, aPredictionCommand.getPredictionType(), aStartAbsoluteTime, aDuration);¶			return true;¶		}¶		return false;¶	}¶	¶	void maybeFillDurationOfLastWebVisit(long aStartTimeOfNextCommmand) {¶		if (lastWebVisitCommandWithoutDuration != null) {¶			lastWebVisitCommandWithoutDuration.setTimestamp2(aStartTimeOfNextCommmand); // filling absolute time and not duration but next time stamp¶			lastWebVisitCommandWithoutDuration =null;¶		}¶	}¶	¶	void processStoredCommand(EHICommand aCommand, long aStartAbsoluteTime, long aDuration) {¶		¶		notifyNewStoredCommand(aCommand, aStartAbsoluteTime, aDuration);¶	}¶	¶	void processStoredInputCommand(EHICommand aCommand, long aStartAbsoluteTime, long aDuration) {¶		maybeFillDurationOfLastWebVisit(aStartAbsoluteTime);¶		notifyNewStoredInputCommand(aCommand, aStartAbsoluteTime, aDuration);¶	}¶¶	boolean maybeProcessCorrection(EHICommand newCommand, long aStartAbsoluteTime, long aDuration) {¶		if (newCommand instanceof DifficultyCommand¶		// && ((DifficulyStatusCommand) newCommand).getStatus() != null¶		) {¶			DifficultyCommand aDifficultyCommand = (DifficultyCommand) newCommand;¶			Status aStatus = ((DifficultyCommand) newCommand).getStatus();		¶			if (aStatus == Status.Initialization) {¶				if (newCommand.getTimestamp() == 0 && newCommand.getTimestamp2() > 0) {¶					¶					startTimestamp = newCommand.getTimestamp2();¶					notifyStartTimeStamp(startTimestamp);¶					if (experimentStartTimestamp == 0) {¶						experimentStartTimestamp = startTimestamp;¶						notifyExperimentStartTimeStamp(experimentStartTimestamp);¶					}¶				}¶				return false;¶			}¶			lastCorrection = ARatioFileGenerator¶					.toInt(aDifficultyCommand);¶//			notifyNewCorrectStatus(lastCorrection);			¶			notifyNewCorrectStatus(aDifficultyCommand, aDifficultyCommand.getStatus(), aStartAbsoluteTime, aDuration);¶			return true;¶¶		}¶		return false;¶	}¶	¶¶¶	@Override¶	public void addPropertyChangeListener(PropertyChangeListener arg0) {¶		propertyChangeSupport.addPropertyChangeListener(arg0);¶¶	}¶	@Visible(false)¶	public static void main(String[] args) {¶¶		// Analyzer analyzer = new AnAnalyzer();¶		DifficultyPredictionSettings.setReplayMode(true);¶¶		OEFrame frame = ObjectEditor.edit(AnAnalyzer.getInstance());¶		frame.setSize(500, 335);¶//		ObjectEditor.edit(AnAnalyzer.getInstance(), 500, 335);¶¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7330" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:54:56 EST 2021" docASTNodeCount="452" docActiveCodeLength="3401" docExpressionCount="274" docLength="3575" projectName="Hermes" starttimestamp="1612813070441" timestamp="8226147">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.HashMap;¶import java.util.Map;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	¶	public static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; ¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶//		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶//			return "Search Result";¶//		}¶		return "Search Result";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="7336" _type="Insert" date="Mon Feb 08 16:55:01 EST 2021" docASTNodeCount="456" docActiveCodeLength="3417" docExpressionCount="277" docLength="3591" length="16" offset="3564" repeat="13" starttimestamp="1612813070441" timestamp="8231238" timestamp2="8234935">
    <text><![CDATA[
		type = getty]]></text>
  </DocumentChange>
  <DocumentChange __id="7360" _type="Replace" date="Mon Feb 08 16:55:05 EST 2021" docASTNodeCount="457" docActiveCodeLength="3421" docExpressionCount="278" docLength="3595" endLine="120" insertionLength="9" int_docASTNodeCount="454" int_docActiveCodeLength="3412" int_docExpressionCount="275" int_docLength="3586" length="5" offset="3575" startLine="120" starttimestamp="1612813070441" timestamp="8235430">
    <deletedText><![CDATA[getty]]></deletedText>
    <insertedText><![CDATA[getType()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7362" _type="Insert" date="Mon Feb 08 16:55:06 EST 2021" docASTNodeCount="457" docActiveCodeLength="3422" docExpressionCount="278" docLength="3596" length="1" offset="3584" starttimestamp="1612813070441" timestamp="8235880">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="7382" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:55:15 EST 2021" docASTNodeCount="5062" docActiveCodeLength="28972" docExpressionCount="3480" docLength="31318" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8244601">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶//			Map<String, String> searchWords = new HashMap<>();¶			Map<String, List<String>> searches = new HashMap<>();¶			EHICommand lastSearch = null;¶//			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							if (command.getAttributesMap().get("type").equals(""), Diff(DELETE,"Google "), Diff(EQUAL,"Search")) {¶//								if (lastPage != null) {¶//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));¶//								}¶//								lastPage = null;¶								lastSearch = command;¶							} ¶							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));¶								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));¶//								lastPage = command;¶							}¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			for (String s : searches.keySet()) {¶				List<String> nextLine = new ArrayList<>();¶				nextLine.add(s);¶				for (int i = 0; i < searches.get(s).size(); i++) {¶					String url = searches.get(s).get(i);¶					nextLine.add(titles.get(s));¶					nextLine.add(url);¶					nextLine.add(i+"");¶					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");¶					cw2.writeNext(nextLine.toArray(new String[1]));¶					nextLine = new ArrayList<>();¶					nextLine.add("");¶				}¶			}¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
//			Map<String, String> searchWords = new HashMap<>();
			Map<String, List<String>> searches = new HashMap<>();
			EHICommand lastSearch = null;
//			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							if (command.getAttributesMap().get("type").equals("Search")) {
//								if (lastPage != null) {
//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));
//								}
//								lastPage = null;
								lastSearch = command;
							} 
							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));
								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));
//								lastPage = command;
							}
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			for (String s : searches.keySet()) {
				List<String> nextLine = new ArrayList<>();
				nextLine.add(s);
				for (int i = 0; i < searches.get(s).size(); i++) {
					String url = searches.get(s).get(i);
					nextLine.add(titles.get(s));
					nextLine.add(url);
					nextLine.add(i+"");
					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");
					cw2.writeNext(nextLine.toArray(new String[1]));
					nextLine = new ArrayList<>();
					nextLine.add("");
				}
			}
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
}
]]></snapshot>
  </Command>
  <Command __id="7397" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:55:16 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8245817">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶"), Diff(INSERT,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
		replayer.analyzeFolder(experimentalClassFolderPath);
	}
}

















]]></snapshot>
  </Command>
  <Command __id="7427" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:55:51 EST 2021" docASTNodeCount="5062" docActiveCodeLength="28972" docExpressionCount="3480" docLength="31318" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8280869">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶//			Map<String, String> searchWords = new HashMap<>();¶			Map<String, List<String>> searches = new HashMap<>();¶			EHICommand lastSearch = null;¶//			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							if (command.getAttributesMap().get("type").equals("Search")) {¶//								if (lastPage != null) {¶//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));¶//								}¶//								lastPage = null;¶								lastSearch = command;¶							} ¶							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));¶								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));¶//								lastPage = command;¶							}¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			for (String s : searches.keySet()) {¶				List<String> nextLine = new ArrayList<>();¶				nextLine.add(s);¶				for (int i = 0; i < searches.get(s).size(); i++) {¶					String url = searches.get(s).get(i);¶					nextLine.add(titles.get(s));¶					nextLine.add(url);¶					nextLine.add(i+"");¶					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");¶					cw2.writeNext(nextLine.toArray(new String[1]));¶					nextLine = new ArrayList<>();¶					nextLine.add("");¶				}¶			}¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="7431" _type="Delete" date="Mon Feb 08 16:55:57 EST 2021" docASTNodeCount="4791" docActiveCodeLength="27474" docExpressionCount="3311" docLength="29820" endLine="888" length="1498" offset="29815" repeat="2" startLine="843" starttimestamp="1612813070441" timestamp="8286915" timestamp2="8287059">
    <text><![CDATA[
	
	private void createLastPageOfSearch(String assign, File folder) {
		File csv = new File(folder,assign+"LastPageOfSearch.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"URL", "# of Visits", "Provided?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="7437" _type="Insert" date="Mon Feb 08 16:56:06 EST 2021" docASTNodeCount="4792" docActiveCodeLength="27476" docExpressionCount="3312" docLength="29822" length="2" offset="23736" repeat="2" starttimestamp="1612813070441" timestamp="8296044" timestamp2="8296388">
    <text><![CDATA[1+]]></text>
  </DocumentChange>
  <Command __id="7446" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:56:10 EST 2021" docASTNodeCount="78" docActiveCodeLength="689" docExpressionCount="38" docLength="934" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8300306">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="7480" _type="DiffBasedFileOpenCommand" date="Mon Feb 08 16:56:37 EST 2021" docASTNodeCount="4792" docActiveCodeLength="27476" docExpressionCount="3312" docLength="29822" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8327410">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							EHICommand webCommand = null;¶							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶//			Map<String, String> searchWords = new HashMap<>();¶			Map<String, List<String>> searches = new HashMap<>();¶			EHICommand lastSearch = null;¶//			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							if (command.getAttributesMap().get("type").equals("Search")) {¶//								if (lastPage != null) {¶//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));¶//								}¶//								lastPage = null;¶								lastSearch = command;¶							} ¶							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));¶								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));¶//								lastPage = command;¶							}¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			for (String s : searches.keySet()) {¶				List<String> nextLine = new ArrayList<>();¶				nextLine.add(s);¶				for (int i = 0; i < searches.get(s).size(); i++) {¶					String url = searches.get(s).get(i);¶					nextLine.add(titles.get(s));¶					nextLine.add(url);¶					nextLine.add(i+"), Diff(INSERT,"1+"), Diff(EQUAL,""");¶					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");¶					cw2.writeNext(nextLine.toArray(new String[1]));¶					nextLine = new ArrayList<>();¶					nextLine.add("");¶				}¶			}¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶"), Diff(DELETE,"	¶	private void createLastPageOfSearch(String assign, File folder) {¶		File csv = new File(folder,assign+"LastPageOfSearch.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"URL", "# of Visits", "Provided?"};¶			cw.writeNext(header);¶			¶			Map<String, Integer> urls = new HashMap<>();¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof WebCommand) {¶							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);¶						}¶					}¶				}¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				boolean provided = false;¶				for (String url : WebCommand.PROVIDED_URL) {¶					if (s.equals(url)) {¶						provided = true;¶						break;¶					}¶				}¶				String[] nextLine = {s, sortedMap.get(s)+"", provided+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							EHICommand webCommand = null;
							webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"Search Word", "Title", "URL", "Sequence", "Last Page of the Search?"};
			cw.writeNext(header);
			
			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
//			Map<String, String> searchWords = new HashMap<>();
			Map<String, List<String>> searches = new HashMap<>();
			EHICommand lastSearch = null;
//			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof WebCommand) {
							if (command.getAttributesMap().get("type").equals("Search")) {
//								if (lastPage != null) {
//									lastSearches.put(lastSearch.getDataMap().get("keyword"), lastPage.getDataMap().get("URL"));
//								}
//								lastPage = null;
								lastSearch = command;
							} 
							if (lastSearch != null && command.getAttributesMap().get("type").equals("Search Result")) {
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
//								searchWords.put(command.getDataMap().get("URL"), lastSearch.getDataMap().get("keyword"));
								searches.get(lastSearch.getDataMap().get("keyword")).add(command.getDataMap().get("URL"));
//								lastPage = command;
							}
							urls.merge(command.getDataMap().get("URL"), 1, Integer::sum);
							titles.put(command.getDataMap().get("URL"), command.getDataMap().get("keyword"));
						}
					}
				}
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				boolean provided = false;
				for (String url : WebCommand.PROVIDED_URL) {
					if (s.equals(url)) {
						provided = true;
						break;
					}
				}
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", provided+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			for (String s : searches.keySet()) {
				List<String> nextLine = new ArrayList<>();
				nextLine.add(s);
				for (int i = 0; i < searches.get(s).size(); i++) {
					String url = searches.get(s).get(i);
					nextLine.add(titles.get(s));
					nextLine.add(url);
					nextLine.add(i+1+"");
					nextLine.add(i == searches.get(s).size()-1 ? "TRUE" : "FALSE");
					cw2.writeNext(nextLine.toArray(new String[1]));
					nextLine = new ArrayList<>();
					nextLine.add("");
				}
			}
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="7493" _type="Insert" date="Mon Feb 08 16:57:08 EST 2021" docASTNodeCount="4568" docActiveCodeLength="27483" docExpressionCount="3150" docLength="29829" length="7" offset="23444" repeat="3" starttimestamp="1612813070441" timestamp="8357702" timestamp2="8358786">
    <text><![CDATA[
			fw]]></text>
  </DocumentChange>
  <DocumentChange __id="7499" _type="Delete" date="Mon Feb 08 16:57:09 EST 2021" docASTNodeCount="4792" docActiveCodeLength="27481" docExpressionCount="3312" docLength="29827" endLine="650" length="2" offset="23449" repeat="2" startLine="650" starttimestamp="1612813070441" timestamp="8359376" timestamp2="8359474">
    <text><![CDATA[fw]]></text>
  </DocumentChange>
  <Command __id="7492" _type="PauseCommand" date="Mon Feb 08 16:57:07 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8356865">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8439]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7491" _type="MoveCaretCommand" caretOffset="9297" date="Mon Feb 08 16:57:07 EST 2021" docOffset="23444" starttimestamp="1612813070441" timestamp="8356865" />
  <Command __id="7494" _type="InsertStringCommand" date="Mon Feb 08 16:57:08 EST 2021" starttimestamp="1612813070441" timestamp="8357709" timestamp2="8357709">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7496" _type="InsertStringCommand" date="Mon Feb 08 16:57:09 EST 2021" starttimestamp="1612813070441" timestamp="8358576" timestamp2="8358576">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="7497" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:57:09 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8358619" />
  <Command __id="7504" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:57:10 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8360272" />
  <Command __id="7506" _type="InsertStringCommand" date="Mon Feb 08 16:57:10 EST 2021" starttimestamp="1612813070441" timestamp="8360285" timestamp2="8360285">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7507" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:57:10 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8360335" />
  <Command __id="7509" _type="PauseCommand" date="Mon Feb 08 16:57:12 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8361577">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1242]]></rest>
    <prev><![CDATA[AssistCommand]]></prev>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7514" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:57:12 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8362465" />
  <Command __id="7516" _type="InsertStringCommand" date="Mon Feb 08 16:57:13 EST 2021" starttimestamp="1612813070441" timestamp="8362598" timestamp2="8362598">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7518" _type="InsertStringCommand" date="Mon Feb 08 16:57:13 EST 2021" starttimestamp="1612813070441" timestamp="8363184" timestamp2="8363184">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="7520" _type="InsertStringCommand" date="Mon Feb 08 16:57:13 EST 2021" starttimestamp="1612813070441" timestamp="8363242" timestamp2="8363242">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7521" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 08 16:57:13 EST 2021" start_end="START" starttimestamp="1612813070441" timestamp="8363285" />
  <Command __id="7523" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:57:13 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8363452" />
  <Command __id="7525" _type="InsertStringCommand" date="Mon Feb 08 16:57:13 EST 2021" starttimestamp="1612813070441" timestamp="8363467" timestamp2="8363467">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7527" _type="InsertStringCommand" date="Mon Feb 08 16:57:14 EST 2021" starttimestamp="1612813070441" timestamp="8364010" timestamp2="8364010">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="7529" _type="PauseCommand" date="Mon Feb 08 16:57:16 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8365819">
    <type><![CDATA[Edit]]></type>
    <rest><![CDATA[1809]]></rest>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="7528" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 08 16:57:16 EST 2021" start_end="END" starttimestamp="1612813070441" timestamp="8365819" />
  <Command __id="7530" _type="MoveCaretCommand" caretOffset="9325" date="Mon Feb 08 16:57:16 EST 2021" docOffset="23472" starttimestamp="1612813070441" timestamp="8365919" />
  <Command __id="7531" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 08 16:57:17 EST 2021" starttimestamp="1612813070441" timestamp="8366569" />
  <Command __id="7532" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:57:17 EST 2021" starttimestamp="1612813070441" timestamp="8366654" />
  <Command __id="7533" _type="EclipseCommand" commandID="" date="Mon Feb 08 16:57:17 EST 2021" starttimestamp="1612813070441" timestamp="8366754" />
  <Command __id="7534" _type="ShellCommand" date="Mon Feb 08 16:57:18 EST 2021" starttimestamp="1612813070441" timestamp="8367618" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7535" _type="ShellCommand" date="Mon Feb 08 16:57:18 EST 2021" starttimestamp="1612813070441" timestamp="8368178" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7539" _type="PauseCommand" date="Mon Feb 08 16:57:25 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8375376">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5606]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="7538" _type="RunCommand" date="Mon Feb 08 16:57:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8375376" type="Run" />
  <Command __id="7540" _type="RunCommand" date="Mon Feb 08 16:57:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8375376" type="Run" />
  <Command __id="7541" _type="ShellCommand" date="Mon Feb 08 16:57:26 EST 2021" starttimestamp="1612813070441" timestamp="8376102" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7542" _type="ConsoleOutput" date="Mon Feb 08 16:57:26 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8376268" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing Experiment student 20 to ExperimentWebStats.csv¶Writing Experiment student 31 to ExperimentWebStats.csv¶Writing Experiment student 21 to ExperimentWebStats.csv¶Writing Experiment student 32 to ExperimentWebStats.csv¶Writing Experiment student pd2 to ExperimentWebStats.csv"), Diff(INSERT,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7543" _type="ConsoleOutput" date="Mon Feb 08 16:57:26 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8376465" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-36-31-023"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE,"\Log2013-09-13-14-39-52-726.xml"), Diff(INSERT," has 1 file(s)"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-54-59-878"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7544" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8376564" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7545" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8376637" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-12-1"), Diff(DELETE,"5-05-47-820.xml"), Diff(INSERT,"0-40-05-321.xml¶Reading student Eclipse"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7546" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8376697" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"6"), Diff(EQUAL,"-10-"), Diff(DELETE,"40-05-321"), Diff(INSERT,"05-18-718"), Diff(EQUAL,".xml¶Reading student Eclipse¶"), Diff(INSERT,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml¶")]]]></diff>
  </Command>
  <Command __id="7547" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8376810" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"-10-"), Diff(DELETE,"05-18-718"), Diff(INSERT,"54-43-267"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"2-59"), Diff(EQUAL,"-3"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"-0"), Diff(DELETE,"6-069"), Diff(INSERT,"52.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7548" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8376913" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"04-982"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-4"), Diff(INSERT,"5-33-0"), Diff(EQUAL,"3-2"), Diff(INSERT,"2"), Diff(EQUAL,"6"), Diff(DELETE,"7"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7549" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8377016" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"-14-3"), Diff(DELETE,"9-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071"), Diff(INSERT,"0-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7550" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8377098" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-37"), Diff(INSERT,"2-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-82"), Diff(EQUAL,"9.xml¶")]]]></diff>
  </Command>
  <Command __id="7551" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8377201" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"06-16-07-40-790"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"1-15-13-48-829"), Diff(INSERT,"3-12-11-53-568.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="7552" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8377264" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
Writing Experiment student 22 to ExperimentWebStats.csv
Writing Experiment student 33 to ExperimentWebStats.csv
Writing Experiment student 23 to ExperimentWebStats.csv
Writing Experiment student 24 to ExperimentWebStats.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest has 1"), Diff(INSERT,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(EQUAL,"1\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"-09-"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"6-1"), Diff(DELETE,"6-07-40-790"), Diff(INSERT,"0-30-44-271"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant"), Diff(INSERT,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-13-12-11-53-568.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02-12-12-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml"), Diff(INSERT,"4-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentWebStats.csv¶Writing Experiment student 33 to ExperimentWebStats.csv¶Writing Experiment student 23 to ExperimentWebStats.csv¶Writing Experiment student 24 to ExperimentWebStats.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7553" _type="ConsoleOutput" date="Mon Feb 08 16:57:27 EST 2021" overflow="false" starttimestamp="1612813070441" timestamp="8377333" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 26 to ExperimentWebStats.csv
Writing Experiment student 16 to ExperimentWebStats.csv
Writing Experiment student 27 to ExperimentWebStats.csv
Writing Experiment student 17 to ExperimentWebStats.csv
Writing Experiment student 28 to ExperimentWebStats.csv
Writing Experiment student 18 to ExperimentWebStats.csv
Writing Experiment student 29 to ExperimentWebStats.csv
Writing Experiment student 19 to ExperimentWebStats.csv
Writing Experiment student pd1 to ExperimentWebStats.csv
Writing Experiment student 30 to ExperimentWebStats.csv
Writing Experiment student 20 to ExperimentWebStats.csv
Writing Experiment student 31 to ExperimentWebStats.csv
Writing Experiment student 21 to ExperimentWebStats.csv
Writing Experiment student 32 to ExperimentWebStats.csv
Writing Experiment student pd2 to ExperimentWebStats.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml"), Diff(INSERT,"Writing Experiment student 26 to ExperimentWebStats.csv¶Writing Experiment student 16 to ExperimentWebStats.csv¶Writing Experiment student 27 to ExperimentWebStats.csv¶Writing Experiment student 17 to ExperimentWebStats.csv¶Writing Experiment student 28 to ExperimentWebStats.csv¶Writing Experiment student 18 to ExperimentWebStats.csv¶Writing Experiment student 29 to ExperimentWebStats.csv¶Writing Experiment student 19 to ExperimentWebStats.csv¶Writing Experiment student pd1 to ExperimentWebStats.csv¶Writing Experiment student 30 to ExperimentWebStats.csv¶Writing Experiment student 20 to ExperimentWebStats.csv"), Diff(EQUAL,"¶Writing Experiment student "), Diff(DELETE,"22"), Diff(INSERT,"31"), Diff(EQUAL," to ExperimentWebStats.csv¶Writing Experiment student "), Diff(DELETE,"33"), Diff(INSERT,"21"), Diff(EQUAL," to ExperimentWebStats.csv¶Writing Experiment student "), Diff(DELETE,"2"), Diff(EQUAL,"3"), Diff(INSERT,"2"), Diff(EQUAL," to ExperimentWebStats.csv¶Writing Experiment student "), Diff(INSERT,"pd"), Diff(EQUAL,"2"), Diff(DELETE,"4"), Diff(EQUAL," to ExperimentWebStats.csv¶")]]]></diff>
  </Command>
  <Command __id="7554" _type="RunCommand" date="Mon Feb 08 16:57:27 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8377467" type="Debug" />
  <Command __id="7555" _type="RunCommand" date="Mon Feb 08 16:57:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8377467" type="Run" />
  <Command __id="7556" _type="RunCommand" date="Mon Feb 08 16:57:27 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1612813070441" timestamp="8377467" type="Debug" />
  <Command __id="7557" _type="RunCommand" date="Mon Feb 08 16:57:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612813070441" timestamp="8377467" type="Run" />
  <Command __id="7559" _type="PauseCommand" date="Mon Feb 08 16:57:33 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8383308">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[5841]]></rest>
    <prev><![CDATA[RunCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7558" _type="ShellCommand" date="Mon Feb 08 16:57:33 EST 2021" starttimestamp="1612813070441" timestamp="8383308" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7560" _type="MoveCaretCommand" caretOffset="5205" date="Mon Feb 08 16:57:33 EST 2021" docOffset="6686" starttimestamp="1612813070441" timestamp="8383376" />
  <Command __id="7562" _type="PauseCommand" date="Mon Feb 08 16:57:35 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8385366">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1989]]></rest>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7561" _type="ShellCommand" date="Mon Feb 08 16:57:35 EST 2021" starttimestamp="1612813070441" timestamp="8385365" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7563" _type="ShellCommand" date="Mon Feb 08 16:57:35 EST 2021" starttimestamp="1612813070441" timestamp="8385494" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7564" _type="ShellCommand" date="Mon Feb 08 16:57:36 EST 2021" starttimestamp="1612813070441" timestamp="8386095" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7566" _type="PauseCommand" date="Mon Feb 08 16:57:44 EST 2021" range="5s-10s" starttimestamp="1612813070441" timestamp="8394247">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[8152]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7565" _type="ShellCommand" date="Mon Feb 08 16:57:44 EST 2021" starttimestamp="1612813070441" timestamp="8394247" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7568" _type="PauseCommand" date="Mon Feb 08 16:57:45 EST 2021" range="1s-2s" starttimestamp="1612813070441" timestamp="8395260">
    <type><![CDATA[Other]]></type>
    <rest><![CDATA[1013]]></rest>
    <prev><![CDATA[ShellCommand]]></prev>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7567" _type="ShellCommand" date="Mon Feb 08 16:57:45 EST 2021" starttimestamp="1612813070441" timestamp="8395260" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7569" _type="ShellCommand" date="Mon Feb 08 16:57:45 EST 2021" starttimestamp="1612813070441" timestamp="8395398" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7570" _type="ShellCommand" date="Mon Feb 08 16:57:46 EST 2021" starttimestamp="1612813070441" timestamp="8396339" type="ECLIPSE_MINIMIZED" />
  <Command __id="7571" _type="ShellCommand" date="Mon Feb 08 16:57:46 EST 2021" starttimestamp="1612813070441" timestamp="8396348" type="ECLIPSE_LOST_FOCUS" />
